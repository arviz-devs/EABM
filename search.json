[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Exploratory Analysis of Bayesian Models",
    "section": "",
    "text": "‎\nWhile conceptually simple, Bayesian methods can be mathematically and numerically challenging. Probabilistic programming languages (PPLs) implement functions to easily build Bayesian models together with efficient automatic inference methods. This helps separate the model building from the inference, allowing practitioners to focus on their specific problems and leaving the PPLs to handle the computational details for them (Bessiere et al. 2013; Daniel Roy 2015; Ghahramani 2015). The inference process generates a posterior distribution - which has a central role in Bayesian statistics - together with other distributions like the posterior predictive distribution and the prior predictive distribution. The correct visualization, analysis, and interpretation of these distributions is key to properly answer the questions that motivated the inference process.\nWhen working with Bayesian models there are a series of related tasks that need to be addressed besides inference itself:\nWe collectively call all these tasks Exploratory analysis of Bayesian models, building on concepts from Exploratory data analysis to examine and gain deeper insights into Bayesian models.\nIn the words of Persi Diaconis (Diaconis 2011):\nIn this book we discuss how to use both numerical and visual summaries to successfully perform the many tasks that are central to the iterative and interactive modeling process. To do so, we first discuss some general principles of data visualization and uncertainty representation that are not exclusive of Bayesian statistics.",
    "crumbs": [
      "‎"
    ]
  },
  {
    "objectID": "index.html#citations",
    "href": "index.html#citations",
    "title": "Exploratory Analysis of Bayesian Models",
    "section": "Citations",
    "text": "Citations\nIf you are using specific methods or functions from the book, please consider citing the scientific paper and/or corresponding package.\nIf you want to cite this online book in your research. The following citation is recommended, as it always resolves to the latest version of the book:\n\nMartin et al. (2025). Exploratory Analysis of Bayesian Models. Zenodo. https://zenodo.org/records/15127549\n\nYou can use the following BibTeX entry:\n@book{eabm_2025,\n  author       = {Osvaldo A Martin and Oriol Abril-Pla},\n  title        = {Exploratory analysis of Bayesian models},\n  month        = apr,\n  year         = 2025,\n  publisher    = {Zenodo},\n  version      = {v0.1.0},\n  doi          = {10.5281/zenodo.15127549},\n  url          = {https://doi.org/10.5281/zenodo.15127549},\n                  },",
    "crumbs": [
      "‎"
    ]
  },
  {
    "objectID": "index.html#donations",
    "href": "index.html#donations",
    "title": "Exploratory Analysis of Bayesian Models",
    "section": "Donations",
    "text": "Donations\nIf you find this book useful, please consider supporting the authors by making a donation. This will help us to keep the book updated and to provide more resources in the future.",
    "crumbs": [
      "‎"
    ]
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "Exploratory Analysis of Bayesian Models",
    "section": "License",
    "text": "License\nThis book is licensed under the CC-BY-NC 4.0. License. See the LICENSE file for details.\n\n\n\n\nBessiere, Pierre, Emmanuel Mazer, Juan Manuel Ahuactzin, and Kamel Mekhnacha. 2013. Bayesian Programming. 1 edition. Boca Raton: Chapman; Hall/CRC. https://www.crcpress.com/Bayesian-Programming/Bessiere-Mazer-Ahuactzin-Mekhnacha/p/book/9781439880326.\n\n\nDaniel Roy. 2015. Probabilistic Programming. http://probabilistic-programming.org.\n\n\nDiaconis, Persi. 2011. “Theories of Data Analysis: From Magical Thinking Through Classical Statistics.” In Exploring Data Tables, Trends, and Shapes, 1–36. John Wiley & Sons, Ltd. https://doi.org/10.1002/9781118150702.ch1.\n\n\nGhahramani, Zoubin. 2015. “Probabilistic Machine Learning and Artificial Intelligence.” Nature 521 (7553): 452–59. https://doi.org/10.1038/nature14541.",
    "crumbs": [
      "‎"
    ]
  },
  {
    "objectID": "Chapters/Elements_of_visualization.html",
    "href": "Chapters/Elements_of_visualization.html",
    "title": "1  Elements of Visualization",
    "section": "",
    "text": "1.1 Coordinate systems and axes\nData visualization requires defining position scales to determine where different data values are located in a graphic. In 2D visualizations, two numbers are required to uniquely specify a point. Thus, we need two position scales. The arrangement of these scales is known as a coordinate system. The most common coordinate system is the 2D Cartesian system, using x and y values with orthogonal axes. Conventionally with the x-axis running horizontally and the y-axis vertically. Figure 1.1 shows a Cartesian coordinate system.\nIn practice, we typically shift the axes so that they do not necessarily pass through the origin (0,0), and instead their location is determined by the data. We do this because it is usually more convenient and easier to read to have the axes to the left and bottom of the figure than in the middle. For instance Figure 1.2 plots the exact same points shown in Figure 1.1 but with the axes placed automatically by matplotlib.\nUsually, data has units, such as degrees Celsius for temperature, centimetres for length, or kilograms for weight. In case we are plotting variables of different types (and hence different units) we can adjust the aspect ratio of the axes as we wish. We can make a figure short and wide if it fits better on a page or screen. But we can also change the aspect ratio to highlight important differences, for example, if we want to emphasize changes along the y-axis we can make the figure tall and narrow. When both the x and y axes use the same units, it’s important to maintain an equal ratio to ensure that the relationship between data points on the graph accurately reflects their quantitative values.\nAfter the cartesian coordinate system, the most common coordinate system is the polar coordinate system. In this system, the position of a point is determined by the distance from the origin and the angle with respect to a reference axis. Polar coordinates are useful for representing periodic data, such as days of the week, or data that is naturally represented in a circular shape, such as wind direction. Figure Figure 1.3 shows a polar coordinate system.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Elements of Visualization</span>"
    ]
  },
  {
    "objectID": "Chapters/Elements_of_visualization.html#coordinate-systems-and-axes",
    "href": "Chapters/Elements_of_visualization.html#coordinate-systems-and-axes",
    "title": "1  Elements of Visualization",
    "section": "",
    "text": "Figure 1.1: Cartesian coordinate system\n\n\n\n\n\n\n\n\n\n\nFigure 1.2: Cartesian coordinate system with axes automatically placed by matplotlib based on the data\n\n\n\n\n\n\n\n\n\n\n\nFigure 1.3: Polar coordinate system",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Elements of Visualization</span>"
    ]
  },
  {
    "objectID": "Chapters/Elements_of_visualization.html#plot-elements",
    "href": "Chapters/Elements_of_visualization.html#plot-elements",
    "title": "1  Elements of Visualization",
    "section": "1.2 Plot elements",
    "text": "1.2 Plot elements\nTo convey visual information we generally use shapes, including lines, circles, squares, etc. These elements have properties associated with them like, position, shape, and color. In addition, we can add text to the plot to provide additional information.\nArviZ uses both matplotlib and bokeh as plotting backends. While for basic use of ArviZ is not necessary to know about these libraries, being familiar with them is useful to better understand some of the arguments in ArviZ’s plots and/or to tweak the default plots generated with ArviZ. If you need to learn more about these libraries we recommend the official tutorials for matplotlib and bokeh.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Elements of Visualization</span>"
    ]
  },
  {
    "objectID": "Chapters/Elements_of_visualization.html#good-practices-and-sources-of-error",
    "href": "Chapters/Elements_of_visualization.html#good-practices-and-sources-of-error",
    "title": "1  Elements of Visualization",
    "section": "1.3 Good practices and sources of error",
    "text": "1.3 Good practices and sources of error\nUsing visualization to deceive third parties should not be the goal of an intellectually honest person, and you must also be careful not to deceive yourself. For example, it has been known for decades that a bar chart is more effective for comparing values than a pie chart. The reason is that our perceptual apparatus is quite good at evaluating lengths, but not very good at evaluating areas. Figure 1.4 shows different visual elements ordered according to the precision with which the human brain can detect differences and make comparisons between them (Cleveland and McGill 1984; Heer and Bostock 2010).\n\n\n\n\n\n\nFigure 1.4: Scale of elementary perceptual tasks, taken from The Truthful Art\n\n\n\n\n1.3.1 General principles for using colours\nHuman eyes work by essentially perceiving 3 wavelengths, this feature is used in technological devices such as screens to generate all colours from combinations of 3 components, Red, Green, and Blue. This is known as the RGB color model. But this is not the only possible system. A very common alternative is the CYMK color model, Cyan, Yellow, Magenta, and Black.\nTo analyze the perceptual attributes of color, it is better to think in terms of Hue, Saturation, and Lightness, HSL is an alternative representation of the RGB color model.\nThe hue is what we colloquially call “different colours”. Green, red, etc. Saturation is how colourful or washed out we perceive a given color. Two colours with different hues will look more different when they have more saturation. The lightness corresponds to the amount of light emitted (active screens) or reflected (impressions), ranging from black to white:\nVarying the tone is useful to easily distinguish categories as shown in Figure 1.5.\n\n\n\n\n\n\nFigure 1.5: Tone variations can be help to distinguish categories.\n\n\n\nIn principle, most humans are capable of distinguishing millions of tones, but if we want to associate categories with colours, the effectiveness of distinguishing them decreases drastically as the number of categories increases. This happens not only because the tones will be increasingly closer to each other, but also because we have a limited working memory. Associating a few colours (say 4) with categories (countries, temperature ranges, etc.) is usually easy. But unless there are pre-existing associations, remembering many categories becomes challenging and this exacerbates when colours are close to each other. This requires us to continually alternate between the graphic and the legend or text where the color-category association is indicated. Adding other elements besides color such as shapes can help, but in general, it will be more useful to try to keep the number of categories relatively low. In addition, it is important to take into account the presentation context, if we want to show a figure during a presentation where we only have a few seconds to dedicate to that figure, it is advisable to keep the figure as simple as possible. This may involve removing items and displaying only a subset of the data. If the figure is part of a text, where the reader will have the time to analyze for a longer period, perhaps the complexity can be somewhat greater.\nAlthough we mentioned before that human eyes are capable of distinguishing three main colours (red, green, and blue), the ability to distinguish these 3 colours varies between people, to the point that many individuals have difficulty distinguishing some colours. The most common case occurs with red and green. This is why it is important to avoid using those colours. An easy way to avoid this problem is to use color-blind-friendly palettes. We’ll see later that this is an easy thing to do when using ArviZ.\nVarying the lightness as in Figure 1.6 is useful when we want to represent a continuous scale. With the hue-based palette (left), it’s quite difficult to determine that our data shows two “spikes”, whereas this is easier to see with the lightness-modifying palette (right). Varying the lightness helps to see the structure of the data since changes in lightness are more intuitively processed as quantitative changes.\n\n\n\n\n\n\nFigure 1.6: Hue-based palette (left) vs lightness-modifying palette (right)\n\n\n\nOne detail that we should note is that the graph on the right of Figure 1.6 does not change only the lightness, it is not a map in gray or blue scales. That palette also changes the hue but in a very subtle way. This makes it aesthetically more pleasing and the subtle variation in hue contributes to increasing the perceptual distance between two values and therefore the ability to distinguish small differences.\nWhen using colours to represent numerical variables it is important to use uniformly perceptual maps like those offered by matplotlib or colorcet. These are maps where the colours vary in such a way that they adequately reflect changes in the data. Not all colormaps are perceptually uniform. Obtaining them is not trivial. Figure 1.7 shows the same image using different colormaps. We can see that widely used maps such as jet (also called rainbow) generate distortions in the image. In contrast viridis, a perceptually uniform color map does not generate such distortions.\n\n\n\n\n\n\nFigure 1.7: non-uniformly perceptual maps like jet can be very misleading\n\n\n\nA common criticism of perceptually smooth maps is that they appear more “flat” or “boring” at first glance. And instead maps like Jet, show greater contrast. But that is precisely one of the problems with maps like Jet, the magnitude of these contrasts does not correlate with changes in the data, so even extremes can occur, such as showing contrasts that are not there and hiding differences that are truly there.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Elements of Visualization</span>"
    ]
  },
  {
    "objectID": "Chapters/Elements_of_visualization.html#style-sheets",
    "href": "Chapters/Elements_of_visualization.html#style-sheets",
    "title": "1  Elements of Visualization",
    "section": "1.4 Style sheets",
    "text": "1.4 Style sheets\nMatplotlib allows users to easily switch between plotting styles by defining style sheets. ArviZ is delivered with a few additional styles that can be applied globally by writing az.style.use(name_of_style) or inside a with statement.\n\nazp.style.use('arviz-variat')\nx = np.linspace(0, 1, 100)\ndist = pz.Beta(2, 5).pdf(x)\n\nfig = plt.figure()\nfor i in range(10):\n    plt.plot(x, dist - i, f'C{i}', label=f'C{i}', lw=3)\nplt.xlabel('x')\nplt.ylabel('f(x)', rotation=0, labelpad=15);\n\n\n\n\n\n\n\nFigure 1.8: arviz-variat style use a color-blind friendly palette\n\n\n\n\n\nThe color palettes in ArviZ were designed with the help of colorcyclepicker. Other palettes distributed with ArviZ are 'arviz-cetrino', and 'arviz-vibrant'. To list all available styles use azp.style.available().\nIf you need to do plots in grey-scale we recommend restricting yourself to the first 3 colours of the ArviZ palettes (“C0”, “C1” and “C2”), otherwise, you may need to use different line styles or different markers.\n\n\n\n\nCleveland, William S., and Robert McGill. 1984. “Graphical Perception: Theory, Experimentation, and Application to the Development of Graphical Methods.” Journal of the American Statistical Association 79 (387): 531–54. https://doi.org/10.1080/01621459.1984.10478080.\n\n\nHeer, Jeffrey, and Michael Bostock. 2010. “Crowdsourcing Graphical Perception: Using Mechanical Turk to Assess Visualization Design.” In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, 203–12. CHI ’10. New York, NY, USA: Association for Computing Machinery. https://doi.org/10.1145/1753326.1753357.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Elements of Visualization</span>"
    ]
  },
  {
    "objectID": "Chapters/DataTree.html",
    "href": "Chapters/DataTree.html",
    "title": "2  Working with DataTree",
    "section": "",
    "text": "2.0.1 Get the dataset corresponding to a single group\nWe can access each group using a dictionary-like notation:\ndt[\"posterior\"]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DatasetView&gt; Size: 165kB\nDimensions:  (chain: 4, draw: 500, school: 8)\nCoordinates:\n  * chain    (chain) int64 32B 0 1 2 3\n  * draw     (draw) int64 4kB 0 1 2 3 4 5 6 7 ... 493 494 495 496 497 498 499\n  * school   (school) &lt;U16 512B 'Choate' 'Deerfield' ... 'Mt. Hermon'\nData variables:\n    mu       (chain, draw) float64 16kB ...\n    theta    (chain, draw, school) float64 128kB ...\n    tau      (chain, draw) float64 16kB ...\nAttributes: (6)xarray.DataTreeGroups: (0)Dimensions:chain: 4draw: 500school: 8Coordinates: (3)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 495 496 497 498 499array([  0,   1,   2, ..., 497, 498, 499])school(school)&lt;U16'Choate' ... 'Mt. Hermon'array(['Choate', 'Deerfield', 'Phillips Andover', 'Phillips Exeter',\n       'Hotchkiss', 'Lawrenceville', \"St. Paul's\", 'Mt. Hermon'], dtype='&lt;U16')Inherited coordinates: (0)Data variables: (3)mu(chain, draw)float64...[2000 values with dtype=float64]theta(chain, draw, school)float64...[16000 values with dtype=float64]tau(chain, draw)float64...[2000 values with dtype=float64]Attributes: (6)created_at :2022-10-13T14:37:37.315398arviz_version :0.13.0.dev0inference_library :pymcinference_library_version :4.2.2sampling_time :7.480114936828613tuning_steps :1000\nAlternatively, we can use the dot notation, as groups are attributes of the DataTree. For instance, to access the posterior group we can write:\ndt.posterior;\nThe dot notation works at the group level and for DataSets and DataArrays as long as there is no conflict with a method or attribute of these objects. If there is a conflict, you can always use the dictionary-like notation.\nNotice that we still get a DataTree, but with 0 groups. If you want the DataSet you can do.\ndt[\"posterior\"].to_dataset()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 165kB\nDimensions:  (chain: 4, draw: 500, school: 8)\nCoordinates:\n  * chain    (chain) int64 32B 0 1 2 3\n  * draw     (draw) int64 4kB 0 1 2 3 4 5 6 7 ... 493 494 495 496 497 498 499\n  * school   (school) &lt;U16 512B 'Choate' 'Deerfield' ... 'Mt. Hermon'\nData variables:\n    mu       (chain, draw) float64 16kB ...\n    theta    (chain, draw, school) float64 128kB ...\n    tau      (chain, draw) float64 16kB ...\nAttributes: (6)xarray.DatasetDimensions:chain: 4draw: 500school: 8Coordinates: (3)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 495 496 497 498 499array([  0,   1,   2, ..., 497, 498, 499])school(school)&lt;U16'Choate' ... 'Mt. Hermon'array(['Choate', 'Deerfield', 'Phillips Andover', 'Phillips Exeter',\n       'Hotchkiss', 'Lawrenceville', \"St. Paul's\", 'Mt. Hermon'], dtype='&lt;U16')Data variables: (3)mu(chain, draw)float64...[2000 values with dtype=float64]theta(chain, draw, school)float64...[16000 values with dtype=float64]tau(chain, draw)float64...[2000 values with dtype=float64]Indexes: (3)chainPandasIndexPandasIndex(Index([0, 1, 2, 3], dtype='int64', name='chain'))drawPandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       490, 491, 492, 493, 494, 495, 496, 497, 498, 499],\n      dtype='int64', name='draw', length=500))schoolPandasIndexPandasIndex(Index(['Choate', 'Deerfield', 'Phillips Andover', 'Phillips Exeter',\n       'Hotchkiss', 'Lawrenceville', 'St. Paul's', 'Mt. Hermon'],\n      dtype='object', name='school'))Attributes: (6)created_at :2022-10-13T14:37:37.315398arviz_version :0.13.0.dev0inference_library :pymcinference_library_version :4.2.2sampling_time :7.480114936828613tuning_steps :1000",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Working with DataTree</span>"
    ]
  },
  {
    "objectID": "Chapters/DataTree.html#ploting",
    "href": "Chapters/DataTree.html#ploting",
    "title": "2  Working with DataTree",
    "section": "2.1 Ploting",
    "text": "2.1 Ploting\nXarray has some plotting capabilities, for instance, we can do:\n\ndt.posterior[\"mu\"].plot.hist(figsize=(9, 3));\n\n\n\n\n\n\n\n\nBut in most scenarios calling a plotting function from ArviZ and passing the InfereceData as an argument will be a much better idea.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Working with DataTree</span>"
    ]
  },
  {
    "objectID": "Chapters/DataTree.html#add-a-new-variable",
    "href": "Chapters/DataTree.html#add-a-new-variable",
    "title": "2  Working with DataTree",
    "section": "2.2 Add a new variable",
    "text": "2.2 Add a new variable\nWe can add variables to existing groups. For instance, we may want to transform a parameter from the posterior. Like computing and adding the \\(\\log\\) of the parameter \\(\\tau\\) to the posterior group.\n\nposterior[\"log_tau\"] = np.log(posterior[\"tau\"])\nposterior\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 12kB\nDimensions:  (sample: 100, school: 8)\nCoordinates:\n  * school   (school) &lt;U16 512B 'Choate' 'Deerfield' ... 'Mt. Hermon'\n  * sample   (sample) object 800B MultiIndex\n  * chain    (sample) int64 800B 3 1 0 2 1 0 2 1 3 1 3 ... 1 3 0 3 2 3 0 1 0 2 1\n  * draw     (sample) int64 800B 80 443 428 346 215 341 ... 424 169 116 493 477\nData variables:\n    mu       (sample) float64 800B 5.949 2.821 8.765 4.16 ... 1.501 1.963 2.821\n    theta    (school, sample) float64 6kB 5.783 3.258 13.21 ... -5.54 3.351\n    tau      (sample) float64 800B 1.637 0.8965 2.171 ... 4.327 5.192 0.8965\n    log_tau  (sample) float64 800B 0.4928 -0.1093 0.7754 ... 1.465 1.647 -0.1093\nAttributes: (6)xarray.DatasetDimensions:sample: 100school: 8Coordinates: (4)school(school)&lt;U16'Choate' ... 'Mt. Hermon'array(['Choate', 'Deerfield', 'Phillips Andover', 'Phillips Exeter',\n       'Hotchkiss', 'Lawrenceville', \"St. Paul's\", 'Mt. Hermon'], dtype='&lt;U16')sample(sample)objectMultiIndexarray([(3, 80), (1, 443), (0, 428), (2, 346), (1, 215), (0, 341), (2, 24),\n       (1, 305), (3, 477), (1, 37), (3, 335), (1, 141), (2, 496), (2, 473),\n       (1, 349), (1, 3), (3, 197), (1, 322), (2, 73), (0, 100), (2, 220),\n       (1, 136), (2, 7), (3, 448), (3, 405), (2, 252), (0, 360), (2, 266),\n       (3, 125), (2, 169), (3, 372), (1, 181), (0, 290), (0, 349), (2, 427),\n       (0, 50), (3, 103), (3, 355), (1, 289), (3, 141), (0, 304), (0, 204),\n       (0, 340), (2, 97), (2, 284), (2, 276), (1, 252), (0, 190), (3, 450),\n       (1, 472), (0, 486), (2, 383), (2, 278), (1, 56), (3, 76), (2, 381),\n       (1, 381), (3, 254), (0, 495), (0, 350), (0, 337), (0, 67), (0, 363),\n       (3, 213), (3, 43), (3, 366), (2, 212), (3, 233), (3, 295), (2, 70),\n       (3, 147), (2, 289), (3, 492), (2, 359), (3, 347), (1, 400), (3, 44),\n       (2, 76), (0, 137), (0, 265), (3, 175), (0, 306), (2, 313), (3, 363),\n       (0, 87), (2, 6), (3, 332), (3, 198), (3, 465), (1, 86), (3, 171),\n       (0, 212), (3, 176), (2, 127), (3, 409), (0, 424), (1, 169), (0, 116),\n       (2, 493), (1, 477)], dtype=object)chain(sample)int643 1 0 2 1 0 2 1 ... 3 2 3 0 1 0 2 1array([3, 1, 0, 2, 1, 0, 2, 1, 3, 1, 3, 1, 2, 2, 1, 1, 3, 1, 2, 0, 2, 1, 2, 3,\n       3, 2, 0, 2, 3, 2, 3, 1, 0, 0, 2, 0, 3, 3, 1, 3, 0, 0, 0, 2, 2, 2, 1, 0,\n       3, 1, 0, 2, 2, 1, 3, 2, 1, 3, 0, 0, 0, 0, 0, 3, 3, 3, 2, 3, 3, 2, 3, 2,\n       3, 2, 3, 1, 3, 2, 0, 0, 3, 0, 2, 3, 0, 2, 3, 3, 3, 1, 3, 0, 3, 2, 3, 0,\n       1, 0, 2, 1])draw(sample)int6480 443 428 346 ... 169 116 493 477array([ 80, 443, 428, 346, 215, 341,  24, 305, 477,  37, 335, 141, 496, 473,\n       349,   3, 197, 322,  73, 100, 220, 136,   7, 448, 405, 252, 360, 266,\n       125, 169, 372, 181, 290, 349, 427,  50, 103, 355, 289, 141, 304, 204,\n       340,  97, 284, 276, 252, 190, 450, 472, 486, 383, 278,  56,  76, 381,\n       381, 254, 495, 350, 337,  67, 363, 213,  43, 366, 212, 233, 295,  70,\n       147, 289, 492, 359, 347, 400,  44,  76, 137, 265, 175, 306, 313, 363,\n        87,   6, 332, 198, 465,  86, 171, 212, 176, 127, 409, 424, 169, 116,\n       493, 477])Data variables: (4)mu(sample)float645.949 2.821 8.765 ... 1.963 2.821array([ 5.94936049,  2.82139573,  8.76533267,  4.16045136,  3.76987221,\n        3.11233101, 15.94353048,  9.61728443,  6.36172813, -0.81431913,\n        8.50295603,  9.85548018,  3.28989621,  6.15531179,  6.31222318,\n        6.32860189,  5.80188688,  5.68987353,  4.47022303, 11.69695356,\n       14.14504516,  2.50750304,  5.47418953,  6.45785806,  7.11453727,\n        8.52432129,  5.81253179,  2.94283265,  6.55184214,  8.47871082,\n        3.87915295, -1.10251994,  0.33876008,  4.9455064 ,  5.46463267,\n        5.96003438,  6.55184214, -0.31636493,  7.26841364,  6.26523551,\n        8.56808621,  5.52917054,  7.6916741 ,  5.20369319,  4.2885066 ,\n        3.44857834,  5.11340005,  6.95543974,  8.70773394,  2.82139573,\n        4.74332249,  5.5780453 ,  9.54604962,  1.99486785,  8.59263845,\n        3.24256039, -1.50870863, -1.12193332,  5.34165403, -3.46193612,\n        6.91303718,  3.34974272,  2.83746997,  9.31961653,  9.11086845,\n       -2.07268954,  0.64251625,  0.87262557,  6.13965598, -1.32255661,\n        5.51713885,  4.42377154, -1.07427123,  3.06679932,  2.57941332,\n        7.15761793,  9.11086845,  5.3733278 ,  5.36731924,  4.41724637,\n        4.53622774,  8.64494464,  8.72847262, 13.816329  ,  5.68025903,\n        4.42519597, -0.27180086,  5.80188688,  0.14245598,  2.39242767,\n       10.14760757,  6.23164697,  2.57718552,  2.29952034, -1.03020989,\n        0.7634314 , 10.91509296,  1.50071772,  1.96342185,  2.82139573])theta(school, sample)float645.783 3.258 13.21 ... -5.54 3.351array([[ 5.78332001e+00,  3.25808233e+00,  1.32139237e+01,\n         3.88647637e+00,  3.27531513e+00,  3.06489534e+00,\n         1.62319685e+01,  9.67286631e+00, -3.77563324e-01,\n         1.65678231e+00,  1.55032000e+01,  7.00472165e+00,\n         3.93528061e+00,  7.87525652e+00,  1.68769505e+01,\n         7.38045201e+00,  7.25006163e+00,  1.35503511e+01,\n         4.75398239e+00,  1.42338706e+01,  9.97797388e+00,\n         7.22610649e+00,  7.34034281e+00,  5.95451186e+00,\n         1.11538260e+01,  2.82216435e+01,  4.87593796e+00,\n         1.50467592e+01,  5.36521047e+00,  9.61476686e+00,\n         1.60094064e+01,  4.29664121e+00,  1.54374354e+00,\n        -9.92247511e+00,  9.79959946e+00,  1.37715380e+01,\n         5.36521047e+00,  8.98223080e+00,  9.75288135e+00,\n         5.82519719e+00,  8.47108056e+00,  1.05365446e+01,\n         3.51242913e+00,  9.31726415e+00,  6.58714002e+00,\n        -5.37572195e-01,  1.11704690e+01,  7.91077802e+00,\n         9.71868802e+00,  3.25808233e+00,  5.52203735e+00,\n         6.47199316e+00,  5.26285351e+00,  7.52593644e+00,\n         6.08689742e+00,  7.09929855e+00, -7.11695124e-01,\n         3.21324974e-01,  8.89077916e+00,  7.93778775e+00,\n...\n         8.64135992e+00, -1.45149265e+00,  4.21691607e+00,\n         5.26780466e+00, -1.20620822e+00,  7.79568661e+00,\n         1.02279786e+01,  3.35132225e+00,  3.82649315e+00,\n         5.71903515e+00,  1.19331417e+01,  2.98137620e+00,\n         8.86580029e+00,  4.61650021e+00, -3.26253213e+00,\n        -2.86060739e+00,  8.98514447e+00,  6.86662981e+00,\n         7.47430176e+00,  2.82966473e+00,  1.75683067e+01,\n         1.25736665e+01,  9.82982661e+00,  7.98384939e+00,\n         3.72872318e+00,  2.27260207e+00,  5.17551659e+00,\n         3.50553035e+00,  8.94545600e+00,  6.90899655e+00,\n         1.07055784e+01,  3.45131075e+00,  4.75685941e+00,\n         1.05857124e+01,  9.82982661e+00,  5.02954781e+00,\n         2.77374441e+00,  5.15937774e+00,  2.34452622e+00,\n         6.63358496e+00,  1.64939321e+01,  9.61976976e+00,\n         3.73566476e+00,  5.29939272e+00, -1.32845073e+00,\n         5.19428493e+00,  1.65098374e+00,  3.74297277e+00,\n         2.09029102e+00,  5.61562454e+00,  4.76084023e+00,\n         5.62488877e+00,  7.62386038e+00,  1.13856246e+00,\n         1.17969226e+01,  2.85866939e+00, -5.53955074e+00,\n         3.35132225e+00]])tau(sample)float641.637 0.8965 2.171 ... 5.192 0.8965array([ 1.63690948,  0.89648017,  2.17145492,  2.44003772,  6.4706307 ,\n        4.83927067,  5.14483804,  2.68377051,  6.34719621,  1.75520797,\n        7.55636936,  2.81122027,  2.55959157,  3.06376083, 11.96852286,\n        3.39182938,  1.63947794,  7.19673258,  3.52343724,  4.28912896,\n        3.40886567,  2.77572244,  7.842858  ,  2.57264714,  1.93799288,\n       14.30535665,  3.71375867, 17.08049567,  1.17639717,  1.37286522,\n        6.48754336,  6.58572909,  1.39584712, 16.70487579,  4.90218733,\n        4.05506327,  1.17639717,  5.55509696,  3.48861281,  0.92166181,\n        2.23034785,  7.51876593,  4.89777987,  7.87949747,  1.66320641,\n        6.39717291,  3.22451421,  2.71908424,  1.99161225,  0.89648017,\n        3.92732773,  2.08172367,  6.3095818 ,  3.77228077,  1.21468447,\n        2.1611091 ,  2.84612798,  1.25274357,  7.56497739,  6.35226645,\n        1.47248205,  5.00186415,  7.31810286,  3.29329991,  1.67610879,\n        4.6224406 ,  4.76789088,  3.38315881,  1.61688501,  3.83624559,\n        1.66299163,  1.50411265,  6.15519826,  1.05397997,  4.9768676 ,\n        6.89201517,  1.67610879,  2.31645586,  7.70962029,  1.56842995,\n        4.84972805,  1.38231078,  4.92067419,  5.96439896,  3.68292521,\n        9.09769868,  5.84738332,  1.63947794,  2.83651563,  4.3038062 ,\n        6.00521795,  1.41023636,  4.3395538 ,  5.53171606,  6.23327191,\n        6.63950394,  8.09275911,  4.32698195,  5.19168836,  0.89648017])log_tau(sample)float640.4928 -0.1093 ... 1.647 -0.1093array([ 0.49281   , -0.10927911,  0.77539741,  0.8920135 ,  1.86727358,\n        1.57676402,  1.63799389,  0.98722271,  1.84801317,  0.56258735,\n        2.02239083,  1.03361865,  0.9398477 ,  1.11964319,  2.48228011,\n        1.22136942,  0.49437786,  1.97362711,  1.259437  ,  1.45608367,\n        1.22637959,  1.02091105,  2.05960331,  0.94493538,  0.66165284,\n        2.66063406,  1.31204448,  2.83793721,  0.16245652,  0.31689996,\n        1.86988393,  1.88490505,  0.33350148,  2.81570064,  1.5896815 ,\n        1.39996629,  0.16245652,  1.71471588,  1.24950418, -0.08157692,\n        0.80215756,  2.01740202,  1.58878201,  2.06426413,  0.50874731,\n        1.85585616,  1.17078231,  1.00029515,  0.68894449, -0.10927911,\n        1.36795923,  0.73319624,  1.8420694 ,  1.3276798 ,  0.19448435,\n        0.77062156,  1.04595947,  0.22533601,  2.02352936,  1.84881167,\n        0.38694945,  1.60981067,  1.99035112,  1.19189007,  0.51647491,\n        1.53092283,  1.56190404,  1.21880983,  0.48050146,  1.34449418,\n        0.50861817,  0.40820312,  1.81729697,  0.05257344,  1.6048007 ,\n        1.93036352,  0.51647491,  0.84003837,  2.04246894,  0.45007509,\n        1.57892263,  0.32375658,  1.59344555,  1.78580829,  1.30370733,\n        2.20802149,  1.76599427,  0.49437786,  1.04257641,  1.45949979,\n        1.79262875,  0.34375732,  1.46777153,  1.71049809,  1.82990138,\n        1.89303725,  2.09096972,  1.46487029,  1.64705895, -0.10927911])Indexes: (2)schoolPandasIndexPandasIndex(Index(['Choate', 'Deerfield', 'Phillips Andover', 'Phillips Exeter',\n       'Hotchkiss', 'Lawrenceville', 'St. Paul's', 'Mt. Hermon'],\n      dtype='object', name='school'))samplechaindrawPandasMultiIndexPandasIndex(MultiIndex([(3,  80),\n            (1, 443),\n            (0, 428),\n            (2, 346),\n            (1, 215),\n            (0, 341),\n            (2,  24),\n            (1, 305),\n            (3, 477),\n            (1,  37),\n            (3, 335),\n            (1, 141),\n            (2, 496),\n            (2, 473),\n            (1, 349),\n            (1,   3),\n            (3, 197),\n            (1, 322),\n            (2,  73),\n            (0, 100),\n            (2, 220),\n            (1, 136),\n            (2,   7),\n            (3, 448),\n            (3, 405),\n            (2, 252),\n            (0, 360),\n            (2, 266),\n            (3, 125),\n            (2, 169),\n            (3, 372),\n            (1, 181),\n            (0, 290),\n            (0, 349),\n            (2, 427),\n            (0,  50),\n            (3, 103),\n            (3, 355),\n            (1, 289),\n            (3, 141),\n            (0, 304),\n            (0, 204),\n            (0, 340),\n            (2,  97),\n            (2, 284),\n            (2, 276),\n            (1, 252),\n            (0, 190),\n            (3, 450),\n            (1, 472),\n            (0, 486),\n            (2, 383),\n            (2, 278),\n            (1,  56),\n            (3,  76),\n            (2, 381),\n            (1, 381),\n            (3, 254),\n            (0, 495),\n            (0, 350),\n            (0, 337),\n            (0,  67),\n            (0, 363),\n            (3, 213),\n            (3,  43),\n            (3, 366),\n            (2, 212),\n            (3, 233),\n            (3, 295),\n            (2,  70),\n            (3, 147),\n            (2, 289),\n            (3, 492),\n            (2, 359),\n            (3, 347),\n            (1, 400),\n            (3,  44),\n            (2,  76),\n            (0, 137),\n            (0, 265),\n            (3, 175),\n            (0, 306),\n            (2, 313),\n            (3, 363),\n            (0,  87),\n            (2,   6),\n            (3, 332),\n            (3, 198),\n            (3, 465),\n            (1,  86),\n            (3, 171),\n            (0, 212),\n            (3, 176),\n            (2, 127),\n            (3, 409),\n            (0, 424),\n            (1, 169),\n            (0, 116),\n            (2, 493),\n            (1, 477)],\n           name='sample'))Attributes: (6)created_at :2022-10-13T14:37:37.315398arviz_version :0.13.0.dev0inference_library :pymcinference_library_version :4.2.2sampling_time :7.480114936828613tuning_steps :1000",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Working with DataTree</span>"
    ]
  },
  {
    "objectID": "Chapters/DataTree.html#advance-operations-with-datatrees",
    "href": "Chapters/DataTree.html#advance-operations-with-datatrees",
    "title": "2  Working with DataTree",
    "section": "2.3 Advance operations with DataTrees",
    "text": "2.3 Advance operations with DataTrees\nNow we delve into more advanced operations with DataTree. While these operations are not essential to use ArviZ, they can be useful in some cases. Exploring these advanced functionalities will help you become more familiar with DataTree and provide additional insights that may enhance your overall experience with ArviZ.\n\n2.3.1 Compute and store posterior pushforward quantities\nWe use “posterior push-forward quantities” to refer to quantities that are not variables in the posterior but deterministic computations using posterior variables.\nYou can use xarray for these push-forward operations and store them as a new variable in the posterior group. You’ll then be able to plot them with ArviZ functions, calculate stats and diagnostics on them (like mcse), or save and share the DataTree object with the push forward quantities included.\nThe first thing we are going to do is to store the posterior group in a variable called post to make the code more readable. And to compute the log of \\(\\tau\\).\n\npost = dt.posterior\npost[\"log_tau\"] = np.log(post[\"tau\"])\n\nCompute the rolling mean of \\(\\log(\\tau)\\) with xarray.DataArray.rolling, storing the result in the posterior:\n\npost[\"mlogtau\"] = post[\"log_tau\"].rolling({\"draw\": 50}).mean()\n\nUsing xarray for push-forward calculations has all the advantages of working with xarray. It also inherits the disadvantages of working with xarray, but we believe those to be outweighed by the advantages, and we have already shown how to extract the data as NumPy arrays.\nSome examples of these advantages are specifying operations with named dimensions instead of positional ones (as seen in some previous sections), automatic alignment and broadcasting of arrays (as we’ll see now), or integration with Dask (as shown in the dask_for_arviz guide).\nIn this cell, you will compute pairwise differences between schools on their mean effects (variable theta). To do so, subtract the variable theta after renaming the school dimension to the original variable. Xarray then aligns and broadcasts the two variables because they have different dimensions, and the result is a 4D variable with all the pointwise differences.\nEventually, store the result in the theta_school_diff variable. Notice that the theta_shool_diff variable in the posterior has kept the named dimensions and coordinates:\n\npost[\"theta_school_diff\"] = post.theta - post.theta.rename(school=\"school_bis\")\npost\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DatasetView&gt; Size: 1MB\nDimensions:            (chain: 4, draw: 500, school: 8, school_bis: 8)\nCoordinates:\n  * chain              (chain) int64 32B 0 1 2 3\n  * draw               (draw) int64 4kB 0 1 2 3 4 5 ... 494 495 496 497 498 499\n  * school             (school) &lt;U16 512B 'Choate' 'Deerfield' ... 'Mt. Hermon'\n  * school_bis         (school_bis) &lt;U16 512B 'Choate' ... 'Mt. Hermon'\nData variables:\n    mu                 (chain, draw) float64 16kB 7.872 3.385 ... 3.486 3.404\n    theta              (chain, draw, school) float64 128kB 12.32 9.905 ... 1.295\n    tau                (chain, draw) float64 16kB 4.726 3.909 ... 2.932 4.461\n    log_tau            (chain, draw) float64 16kB 1.553 1.363 ... 1.076 1.495\n    mlogtau            (chain, draw) float64 16kB nan nan nan ... 1.496 1.511\n    theta_school_diff  (chain, draw, school, school_bis) float64 1MB 0.0 ... 0.0\nAttributes: (6)xarray.DataTreeGroups: (0)Dimensions:chain: 4draw: 500school: 8school_bis: 8Coordinates: (4)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 495 496 497 498 499array([  0,   1,   2, ..., 497, 498, 499])school(school)&lt;U16'Choate' ... 'Mt. Hermon'array(['Choate', 'Deerfield', 'Phillips Andover', 'Phillips Exeter',\n       'Hotchkiss', 'Lawrenceville', \"St. Paul's\", 'Mt. Hermon'], dtype='&lt;U16')school_bis(school_bis)&lt;U16'Choate' ... 'Mt. Hermon'array(['Choate', 'Deerfield', 'Phillips Andover', 'Phillips Exeter',\n       'Hotchkiss', 'Lawrenceville', \"St. Paul's\", 'Mt. Hermon'], dtype='&lt;U16')Inherited coordinates: (0)Data variables: (6)mu(chain, draw)float647.872 3.385 9.1 ... 3.486 3.404array([[7.871796, 3.384554, 9.100476, ..., 3.656804, 5.427279, 2.735883],\n       [4.315817, 4.597701, 6.213762, ..., 4.841024, 5.946105, 4.666438],\n       [4.527603, 5.862628, 5.910703, ..., 2.871067, 4.095536, 1.775718],\n       [7.179504, 6.539699, 7.48362 , ..., 1.766733, 3.486112, 3.404464]])theta(chain, draw, school)float6412.32 9.905 14.95 ... 6.762 1.295array([[[12.320686,  9.905367, ..., 13.198059, 15.061366],\n        [11.285623,  9.129324, ..., 10.055223,  6.176724],\n        ...,\n        [10.402501,  6.907407, ...,  5.391061,  6.381239],\n        [ 6.661308,  7.413767, ...,  7.56657 ,  9.987618]],\n\n       [[ 5.596639,  6.959605, ...,  7.148854,  3.7909  ],\n        [ 4.96541 ,  1.779358, ...,  3.289161,  5.937311],\n        ...,\n        [ 7.030604,  6.214465, ...,  4.778138,  4.357112],\n        [ 4.884931,  3.952247, ...,  5.687935,  6.777772]],\n\n       [[11.81417 , -0.040477, ...,  0.318087,  0.661304],\n        [ 4.743465, 10.175684, ..., 11.271711,  7.12114 ],\n        ...,\n        [ 5.677651,  1.679108, ...,  1.280615,  7.627658],\n        [ 1.625447,  2.503281, ...,  2.362756, -2.967994]],\n\n       [[ 8.344508,  5.390855, ..., 12.46814 , 12.607797],\n        [ 8.93115 ,  6.852969, ...,  7.013971,  5.136297],\n        ...,\n        [ 4.182751,  7.554251, ...,  1.096098,  8.452282],\n        [ 0.192956,  6.498428, ...,  6.762455,  1.295051]]])tau(chain, draw)float644.726 3.909 4.844 ... 2.932 4.461array([[4.72574 , 3.908994, 4.844025, ..., 1.893838, 5.920062, 4.325896],\n       [1.97083 , 2.049029, 2.123765, ..., 2.17459 , 1.327551, 1.211995],\n       [3.501277, 2.893243, 4.273286, ..., 4.08978 , 2.72017 , 1.917011],\n       [6.07326 , 3.771867, 3.170537, ..., 2.740607, 2.932379, 4.461246]])log_tau(chain, draw)float641.553 1.363 1.578 ... 1.076 1.495array([[1.55302418, 1.36327995, 1.57774603, ..., 0.6386056 , 1.778347  ,\n        1.46461921],\n       [0.67845483, 0.71736608, 0.75319044, ..., 0.77684015, 0.28333575,\n        0.19226749],\n       [1.25312773, 1.06237808, 1.45238307, ..., 1.40849125, 1.00069436,\n        0.65076731],\n       [1.8038955 , 1.32757011, 1.15390112, ..., 1.00817931, 1.07581413,\n        1.49542809]])mlogtau(chain, draw)float64nan nan nan ... 1.494 1.496 1.511array([[       nan,        nan,        nan, ..., 1.16476321, 1.19559572,\n        1.22597193],\n       [       nan,        nan,        nan, ..., 0.12348971, 0.131342  ,\n        0.13737294],\n       [       nan,        nan,        nan, ..., 1.22653292, 1.21500516,\n        1.20868681],\n       [       nan,        nan,        nan, ..., 1.4938526 , 1.49647017,\n        1.5112594 ]])theta_school_diff(chain, draw, school, school_bis)float640.0 2.415 -2.631 ... -5.467 0.0array([[[[ 0.00000000e+00,  2.41531869e+00, -2.63092992e+00, ...,\n          -4.58110972e+00, -8.77373755e-01, -2.74068026e+00],\n         [-2.41531869e+00,  0.00000000e+00, -5.04624860e+00, ...,\n          -6.99642840e+00, -3.29269244e+00, -5.15599894e+00],\n         [ 2.63092992e+00,  5.04624860e+00,  0.00000000e+00, ...,\n          -1.95017980e+00,  1.75355616e+00, -1.09750340e-01],\n         ...,\n         [ 4.58110972e+00,  6.99642840e+00,  1.95017980e+00, ...,\n           0.00000000e+00,  3.70373596e+00,  1.84042946e+00],\n         [ 8.77373755e-01,  3.29269244e+00, -1.75355616e+00, ...,\n          -3.70373596e+00,  0.00000000e+00, -1.86330650e+00],\n         [ 2.74068026e+00,  5.15599894e+00,  1.09750340e-01, ...,\n          -1.84042946e+00,  1.86330650e+00,  0.00000000e+00]],\n\n        [[ 0.00000000e+00,  2.15629954e+00,  8.14635996e+00, ...,\n           8.89253514e+00,  1.23040040e+00,  5.10889901e+00],\n         [-2.15629954e+00,  0.00000000e+00,  5.99006042e+00, ...,\n           6.73623560e+00, -9.25899137e-01,  2.95259947e+00],\n         [-8.14635996e+00, -5.99006042e+00,  0.00000000e+00, ...,\n           7.46175179e-01, -6.91595956e+00, -3.03746095e+00],\n...\n         [-2.65379240e+00, -6.02529245e+00, -2.92707633e+00, ...,\n           0.00000000e+00,  4.32859842e-01, -6.92332351e+00],\n         [-3.08665224e+00, -6.45815229e+00, -3.35993618e+00, ...,\n          -4.32859842e-01,  0.00000000e+00, -7.35618335e+00],\n         [ 4.26953111e+00,  8.98031057e-01,  3.99624717e+00, ...,\n           6.92332351e+00,  7.35618335e+00,  0.00000000e+00]],\n\n        [[ 0.00000000e+00, -6.30547202e+00,  1.08737981e+00, ...,\n          -7.74350435e+00, -6.56949881e+00, -1.10209482e+00],\n         [ 6.30547202e+00,  0.00000000e+00,  7.39285182e+00, ...,\n          -1.43803234e+00, -2.64026792e-01,  5.20337720e+00],\n         [-1.08737981e+00, -7.39285182e+00,  0.00000000e+00, ...,\n          -8.83088416e+00, -7.65687862e+00, -2.18947462e+00],\n         ...,\n         [ 7.74350435e+00,  1.43803234e+00,  8.83088416e+00, ...,\n           0.00000000e+00,  1.17400554e+00,  6.64140953e+00],\n         [ 6.56949881e+00,  2.64026792e-01,  7.65687862e+00, ...,\n          -1.17400554e+00,  0.00000000e+00,  5.46740399e+00],\n         [ 1.10209482e+00, -5.20337720e+00,  2.18947462e+00, ...,\n          -6.64140953e+00, -5.46740399e+00,  0.00000000e+00]]]])Attributes: (6)created_at :2022-10-13T14:37:37.315398arviz_version :0.13.0.dev0inference_library :pymcinference_library_version :4.2.2sampling_time :7.480114936828613tuning_steps :1000\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis same operation using NumPy would require manual alignment of the two arrays to make sure they broadcast correctly. The code could be something like:\ntheta_school_diff = theta[:, :, :, None] - theta[:, :, None, :]\n\n\n\n\n2.3.2 Advanced subsetting\nTo select the value corresponding to the difference between the Choate and Deerfield schools do:\n\npost[\"theta_school_diff\"].sel(school=\"Choate\", school_bis=\"Deerfield\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'theta_school_diff' (chain: 4, draw: 500)&gt; Size: 16kB\n2.415 2.156 -0.04943 1.228 3.384 9.662 ... -1.656 -0.4021 1.524 -3.372 -6.305\nCoordinates:\n  * chain       (chain) int64 32B 0 1 2 3\n  * draw        (draw) int64 4kB 0 1 2 3 4 5 6 7 ... 493 494 495 496 497 498 499\n    school      &lt;U16 64B 'Choate'\n    school_bis  &lt;U16 64B 'Deerfield'xarray.DataArray'theta_school_diff'chain: 4draw: 5002.415 2.156 -0.04943 1.228 3.384 ... -0.4021 1.524 -3.372 -6.305array([[ 2.41531869,  2.15629954, -0.04942665, ..., -1.568983  ,\n         3.49509445, -0.75245938],\n       [-1.36296658,  3.18605183, -3.57582959, ..., -0.03288082,\n         0.81613882,  0.93268411],\n       [11.85464717, -5.43221857,  0.85662645, ..., -1.62004592,\n         3.99854315, -0.87783417],\n       [ 2.95365309,  2.07818191,  4.51853032, ...,  1.5236138 ,\n        -3.37150005, -6.30547202]])Coordinates: (4)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 495 496 497 498 499array([  0,   1,   2, ..., 497, 498, 499])school()&lt;U16'Choate'array('Choate', dtype='&lt;U16')school_bis()&lt;U16'Deerfield'array('Deerfield', dtype='&lt;U16')Indexes: (2)chainPandasIndexPandasIndex(Index([0, 1, 2, 3], dtype='int64', name='chain'))drawPandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       490, 491, 492, 493, 494, 495, 496, 497, 498, 499],\n      dtype='int64', name='draw', length=500))Attributes: (0)\n\n\nFor more advanced subsetting (the equivalent to what is sometimes called “fancy indexing” in NumPy) you need to provide the indices as DataArray objects:\n\nschool_idx = xr.DataArray([\"Choate\", \"Hotchkiss\", \"Mt. Hermon\"], dims=[\"pairwise_school_diff\"])\nschool_bis_idx = xr.DataArray(\n    [\"Deerfield\", \"Choate\", \"Lawrenceville\"], dims=[\"pairwise_school_diff\"]\n)\npost[\"theta_school_diff\"].sel(school=school_idx, school_bis=school_bis_idx)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'theta_school_diff' (chain: 4, draw: 500,\n                                       pairwise_school_diff: 3)&gt; Size: 48kB\n2.415 -6.741 -1.84 2.156 -3.474 3.784 ... -2.619 6.923 -6.305 1.667 -6.641\nCoordinates:\n  * chain       (chain) int64 32B 0 1 2 3\n  * draw        (draw) int64 4kB 0 1 2 3 4 5 6 7 ... 493 494 495 496 497 498 499\n    school      (pairwise_school_diff) &lt;U16 192B 'Choate' ... 'Mt. Hermon'\n    school_bis  (pairwise_school_diff) &lt;U16 192B 'Deerfield' ... 'Lawrenceville'\nDimensions without coordinates: pairwise_school_diffxarray.DataArray'theta_school_diff'chain: 4draw: 500pairwise_school_diff: 32.415 -6.741 -1.84 2.156 -3.474 ... -2.619 6.923 -6.305 1.667 -6.641array([[[  2.41531869,  -6.74108399,  -1.84042946],\n        [  2.15629954,  -3.47410767,   3.78363613],\n        [ -0.04942665,   4.28447846,   0.62431982],\n        ...,\n        [ -1.568983  ,   5.53829038,  -3.9072901 ],\n        [  3.49509445, -12.62680339,   9.21627977],\n        [ -0.75245938,  -7.16363884,  14.24249242]],\n\n       [[ -1.36296658,  -2.09672634,  -1.78220365],\n        [  3.18605183,   1.39310745,   1.30385219],\n        [ -3.57582959,  -3.73894295,   1.50957259],\n        ...,\n        [ -0.03288082,   0.22920766,   4.259231  ],\n        [  0.81613882,  -1.39409761,  -2.83464009],\n        [  0.93268411,   0.99243438,   1.52660383]],\n\n       [[ 11.85464717,  -4.83033352,  -2.06409623],\n        [ -5.43221857,  -2.45302911,  -0.29934021],\n        [  0.85662645,  -6.70463782,  -4.8911762 ],\n        ...,\n        [ -1.62004592,  -0.95078454,  -1.95522498],\n        [  3.99854315,  -0.85757228,   6.01710874],\n        [ -0.87783417,  -0.5224125 ,  -4.44552037]],\n\n       [[  2.95365309, -17.43005136,   4.73220433],\n        [  2.07818191,   3.61925306,   5.02518058],\n        [  4.51853032, -10.373311  ,  -2.59184142],\n        ...,\n        [  1.5236138 ,  -0.88482747,  -7.33031773],\n        [ -3.37150005,  -2.61944346,   6.92332351],\n        [ -6.30547202,   1.66679103,  -6.64140953]]])Coordinates: (4)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 495 496 497 498 499array([  0,   1,   2, ..., 497, 498, 499])school(pairwise_school_diff)&lt;U16'Choate' 'Hotchkiss' 'Mt. Hermon'array(['Choate', 'Hotchkiss', 'Mt. Hermon'], dtype='&lt;U16')school_bis(pairwise_school_diff)&lt;U16'Deerfield' ... 'Lawrenceville'array(['Deerfield', 'Choate', 'Lawrenceville'], dtype='&lt;U16')Indexes: (2)chainPandasIndexPandasIndex(Index([0, 1, 2, 3], dtype='int64', name='chain'))drawPandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       490, 491, 492, 493, 494, 495, 496, 497, 498, 499],\n      dtype='int64', name='draw', length=500))Attributes: (0)\n\n\nUsing lists or NumPy arrays instead of DataArrays does column/row-based indexing. As you can see, the result has 9 values of theta_shool_diff instead of the 3 pairs of difference we selected in the previous cell:\n\npost[\"theta_school_diff\"].sel(\n    school=[\"Choate\", \"Hotchkiss\", \"Mt. Hermon\"],\n    school_bis=[\"Deerfield\", \"Choate\", \"Lawrenceville\"],\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'theta_school_diff' (chain: 4, draw: 500, school: 3,\n                                       school_bis: 3)&gt; Size: 144kB\n2.415 0.0 -4.581 -4.326 -6.741 -11.32 ... 1.667 -6.077 -5.203 1.102 -6.641\nCoordinates:\n  * chain       (chain) int64 32B 0 1 2 3\n  * draw        (draw) int64 4kB 0 1 2 3 4 5 6 7 ... 493 494 495 496 497 498 499\n  * school      (school) &lt;U16 192B 'Choate' 'Hotchkiss' 'Mt. Hermon'\n  * school_bis  (school_bis) &lt;U16 192B 'Deerfield' 'Choate' 'Lawrenceville'xarray.DataArray'theta_school_diff'chain: 4draw: 500school: 3school_bis: 32.415 0.0 -4.581 -4.326 -6.741 ... 1.667 -6.077 -5.203 1.102 -6.641array([[[[  2.41531869,   0.        ,  -4.58110972],\n         [ -4.3257653 ,  -6.74108399, -11.3221937 ],\n         [  5.15599894,   2.74068026,  -1.84042946]],\n\n        [[  2.15629954,   0.        ,   8.89253514],\n         [ -1.31780813,  -3.47410767,   5.41842747],\n         [ -2.95259947,  -5.10889901,   3.78363613]],\n\n        [[ -0.04942665,   0.        ,  -2.43482132],\n         [  4.2350518 ,   4.28447846,   1.84965714],\n         [  3.00971448,   3.05914114,   0.62431982]],\n\n        ...,\n\n        [[ -1.568983  ,   0.        ,  -7.17971855],\n         [  3.96930738,   5.53829038,  -1.64142817],\n         [  1.70344545,   3.27242845,  -3.9072901 ]],\n\n        [[  3.49509445,   0.        ,  13.23754201],\n         [ -9.13170894, -12.62680339,   0.61073863],\n...\n         [  5.69743498,   3.61925306,  12.43928685],\n         [ -1.71667129,  -3.7948532 ,   5.02518058]],\n\n        [[  4.51853032,   0.        ,  -1.82804532],\n         [ -5.85478068, -10.373311  , -12.20135632],\n         [  3.75473422,  -0.7637961 ,  -2.59184142]],\n\n        ...,\n\n        [[  1.5236138 ,   0.        ,  -1.17473412],\n         [  0.63878633,  -0.88482747,  -2.05956159],\n         [ -4.63196981,  -6.15558361,  -7.33031773]],\n\n        [[ -3.37150005,   0.        ,   2.6537924 ],\n         [ -5.99094351,  -2.61944346,   0.03434894],\n         [  0.89803106,   4.26953111,   6.92332351]],\n\n        [[ -6.30547202,   0.        ,  -7.74350435],\n         [ -4.63868099,   1.66679103,  -6.07671332],\n         [ -5.2033772 ,   1.10209482,  -6.64140953]]]])Coordinates: (4)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 495 496 497 498 499array([  0,   1,   2, ..., 497, 498, 499])school(school)&lt;U16'Choate' 'Hotchkiss' 'Mt. Hermon'array(['Choate', 'Hotchkiss', 'Mt. Hermon'], dtype='&lt;U16')school_bis(school_bis)&lt;U16'Deerfield' ... 'Lawrenceville'array(['Deerfield', 'Choate', 'Lawrenceville'], dtype='&lt;U16')Indexes: (4)chainPandasIndexPandasIndex(Index([0, 1, 2, 3], dtype='int64', name='chain'))drawPandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       490, 491, 492, 493, 494, 495, 496, 497, 498, 499],\n      dtype='int64', name='draw', length=500))schoolPandasIndexPandasIndex(Index(['Choate', 'Hotchkiss', 'Mt. Hermon'], dtype='object', name='school'))school_bisPandasIndexPandasIndex(Index(['Deerfield', 'Choate', 'Lawrenceville'], dtype='object', name='school_bis'))Attributes: (0)\n\n\n\n\n2.3.3 Add new chains using concat\nAfter checking the mcse and realizing you need more samples, you rerun the model with two chains and obtain an dt_rerun object.\n\ndt_rerun = (\n    dt.posterior.sel(chain=[0, 1])\n    .copy()\n    .to_dataset()\n    .assign_coords(coords={\"chain\": [4, 5]})\n)\n\nYou can combine the two into a single DataTree object using the concat function from ArviZ:\n\ndt_complete = xr.concat([dt.posterior.to_dataset(), dt_rerun], dim=\"chain\")\ndt_complete.dims\n\nFrozenMappingWarningOnValuesAccess({'chain': 6, 'draw': 500, 'school': 8, 'school_bis': 8})\n\n\n\n\n2.3.4 Add groups to DataTrees\nThis will be simplified in the future, but for now, you can add groups to a DataTree by converting the DataTree to a dictionary, adding the new group, and then converting the dictionary back to a DataTree.\n\nrng = np.random.default_rng(3)\nds = azb.dict_to_dataset(\n    {\"obs\": rng.normal(size=(4, 500, 2))},\n    dims={\"obs\": [\"new_school\"]},\n    coords={\"new_school\": [\"Essex College\", \"Moordale\"]},\n)\ndicto = {k:v for k,v in dt.items()}\ndicto[\"predictions\"] = ds\n\nnew_dt = xr.DataTree.from_dict(dicto)\nnew_dt\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DatasetView&gt; Size: 0B\nDimensions:  ()\nData variables:\n    *empty*xarray.DataTreeGroups: (9)(6/9)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DatasetView&gt; Size: 1MB\nDimensions:            (chain: 4, draw: 500, school: 8, school_bis: 8)\nCoordinates:\n  * chain              (chain) int64 32B 0 1 2 3\n  * draw               (draw) int64 4kB 0 1 2 3 4 5 ... 494 495 496 497 498 499\n  * school             (school) &lt;U16 512B 'Choate' 'Deerfield' ... 'Mt. Hermon'\n  * school_bis         (school_bis) &lt;U16 512B 'Choate' ... 'Mt. Hermon'\nData variables:\n    mu                 (chain, draw) float64 16kB 7.872 3.385 ... 3.486 3.404\n    theta              (chain, draw, school) float64 128kB 12.32 9.905 ... 1.295\n    tau                (chain, draw) float64 16kB 4.726 3.909 ... 2.932 4.461\n    log_tau            (chain, draw) float64 16kB 1.553 1.363 ... 1.076 1.495\n    mlogtau            (chain, draw) float64 16kB nan nan nan ... 1.496 1.511\n    theta_school_diff  (chain, draw, school, school_bis) float64 1MB 0.0 ... 0.0\nAttributes: (6)posteriorGroups: (0)Dimensions:chain: 4draw: 500school: 8school_bis: 8Coordinates: (4)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 495 496 497 498 499array([  0,   1,   2, ..., 497, 498, 499])school(school)&lt;U16'Choate' ... 'Mt. Hermon'array(['Choate', 'Deerfield', 'Phillips Andover', 'Phillips Exeter',\n       'Hotchkiss', 'Lawrenceville', \"St. Paul's\", 'Mt. Hermon'], dtype='&lt;U16')school_bis(school_bis)&lt;U16'Choate' ... 'Mt. Hermon'array(['Choate', 'Deerfield', 'Phillips Andover', 'Phillips Exeter',\n       'Hotchkiss', 'Lawrenceville', \"St. Paul's\", 'Mt. Hermon'], dtype='&lt;U16')Data variables: (6)mu(chain, draw)float647.872 3.385 9.1 ... 3.486 3.404array([[7.871796, 3.384554, 9.100476, ..., 3.656804, 5.427279, 2.735883],\n       [4.315817, 4.597701, 6.213762, ..., 4.841024, 5.946105, 4.666438],\n       [4.527603, 5.862628, 5.910703, ..., 2.871067, 4.095536, 1.775718],\n       [7.179504, 6.539699, 7.48362 , ..., 1.766733, 3.486112, 3.404464]])theta(chain, draw, school)float6412.32 9.905 14.95 ... 6.762 1.295array([[[12.320686,  9.905367, ..., 13.198059, 15.061366],\n        [11.285623,  9.129324, ..., 10.055223,  6.176724],\n        ...,\n        [10.402501,  6.907407, ...,  5.391061,  6.381239],\n        [ 6.661308,  7.413767, ...,  7.56657 ,  9.987618]],\n\n       [[ 5.596639,  6.959605, ...,  7.148854,  3.7909  ],\n        [ 4.96541 ,  1.779358, ...,  3.289161,  5.937311],\n        ...,\n        [ 7.030604,  6.214465, ...,  4.778138,  4.357112],\n        [ 4.884931,  3.952247, ...,  5.687935,  6.777772]],\n\n       [[11.81417 , -0.040477, ...,  0.318087,  0.661304],\n        [ 4.743465, 10.175684, ..., 11.271711,  7.12114 ],\n        ...,\n        [ 5.677651,  1.679108, ...,  1.280615,  7.627658],\n        [ 1.625447,  2.503281, ...,  2.362756, -2.967994]],\n\n       [[ 8.344508,  5.390855, ..., 12.46814 , 12.607797],\n        [ 8.93115 ,  6.852969, ...,  7.013971,  5.136297],\n        ...,\n        [ 4.182751,  7.554251, ...,  1.096098,  8.452282],\n        [ 0.192956,  6.498428, ...,  6.762455,  1.295051]]])tau(chain, draw)float644.726 3.909 4.844 ... 2.932 4.461array([[4.72574 , 3.908994, 4.844025, ..., 1.893838, 5.920062, 4.325896],\n       [1.97083 , 2.049029, 2.123765, ..., 2.17459 , 1.327551, 1.211995],\n       [3.501277, 2.893243, 4.273286, ..., 4.08978 , 2.72017 , 1.917011],\n       [6.07326 , 3.771867, 3.170537, ..., 2.740607, 2.932379, 4.461246]])log_tau(chain, draw)float641.553 1.363 1.578 ... 1.076 1.495array([[1.55302418, 1.36327995, 1.57774603, ..., 0.6386056 , 1.778347  ,\n        1.46461921],\n       [0.67845483, 0.71736608, 0.75319044, ..., 0.77684015, 0.28333575,\n        0.19226749],\n       [1.25312773, 1.06237808, 1.45238307, ..., 1.40849125, 1.00069436,\n        0.65076731],\n       [1.8038955 , 1.32757011, 1.15390112, ..., 1.00817931, 1.07581413,\n        1.49542809]])mlogtau(chain, draw)float64nan nan nan ... 1.494 1.496 1.511array([[       nan,        nan,        nan, ..., 1.16476321, 1.19559572,\n        1.22597193],\n       [       nan,        nan,        nan, ..., 0.12348971, 0.131342  ,\n        0.13737294],\n       [       nan,        nan,        nan, ..., 1.22653292, 1.21500516,\n        1.20868681],\n       [       nan,        nan,        nan, ..., 1.4938526 , 1.49647017,\n        1.5112594 ]])theta_school_diff(chain, draw, school, school_bis)float640.0 2.415 -2.631 ... -5.467 0.0array([[[[ 0.00000000e+00,  2.41531869e+00, -2.63092992e+00, ...,\n          -4.58110972e+00, -8.77373755e-01, -2.74068026e+00],\n         [-2.41531869e+00,  0.00000000e+00, -5.04624860e+00, ...,\n          -6.99642840e+00, -3.29269244e+00, -5.15599894e+00],\n         [ 2.63092992e+00,  5.04624860e+00,  0.00000000e+00, ...,\n          -1.95017980e+00,  1.75355616e+00, -1.09750340e-01],\n         ...,\n         [ 4.58110972e+00,  6.99642840e+00,  1.95017980e+00, ...,\n           0.00000000e+00,  3.70373596e+00,  1.84042946e+00],\n         [ 8.77373755e-01,  3.29269244e+00, -1.75355616e+00, ...,\n          -3.70373596e+00,  0.00000000e+00, -1.86330650e+00],\n         [ 2.74068026e+00,  5.15599894e+00,  1.09750340e-01, ...,\n          -1.84042946e+00,  1.86330650e+00,  0.00000000e+00]],\n\n        [[ 0.00000000e+00,  2.15629954e+00,  8.14635996e+00, ...,\n           8.89253514e+00,  1.23040040e+00,  5.10889901e+00],\n         [-2.15629954e+00,  0.00000000e+00,  5.99006042e+00, ...,\n           6.73623560e+00, -9.25899137e-01,  2.95259947e+00],\n         [-8.14635996e+00, -5.99006042e+00,  0.00000000e+00, ...,\n           7.46175179e-01, -6.91595956e+00, -3.03746095e+00],\n...\n         [-2.65379240e+00, -6.02529245e+00, -2.92707633e+00, ...,\n           0.00000000e+00,  4.32859842e-01, -6.92332351e+00],\n         [-3.08665224e+00, -6.45815229e+00, -3.35993618e+00, ...,\n          -4.32859842e-01,  0.00000000e+00, -7.35618335e+00],\n         [ 4.26953111e+00,  8.98031057e-01,  3.99624717e+00, ...,\n           6.92332351e+00,  7.35618335e+00,  0.00000000e+00]],\n\n        [[ 0.00000000e+00, -6.30547202e+00,  1.08737981e+00, ...,\n          -7.74350435e+00, -6.56949881e+00, -1.10209482e+00],\n         [ 6.30547202e+00,  0.00000000e+00,  7.39285182e+00, ...,\n          -1.43803234e+00, -2.64026792e-01,  5.20337720e+00],\n         [-1.08737981e+00, -7.39285182e+00,  0.00000000e+00, ...,\n          -8.83088416e+00, -7.65687862e+00, -2.18947462e+00],\n         ...,\n         [ 7.74350435e+00,  1.43803234e+00,  8.83088416e+00, ...,\n           0.00000000e+00,  1.17400554e+00,  6.64140953e+00],\n         [ 6.56949881e+00,  2.64026792e-01,  7.65687862e+00, ...,\n          -1.17400554e+00,  0.00000000e+00,  5.46740399e+00],\n         [ 1.10209482e+00, -5.20337720e+00,  2.18947462e+00, ...,\n          -6.64140953e+00, -5.46740399e+00,  0.00000000e+00]]]])Attributes: (6)created_at :2022-10-13T14:37:37.315398arviz_version :0.13.0.dev0inference_library :pymcinference_library_version :4.2.2sampling_time :7.480114936828613tuning_steps :1000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DatasetView&gt; Size: 133kB\nDimensions:  (chain: 4, draw: 500, school: 8)\nCoordinates:\n  * chain    (chain) int64 32B 0 1 2 3\n  * draw     (draw) int64 4kB 0 1 2 3 4 5 6 7 ... 493 494 495 496 497 498 499\n  * school   (school) &lt;U16 512B 'Choate' 'Deerfield' ... 'Mt. Hermon'\nData variables:\n    obs      (chain, draw, school) float64 128kB ...\nAttributes: (4)posterior_predictiveGroups: (0)Dimensions:chain: 4draw: 500school: 8Coordinates: (3)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 495 496 497 498 499array([  0,   1,   2, ..., 497, 498, 499])school(school)&lt;U16'Choate' ... 'Mt. Hermon'array(['Choate', 'Deerfield', 'Phillips Andover', 'Phillips Exeter',\n       'Hotchkiss', 'Lawrenceville', \"St. Paul's\", 'Mt. Hermon'], dtype='&lt;U16')Data variables: (1)obs(chain, draw, school)float64...[16000 values with dtype=float64]Attributes: (4)arviz_version :0.13.0.dev0created_at :2022-10-13T14:37:41.460544inference_library :pymcinference_library_version :4.2.2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DatasetView&gt; Size: 133kB\nDimensions:  (chain: 4, draw: 500, school: 8)\nCoordinates:\n  * chain    (chain) int64 32B 0 1 2 3\n  * draw     (draw) int64 4kB 0 1 2 3 4 5 6 7 ... 493 494 495 496 497 498 499\n  * school   (school) &lt;U16 512B 'Choate' 'Deerfield' ... 'Mt. Hermon'\nData variables:\n    obs      (chain, draw, school) float64 128kB -4.173 -3.24 ... -3.853 -3.986\nAttributes: (4)log_likelihoodGroups: (0)Dimensions:chain: 4draw: 500school: 8Coordinates: (3)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 495 496 497 498 499array([  0,   1,   2, ..., 497, 498, 499])school(school)&lt;U16'Choate' ... 'Mt. Hermon'array(['Choate', 'Deerfield', 'Phillips Andover', 'Phillips Exeter',\n       'Hotchkiss', 'Lawrenceville', \"St. Paul's\", 'Mt. Hermon'], dtype='&lt;U16')Data variables: (1)obs(chain, draw, school)float64-4.173 -3.24 ... -3.853 -3.986array([[[-4.173302, -3.239676, ..., -3.336817, -3.823773],\n        [-4.247812, -3.2279  , ..., -3.537121, -3.861641],\n        ...,\n        [-4.315149, -3.227492, ..., -4.01645 , -3.85803 ],\n        [-4.638855, -3.223242, ..., -3.765806, -3.81556 ]],\n\n       [[-4.742346, -3.226936, ..., -3.81026 , -3.913306],\n        [-4.806083, -3.415006, ..., -4.303568, -3.866033],\n        ...,\n        [-4.604134, -3.237464, ..., -4.095612, -3.899455],\n        [-4.814336, -3.303445, ..., -3.979458, -3.851396]],\n\n       [[-4.209169, -3.54477 , ..., -4.784774, -4.007715],\n        [-4.828914, -3.245192, ..., -3.447873, -3.846044],\n        ...,\n        [-4.734294, -3.421292, ..., -4.619213, -3.838812],\n        [-5.172804, -3.372593, ..., -4.444141, -4.155052]],\n\n       [[-4.485518, -3.255562, ..., -3.374531, -3.80988 ],\n        [-4.435035, -3.228102, ..., -3.824988, -3.882012],\n        ...,\n        [-4.88757 , -3.222517, ..., -4.650233, -3.828734],\n        [-5.345281, -3.232797, ..., -3.852936, -3.986156]]])Attributes: (4)arviz_version :0.13.0.dev0created_at :2022-10-13T14:37:37.487399inference_library :pymcinference_library_version :4.2.2...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DatasetView&gt; Size: 576B\nDimensions:  (school: 8)\nCoordinates:\n  * school   (school) &lt;U16 512B 'Choate' 'Deerfield' ... 'Mt. Hermon'\nData variables:\n    obs      (school) float64 64B ...\nAttributes: (4)observed_dataGroups: (0)Dimensions:school: 8Coordinates: (1)school(school)&lt;U16'Choate' ... 'Mt. Hermon'array(['Choate', 'Deerfield', 'Phillips Andover', 'Phillips Exeter',\n       'Hotchkiss', 'Lawrenceville', \"St. Paul's\", 'Mt. Hermon'], dtype='&lt;U16')Data variables: (1)obs(school)float64...[8 values with dtype=float64]Attributes: (4)arviz_version :0.13.0.dev0created_at :2022-10-13T14:37:26.606375inference_library :pymcinference_library_version :4.2.2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DatasetView&gt; Size: 576B\nDimensions:  (school: 8)\nCoordinates:\n  * school   (school) &lt;U16 512B 'Choate' 'Deerfield' ... 'Mt. Hermon'\nData variables:\n    scores   (school) float64 64B ...\nAttributes: (4)constant_dataGroups: (0)Dimensions:school: 8Coordinates: (1)school(school)&lt;U16'Choate' ... 'Mt. Hermon'array(['Choate', 'Deerfield', 'Phillips Andover', 'Phillips Exeter',\n       'Hotchkiss', 'Lawrenceville', \"St. Paul's\", 'Mt. Hermon'], dtype='&lt;U16')Data variables: (1)scores(school)float64...[8 values with dtype=float64]Attributes: (4)arviz_version :0.13.0.dev0created_at :2022-10-13T14:37:26.607471inference_library :pymcinference_library_version :4.2.2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DatasetView&gt; Size: 36kB\nDimensions:     (chain: 4, draw: 500, new_school: 2)\nCoordinates:\n  * chain       (chain) int64 32B 0 1 2 3\n  * draw        (draw) int64 4kB 0 1 2 3 4 5 6 7 ... 493 494 495 496 497 498 499\n  * new_school  (new_school) &lt;U13 104B 'Essex College' 'Moordale'\nData variables:\n    obs         (chain, draw, new_school) float64 32kB 2.041 -2.556 ... -0.2822\nAttributes: (4)predictionsGroups: (0)Dimensions:chain: 4draw: 500new_school: 2Coordinates: (3)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 495 496 497 498 499array([  0,   1,   2, ..., 497, 498, 499])new_school(new_school)&lt;U13'Essex College' 'Moordale'array(['Essex College', 'Moordale'], dtype='&lt;U13')Data variables: (1)obs(chain, draw, new_school)float642.041 -2.556 ... -1.015 -0.2822array([[[ 2.04091912, -2.55566503],\n        [ 0.41809885, -0.56776961],\n        [-0.45264929, -0.21559716],\n        ...,\n        [-0.80265585,  0.40858787],\n        [ 0.89066617,  0.91324226],\n        [ 0.30152948, -2.85103878]],\n\n       [[-1.02941822,  0.81504467],\n        [-0.86725243, -1.00340203],\n        [-2.30495532,  1.26656886],\n        ...,\n        [-1.40028095,  1.9391935 ],\n        [-0.37582993, -0.76872586],\n        [ 0.11466401, -0.89829659]],\n\n       [[ 0.02963037, -0.96028439],\n        [ 0.56533507,  0.05565896],\n        [-1.36828642,  1.0376982 ],\n        ...,\n        [ 0.23222422,  0.36513287],\n        [ 0.31840946, -0.56685801],\n        [ 2.39826354,  0.91078977]],\n\n       [[-1.42283401, -0.74058959],\n        [ 0.83390251,  0.53293412],\n        [ 0.13188271, -0.03434879],\n        ...,\n        [ 1.57846099,  0.24653314],\n        [ 0.64302486,  1.42710376],\n        [-1.01529472, -0.28215614]]])Attributes: (4)created_at :2025-04-30T13:13:12.666793+00:00creation_library :ArviZcreation_library_version :0.6.0.dev0creation_library_language :PythonDimensions:Coordinates: (0)Inherited coordinates: (0)Data variables: (0)Attributes: (0)\n\n\n\n\n\n\nHoyer, Stephan, and Joe Hamman. 2017. “Xarray: N-D Labeled Arrays and Datasets in Python.” Journal of Open Research Software 5 (1). https://doi.org/10.5334/jors.148.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Working with DataTree</span>"
    ]
  },
  {
    "objectID": "Chapters/Distributions.html",
    "href": "Chapters/Distributions.html",
    "title": "3  Random Variables, Distributions, and Uncertainty",
    "section": "",
    "text": "3.1 Random variables\nFrom a Bayesian perspective probabilities represent a degree of (un)certainty about the occurrence of an event. It is a measure of the likelihood that a particular hypothesis or event is true, given the available data and prior knowledge. We assign the value 0 to something impossible and 1 to something certain. When we are unsure we assign a value in between. For example, we could say that the probability of rain tomorrow is 0.32. This means that we are 32% certain that it will rain tomorrow.\nIn practice we usually do not care about individual probabilities, instead we work with probability distributions. A probability distribution describes the probabilities associated with each possible outcome of an experiment. In statistics, the term “experiment” is used in a very wide sense. It could mean a well-planned experiment in a laboratory, but it could also mean the result of a poll, the observation of the weather tomorrow, or the number of people that will visit a website next week.\nLet’s consider the experiment of observing the weather tomorrow. The possible outcomes of this experiment include the following outcomes:\nNotice that we are omitting the possibility of snow, or hail. In other words, we are assigning 0 probability to those outcomes. It is usually the case that we do not ponder all the possible outcomes of an experiment, either because we deliberately assume them to be irrelevant, because we don’t know about them, or because is too complex/expensive/time-consuming/etc to take them all into account.\nAnother important thing to notice, from this example, is that these outcomes are words (or strings if you want). To work with them we need to assign a number to each outcome. For example, we could assign the numbers 0 to Rainy, 1 to Sunny, and 2 to Cloudy. This mapping from the outcomes to the numbers is called a random variable. This is a funny and potentially misleading name as its mathematical definition is not random (the mapping is deterministic) nor a variable (it is a function). The mapping is arbitrary, -1 to Rainy, 0 to Sunny, and 4 to Cloudy is also valid. But once we pick one mapping, we keep using it for the rest of the experiment or analysis. One common source of confusion is understanding where the randomness comes from if the mapping is deterministic. The randomness comes from the uncertainty about the outcome of the experiment, i.e. the weather tomorrow. We are not sure if it will be rainy tomorrow until tomorrow comes.\nRandom variables can be classified into two main types: discrete and continuous.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Random Variables, Distributions, and Uncertainty</span>"
    ]
  },
  {
    "objectID": "Chapters/Distributions.html#random-variables",
    "href": "Chapters/Distributions.html#random-variables",
    "title": "3  Random Variables, Distributions, and Uncertainty",
    "section": "",
    "text": "Rainy\nSunny\nCloudy\n\n\n\n\n\nDiscrete Random Variables: They can take on a countable number of distinct values. We already saw an example of a discrete random variable, the weather tomorrow. It can take on three values: Rainy, Sunny, and Cloudy. No intermediate values are allowed in our experiment, even when it is true that it can be partially sunny and still rain. And it has to be at least partially cloudy to rain. But we are not considering those possibilities.\nContinuous Random Variables: They can take on any value within a certain range. For example, the temperature tomorrow is a continuous random variable. If we use a Celsius scale, then it can take on any value between -273.15 Celsius to \\(+ \\infty\\). Of course, in practice, the expected temperature is restricted to a much narrower range. The lowest recorded temperature on Earth is −89.2 °C and the highest is 56.7 °C, and that range will be even narrower if we consider a particular region of our planet.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Random Variables, Distributions, and Uncertainty</span>"
    ]
  },
  {
    "objectID": "Chapters/Distributions.html#probability-mass-and-density-functionsc",
    "href": "Chapters/Distributions.html#probability-mass-and-density-functionsc",
    "title": "3  Random Variables, Distributions, and Uncertainty",
    "section": "3.2 Probability mass and density functionsc",
    "text": "3.2 Probability mass and density functionsc\nThe probability distribution of a discrete random variable is often described using a probability mass function (PMF), which gives the probability of each possible outcome. For instance, the following plot shows the probability mass function of a categorical distribution with three possible outcomes, like Rainy, Sunny, and Cloudy.\n\npz.Categorical([0.15, 0.6, 0.25]).plot_pdf();\n\n\n\n\n\n\n\nFigure 3.1: PMF of a Categorical disribution\n\n\n\n\n\nUsually, there is more than one probability distribution that we can use to represent the same set of probabilities, for instance, we could use a binomial distribution.\n\npz.Binomial(2, 0.6).plot_pdf();\n\n\n\n\n\n\n\nFigure 3.2: PMF of a Binomial distribution\n\n\n\n\n\nThe probability distribution of a continuous random variable is described using a probability density function (PDF), which specifies the likelihood of the random variable falling within a particular interval. For instance, we could use a normal distribution to describe the temperature tomorrow.\n\npz.Normal(30, 4).plot_pdf();\n\n\n\n\n\n\n\nFigure 3.3: PDF of a normal distribution\n\n\n\n\n\nor maybe a skew normal like this if we expect higher temperatures like during summer.\n\npz.SkewNormal(38, 5, -2).plot_pdf();\n\n\n\n\n\n\n\nFigure 3.4: PDF of a skew-normal distribution\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNotice that we use plot_pdf() instead of plot_pmf(), this is because PreliZ uses the same method to plot both discrete and continuous distributions. In the case of discrete distributions, it will plot the probability mass function (PMF), and in the case of continuous distributions, it will plot the probability density function (PDF).\n\n\nOne issue when interpreting a PDF is that the y-axis is a density, not a probability. To get probability from a PDF we need to integrate the density over a given interval. This is something straightforward to do with a computer. But not that easy to do “visually”, human eyes/brains are not very good at that task. One way to alleviate this issue is to accompany a PDF with a point interval, like in the following plot.\n\npz.SkewNormal(38, 5, -2).plot_pdf(pointinterval=True);\n\n\n\n\n\n\n\nFigure 3.5: PDF of a SkewNormal distribution with a pointinterval\n\n\n\n\n\nThe point interval shows the quantiles of the distribution. Quantiles divide a dataset into equal probability intervals. For example, deciles divide a dataset into 10 equal-probability intervals, and quartiles divide a dataset into 4 equal-probability intervals. The most common quantile is the median (or 50th percentile), which divides a dataset into two equal-probability intervals where half of the data falls below the median and half of the data falls above the median.\nThe point interval in Figure 3.5 shows the 5th, 25th, 50th, 75th, and 95th percentiles. The point is the median. The tick line is the interquartile range (the central 50% of the distribution) and the thin line is the central 90% of the distribution.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Random Variables, Distributions, and Uncertainty</span>"
    ]
  },
  {
    "objectID": "Chapters/Distributions.html#cumulative-distribution-functions",
    "href": "Chapters/Distributions.html#cumulative-distribution-functions",
    "title": "3  Random Variables, Distributions, and Uncertainty",
    "section": "3.3 Cumulative distribution functions",
    "text": "3.3 Cumulative distribution functions\nIn the previous section, we saw that we can use PMFs and PDFs to represent the probability distribution of a random variable. But there are other ways to represent a distribution. For example, we could use the cumulative distribution function (CDF).\nThe CDF is defined as the probability that the random variable takes a value less than or equal to \\(x\\). The CDF is defined for both discrete and continuous random variables. Figure 3.6 shows the CDF of a categorical distribution with three possible outcomes. Compare it with Figure 3.1\n\npz.Categorical([0.15, 0.6, 0.25]).plot_cdf();\n\n\n\n\n\n\n\nFigure 3.6: CDF of a Categorical distribution\n\n\n\n\n\nFigure 3.7 shows the CDF of a normal distribution (compare it with Figure 3.3).\n\npz.Normal(30, 4).plot_cdf();\n\n\n\n\n\n\n\nFigure 3.7: CDF of a normal distribution\n\n\n\n\n\nThe CDF is usually easier to read than the PDF, as we already saw y-axis for a PDF is a density that has no intrinsic meaning, and to get probability from a PDF we need to evaluate areas. Instead for a CDF the y-axis is a probability. For the PMF/PDF it is easier to get the mode (the highest value for the point/curve), and for the CDF it is easier to get the median (the value of \\(x\\) for which \\(y=0.5\\)), or other quantiles. From the CDF it is also easier to quickly get quantities like the probability of getting a temperature equal or lower than 35 degrees. It is the value of the CDF at 35. From Figure 3.7 we can see that it is roughly 0.9 or 90%, if you want more accuracy you could use a matplotlib/ArviZ style with a grid (like arviz-darkgrid) or use the cdf() function.\n\npz.Normal(30, 4).cdf(35)\n\n0.894350157794624\n\n\nFrom the CDF we can also easily get the probability of a range of values. For example, the probability of the temperature being between 25 and 35 degrees is the difference between the CDF at 35 and the CDF at 25. From Figure 3.7 we can get that it is roughly 0.9 or 90%. Again even when you can get a good estimate just by looking at the graph you can use the cdf() function to get a more accurate estimate. But the fact that you can get a good estimate by looking at the graph is a good feature.\n\nnp.diff(pz.Normal(30, 4).cdf([25, 35]))\n\narray([0.78870032])",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Random Variables, Distributions, and Uncertainty</span>"
    ]
  },
  {
    "objectID": "Chapters/Distributions.html#inverse-cumulative-distribution-functions",
    "href": "Chapters/Distributions.html#inverse-cumulative-distribution-functions",
    "title": "3  Random Variables, Distributions, and Uncertainty",
    "section": "3.4 Inverse cumulative distribution functions",
    "text": "3.4 Inverse cumulative distribution functions\nSometimes we may want to use the inverse of the CDF. This is known as the quantile function or the percent point function (PPF). The PPF is also defined for both discrete and continuous random variables. For example, Figure 3.8 shows the PPF of a categorical distribution with three possible outcomes and Figure 3.9 shows the PPF of a normal distribution.\n\npz.Categorical([0.15, 0.6, 0.25]).plot_ppf();\n\n\n\n\n\n\n\nFigure 3.8: PPF of a Categorical distribution\n\n\n\n\n\n\npz.Normal(30, 4).plot_ppf();\n\n\n\n\n\n\n\nFigure 3.9: PPF of a normal distribution",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Random Variables, Distributions, and Uncertainty</span>"
    ]
  },
  {
    "objectID": "Chapters/Distributions.html#distributions-in-arviz",
    "href": "Chapters/Distributions.html#distributions-in-arviz",
    "title": "3  Random Variables, Distributions, and Uncertainty",
    "section": "3.5 Distributions in ArviZ",
    "text": "3.5 Distributions in ArviZ\nThe PMF/PDF, CDF, and PPF are convenient ways to represent distributions for which we know the analytical form. But in practice, we often work with distributions that we don’t know their analytical form. Instead, we have a set of samples from the distribution. A clear example is a posterior distribution, computed using an MCMC method. For those cases, we still want useful visualization that we can use for ourselves or to show others. Some common methods are:\n\nHistograms\nKernel density estimation (KDE)\nEmpirical cumulative distribution function (ECDF)\nQuantile dot plots\n\nWe will discuss these methods in the next subsections with special emphasis on how they are implemented in ArviZ.\n\n3.5.1 Histograms\nHistograms are a very simple and effective way to represent a distribution. The basic idea is to divide the range of the data into a set of bins and count how many data points fall into each bin. Then we use as many bars as bins, with the height of the bars being proportional to the counts. The following video shows a step-by-step animation of a histogram being built.\n\nHistograms can be used to represent both discrete and continuous random variables. Discrete variables are usually represented using integers.  Arguably the most important parameter of a histogram is the number of bins. Too few bins and we will miss details, too many and we will plot noise. You can pick the number of bins with a bit of trial and error, especially when you have good idea of what you want to show. However, there are many methods to compute the number of bins automatically from the data, like the Freedman–Diaconis rule or the Sturges’ rule. By default, ArviZ computes the number of bins using both rules and then picks the one that gives the largest number of bins. This is the same approach used by np.histogram(., bins=\"auto) and plt.hist(., bins=\"auto). Additionally, when the data is of type integers, ArviZ will preserve that structure and will associate bins to integers, instead of floats. If the number of unique integers is relatively small then, it will associate one bin to each integer. For example, in the following plot each bar is associated with an integer in the interval [0, 9].\n\nd_values = azb.convert_to_dataset(pz.Poisson(3).rvs((1, 500)))\nazp.plot_dist(d_values, kind=\"hist\");\n\n\n\n\n\n\n\nFigure 3.10: Histogram from a sample of integers. Each bin corresponds to a single integer.\n\n\n\n\n\nWhen the discrete values take higher values, like in Figure 3.11, bins are still associated with integers but many integers are binned together.\n\nd_values = azb.convert_to_dataset(pz.Poisson(100).rvs((1, 500)))\nazp.plot_dist(d_values, kind=\"hist\");\n\n\n\n\n\n\n\nFigure 3.11: Histogram from a sample of integers. Bins group together many integers.\n\n\n\n\n\nIf you don’t like the default binning criteria of ArviZ, you can change it by passing the bins argument using the hist_kwargs.\n\nd_values = azb.convert_to_dataset(pz.Poisson(100).rvs((1, 500)))\nazp.plot_dist(d_values, kind=\"hist\", stats_kwargs={\"density\":{\"bins\":20}})\n\n\n\n\n\n\n\nFigure 3.12: Histogram from a sample of integers, with bins automatically computed by Matplotlib, not ArviZ.\n\n\n\n\n\n\n\n3.5.2 KDE\nKernel density estimation (KDE) is a non-parametric way to estimate the probability density function from a sample. Intuitively you can think of it as the smooth version of a histogram. Conceptually you place a kernel function like a Gaussian on top of a data point, then you sum all the Gaussians, generally evaluated over a grid and not over the data points. Results are normalized so the total area under the curve is one. The following video shows a step-by-step animation of a KDE being built. You can see a version with border corrections and without them. Border corrections avoid adding a positive density outside the range of the data.\n\nThe following block of code shows a very simple example of a KDE.\n\n_, ax = plt.subplots(figsize=(12, 4))\nbandwidth = 0.4\nnp.random.seed(19)\ndatapoints = 7\ny = np.random.normal(7, size=datapoints)\nx = np.linspace(y.min() - bandwidth * 3, y.max() + bandwidth * 3, 100)\nkernels = np.transpose([pz.Normal(i, bandwidth).pdf(x) for i in y])\nkernels *= 1/datapoints  # normalize the results\nax.plot(x, kernels, 'k--', alpha=0.5)\nax.plot(y, np.zeros(len(y)), 'C1o')\nax.plot(x, kernels.sum(1))\nax.set_xticks([])\nax.set_yticks([]);\n\n\n\n\n\n\n\n\nThe most important parameter of a KDE is the bandwidth which controls the degree of smoothness of the resulting curve. It is analogous to the number of bins for the histograms. ArviZ’s default method to compute the bandwidth works well for a wide range of distributions including multimodal ones. Compared to other KDEs in the Python ecosystem, the KDE implemented in ArviZ automatically handles the boundaries of a distribution. ArviZ will assign a density of zero to any point outside the range of the data.\nThe following example shows a KDE computed from a sample from a Gamma distribution. Notice that ArviZ computes a KDE instead of a histogram, and notice that there is no density for negative values.\n\nc_values = azb.convert_to_dataset(pz.Gamma(2, 3).rvs((1,1000)))\nazp.plot_dist(c_values);\n\n\n\n\n\n\n\nFigure 3.13: KDE from a sample of floats. By default, ArviZ computes a KDE instead of a histogram.\n\n\n\n\n\n\n\n3.5.3 ECDF\nBoth histograms and KDEs are ways to approximate the PMF/PDF of a distribution from a sample. But sometimes we may want to approximate the CDF instead. The empirical cumulative distribution function (ECDF) is a non-parametric way to estimate the CDF. It is a step function that jumps up by 1/N at each observed data point, where N is the total number of data points. The following video shows a step-by-step animation of an ECDF being built.\n\nThe following block of code shows a very simple example of an ECDF.\n\nazp.plot_dist(c_values, kind=\"ecdf\");\n\n\n\n\n\n\n\nFigure 3.14: empirical cumulative distribution function\n\n\n\n\n\n\n\n3.5.4 Quantile dot plots\nA quantile dot plot displays the distribution of a sample in terms of its quantiles. Reading the median or other quantiles from quantile dot plots is generally easy, we just need to count the number of dots.\nThe following video shows a step-by-step animation of a quantile dot plot being built.\n\nFrom Figure 3.15 we can easily see that 30% of the data is below 2. We do this by noticing that we have a total of 10 dots and 3 of them are below 2.\n\nd_values = azb.convert_to_dataset(pz.Poisson(3).rvs((1, 500)))\ntry:\n    azp.plot_dist(d_values, kind=\"dots\");\nexcept NotImplementedError:\n    pass\n\n\n\n\n\n\n\nFigure 3.15: Quantile dot plot\n\n\n\n\n\nThe number of quantiles (nquantiles) is something you will need to choose by yourself, usually, it is a good idea to keep this number relatively small and “round”, as the main feature of a quantile dot plot is that finding probability intervals reduces to counting dots. It is easier to count and compute proportion if you have 10, or 20 dots than if you have 11 or 57. But sometimes a larger number could be a good idea too, for instance, if you or your audience wants to focus on the tails of the distribution a larger number of dots will give you more resolution and you still will be counting only a rather small number dots so it will be easy to compute proportions.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Random Variables, Distributions, and Uncertainty</span>"
    ]
  },
  {
    "objectID": "Chapters/MCMC_diagnostics.html",
    "href": "Chapters/MCMC_diagnostics.html",
    "title": "4  MCMC Diagnostics",
    "section": "",
    "text": "4.1 From the MCMC theory to practical diagnostics\nThe theory describes certain behaviors of MCMCs methods, many diagnoses are based on evaluating whether the theoretical results are empirically verified. For example, MCMC theory says that:\nWe are going to see that many diagnostics need multiple chains. Each chain is an independent MCMC run. The logic is that by comparing independent runs we can more easily sport issues than running a single instance. This multiple-chain approach also takes advantage of modern hardware. If you have a CPU with 4 cores you can get 4 independent chains in essentially the same time that one single chain.\nTo keep the focus on the diagnostics and not on any particular Bayesian model. We are going to first create 3 synthetic samples, we will use them to emulate samples from a posterior distribution.\nShow the code for more details\ngood_sample = pz.Gamma(2, 5).rvs((3, 1000), random_state=rng)\nbad_sample0 = pz.Normal(np.sort(good_sample, axis=None),\n                        0.05).rvs(3000, random_state=rng).reshape(3, -1)\n\nbad_sample1 = good_sample.copy()\nstuck = []\nfor i in pz.DiscreteUniform(0, 900).rvs(3, random_state=rng):\n    stuck.append((i, i+50))\n    bad_sample1[0,i:i+50] = pz.Beta(i, 150).rvs(50, random_state=rng)\n\nsample = azb.convert_to_dataset({\"good_sample\":good_sample,\n          \"bad_sample_0\":bad_sample0,\n          \"bad_sample_1\":bad_sample1})",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>MCMC Diagnostics</span>"
    ]
  },
  {
    "objectID": "Chapters/MCMC_diagnostics.html#from-the-mcmc-theory-to-practical-diagnostics",
    "href": "Chapters/MCMC_diagnostics.html#from-the-mcmc-theory-to-practical-diagnostics",
    "title": "4  MCMC Diagnostics",
    "section": "",
    "text": "The initial value is irrelevant, we must always arrive at the same result\nThe samples are not really independent, but the value of a point only depends on the previous point, there are no long-range correlations.\nIf we look at the sample as a sequence we should not be able to find any patterns.\n\nFor example, for a sufficiently long sample, the first portion must be indistinguishable from the last (and so should any other combination of regions).\n\nFor the same problem, each sample generated will be different from the others, but for practical purposes, the samples should be indistinguishable from each other.\n\n\n\n\ngood_sample: A random sample from a Gamma(2, 5). This is an example of a good sample because we are generating independent and identically distributed (iid) draws. This is the ideal scenario.\nbad_sample_0: We sorted good_sample, split it into three chains, and then added a small Gaussian error. This is a representation of a bad sample because values are not independent (we sorted the values!) and they do not come from the same distribution. This represents a scenario where the sampler has very poor mixing.\nbad_sample_1: we start from good_chains, and turn into a poor sample by randomly introducing portions where consecutive samples are highly correlated to each other. This represents a common scenario, a sampler can resolve a region of the parameter space very well, but get stuck into one or more regions.\n\n\n\n\n\n\n\n\nNote\n\n\n\nAfter reading this chapter a good exercise is to come back here and modify these synthetic samples and run one or more diagnostics. If you want to make the exercise even more fun challenge yourself to predict what the diagnostics will be before running. Or even the other way around, how you should change the samples to get a given result. This is a good test of your understanding and a good way to correct possible misunderstandings.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>MCMC Diagnostics</span>"
    ]
  },
  {
    "objectID": "Chapters/MCMC_diagnostics.html#trace-plots",
    "href": "Chapters/MCMC_diagnostics.html#trace-plots",
    "title": "4  MCMC Diagnostics",
    "section": "4.2 Trace plots",
    "text": "4.2 Trace plots\nA trace plot is created by drawing the sampled values at each iteration step. Ideally, we should expect to see a very noisy plot, some people call it a caterpillar. The reason is that draws should be uncorrelated from each other, the value of a draw should not provide any hint about the previous or next draw. Also, the draws from the first iterations should be indistinguishable from the ones coming from the last iterations the middle iterations, or any other region. The ideal scenario is the lack of any clear pattern as we can see at the right panel of Figure 4.1.\nIn ArviZ by calling the function azp.plot_trace_dist(.) we get a trace plot on the right and on the left a KDE (we can also plot ECDFs, or histograms). Figure 4.1 is an example of this. The KDE/ECDF/histogram can help to spot differences between chains, ideally, distributions should overlap.\n\nazp.plot_trace_dist(sample, var_names=\"good_sample\", compact=False);\n\n\n\n\n\n\n\nFigure 4.1: Trace plot and Kernel Density Estimate (KDE) of a sample without issues\n\n\n\n\n\nIf you just want the trace without the density call azp.plot_trace(.)\n\nazp.plot_trace(sample, var_names=\"good_sample\");\n\n\n\n\n\n\n\nFigure 4.2: Trace plot of a sample without issues\n\n\n\n\n\nNow let’s see an example of a bad sample. Figure 4.3 shows two problems. On the one hand, each chain is visiting a different region of the parameter space. We can see this from the trace plot itself and the KDE. On the other hand, even within each region, the sampler is having trouble properly exploring the space, notice how it keeps moving up, instead of being stationary.\n\n\nCode\nazp.plot_trace_dist(sample, var_names=\"bad_sample_0\", compact=False);\n\n\n\n\n\n\n\n\nFigure 4.3: Trace plot of 3 chains that has not converged\n\n\n\n\n\nFinally from Figure 4.4, we can see another common scenario. This time we see that globally everything looks fine. But there are 3 regions where the sampler got stuck, see the gray bands across the traceplot.\n\n\nCode\npc = azp.plot_trace_dist(sample, var_names=\"bad_sample_1\", compact=False)\nax = pc.viz[\"bad_sample_1\"][\"plot\"].sel(column=\"trace\").item()\nfor s in stuck:\n    ax.fill_between(s, 2.5, color=\"black\", alpha=0.25);\n\n\n\n\n\n\n\n\nFigure 4.4: Trace plot showing a sampler being stuck in 3 regions (see yellow bands). Because of the overlap, it’s not easy to spot the problem for the first region.\n\n\n\n\n\nTrace plots are very popular in the Bayesian literature. But there are more modern and useful options, as we will see next.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>MCMC Diagnostics</span>"
    ]
  },
  {
    "objectID": "Chapters/MCMC_diagnostics.html#sec-rank-plots",
    "href": "Chapters/MCMC_diagnostics.html#sec-rank-plots",
    "title": "4  MCMC Diagnostics",
    "section": "4.3 Rank plots",
    "text": "4.3 Rank plots\nRank plots provide an alternative way to diagnose MCMC samples (Vehtari et al. 2021). Unlike trace plots, which display sample values ordered by iteration, rank plots transform the sampled values into ranks before visualization.\nLet see how it works: For each parameter, we pool all chains together and sort the draws from lowest to highest. The smallest value is assigned rank 1, the next rank 2, and so on, up to the total number of samples (equal to the number of chains multiplied by the number of draws per chain). This process converts parameter values into ranks. Next, we separate the ranks back into their original chains, collecting all ranks from the first chain, the second chain, and so on. If the MCMC sampling has no issues, the chains should be indistinguishable, and the ranks within each chain should follow a uniform distribution. In a well-mixed sampler, ranks should be evenly distributed among chains, with no chain favouring a specific range.\nTo assess uniformity, one simple approach is to plot a histogram of the ranks. However, histogram results can be sensitive to bin choices. An alternative is to plot the empirical cumulative distribution function (CDF) of the ranks. This method avoids binning and does not requires any complex processing. Instead of using raw ranks (ranging from 1 to the total number of samples), we can use fractional ranks, which values range from 0 to 1. In the ideal case, the empirical CDF follows the standard uniform distribution—a diagonal line from (0,0) to (1,1), as shown in Figure 5.6. Deviations from this line may indicate sampling issues.\n\npz.Uniform(0, 1).plot_cdf(figsize=(6, 4));\n\n\n\n\n\n\n\nFigure 4.5: The CDF of the standard Uniform distribution.\n\n\n\n\n\nThe disadvantage of such plot is that all the “action” is close to the diagonal line and most of the plot is just blank space, specially as the MCMC sample size increase. A simple trick to improve the data-ink ratio is to plot the \\(\\Delta\\)-ECDF, i.e. (observed ECDF - expected ECDF). Then a uniform distribution is a flat line that goes from (0,0) to (1, 0).\nFigure 4.6 shows rank plots for good_sample, bad_sample_0 and bad_sample_1.\n\n\nCode\nazp.plot_rank(sample);\n\n\n\n\n\n\n\n\nFigure 4.6: Rank plot for good_sample, bad_sample_0 and bad_sample_1\n\n\n\n\n\nFor good_sample we can see that ranks for both chains are uniform, as the deviations are within the envelope. In sharp contrast bad_sample_0 looks awful, deviations are very large as both chains belong to different distributions. Finally, bad_sample_1 also shows problems, we see than for chain 0 (blue) there are more high ranks than expected, and the opposite for chain 1 (red). This is a consequence of chain 1 being stuck in some regions of relatively high values as shown in Figure 4.4.\nRank plots provide a more reliable way to diagnose MCMC sampling issues compared to trace plots. While trace plots can reveal mixing problems, they often become cluttered, making it difficult to identify subtle issues like chains exploring different regions unevenly. In contrast, rank plots summarize sampling behaviour more effectively by checking for uniformity across chains, helping to detect biases, poor mixing, or convergence issues in a more interpretable way. This makes them a powerful complement—or even a preferred alternative—to trace plots for assessing MCMC performance.\nFinally, we want to mention that we can use \\(\\Delta\\)-ECDF plots to visually inspect any quantity that is expected to be uniformly distributed, not just the ranks. For example, in Chapter 5 we use them to compare the posterior predictive distribution to the observed data (see ?fig-post_ppc_pit_ecdf_alt).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>MCMC Diagnostics</span>"
    ]
  },
  {
    "objectID": "Chapters/MCMC_diagnostics.html#hat-r-r-hat",
    "href": "Chapters/MCMC_diagnostics.html#hat-r-r-hat",
    "title": "4  MCMC Diagnostics",
    "section": "4.4 \\(\\hat R\\) (R-hat)",
    "text": "4.4 \\(\\hat R\\) (R-hat)\nPlots are often useful for discovering patterns, but sometimes we want numbers, for example when quickly evaluating a large number of parameters it may be easier to look at numbers than plots. Number are also easier to plug into automatic routine, that call for human attention only if some threshold is exceeded. This may be necessary when running a large number of models, for example in a simulation study.\n\\(\\hat R\\) is a numerical diagnostic that answers the question Did the chains mix properly? But I also like to think of it as the score assigned by a jury in a trace (or rank) plot contest. The central idea is to compare the variance between chains with the variance within each chain. The version implemented in ArviZ and described in Vehtari et al. (2021) does several other things under the hood, but the main idea is the same.\nIdeally, we should get \\(\\hat R = 1\\), in practice \\(\\hat R \\lessapprox 1.01\\) are considered safe and in the first modeling phases, even higher values like \\(\\hat R \\approx 1.1\\) may be fine.\nUsing ArviZ we can get the \\(\\hat R\\) with azs.rhat(⋅), azs.summary(⋅) and azp.plot_forest(⋅, r_hat=True)\n\nazs.rhat(sample)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 24B\nDimensions:       ()\nData variables:\n    good_sample   float64 8B 1.0\n    bad_sample_0  float64 8B 3.04\n    bad_sample_1  float64 8B 1.009xarray.DatasetDimensions:Coordinates: (0)Data variables: (3)good_sample()float641.0array(1.00033968)bad_sample_0()float643.04array(3.04027608)bad_sample_1()float641.009array(1.00902614)Indexes: (0)Attributes: (0)\n\n\n\n4.4.1 Effective Sample Size (ESS)\nSince the samples of an MCMC are (auto)correlated, the amount of “useful” information is less than a sample of the same size but iid. Figure 4.7 can help us develop intuition. In this figure, we analyze the error incurred while computing an estimate (such as the mean) from samples of different size, considering varying degrees of autocorrelation. The results represent averages from 1000 repetitions.\nWe can see that the error goes down as the sample size increases and we can also see that the lower the autocorrelation the smaller the sample size to achieve an estimate with a given error. In other words the higher the autocorrelation the larger the number of sample we will need to achieve the a given precision.\n\n\nShow the code for more details\ndef generate_autocorrelated_sample(original, rho):\n    \"\"\"\n    Generates an autocorrelated sample from original.\n\n    Parameters:\n    ----------\n    sample: numpy array, \n        The original sample\n    rho: float,\n        Desired autocorrelation value\n\n    Returns:\n    --------\n    new_sample: numpy array, autocorrelated sample\n    \"\"\"\n    n = len(original)\n    y = np.copy(original)\n    mean = np.mean(original)\n    for i in range(1, n):\n        y[i] += rho * (y[i-1]-mean) + np.random.randn()\n\n    return y\n\nmean = 0\nlag = 30\nsize = 300\n\niid_samples = pz.Normal(mean, 1).rvs((1000, size))\n\nrhos = np.linspace(0, 0.90, 7)\nN = len(rhos)\n\nfig, ax = plt.subplots(figsize=(12, 4))\n\nfor k, rho in enumerate(rhos):\n    auto_samples = np.stack([generate_autocorrelated_sample(iid_sample, rho) for iid_sample in iid_samples])\n    auto_error = []\n    for i in range(1, size):\n        auto_error.append(np.mean(((np.mean(auto_samples[:,:i] - mean, 1)**2)**0.5)))\n\n    ax.plot(auto_error[lag:], color=plt.cm.viridis_r(k/N))\n\nsm = plt.cm.ScalarMappable(cmap=plt.cm.viridis_r)\ncbar = plt.colorbar(sm, ax=ax, label='Autocorrelation', ticks=[0, 1])\ncbar.ax.set_yticklabels(['Low', 'High'])\ncbar.ax.tick_params(length=0)\n\nax.set_yticks([])\nax.set_ylabel(\"Error\")\nax.set_xticks([])\nax.set_xlabel(\"Sample size\")\n\nax.set_ylim(bottom=0)\nax.set_xlim(-2)\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.plot(1, 0, \"&gt;k\", transform=ax.get_yaxis_transform(), clip_on=False)\nax.plot(-2, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False)\n\n\n\n\n\n\n\n\nFigure 4.7: Average error as a function of the sample size for different autocorrelation values.\n\n\n\n\n\nAs for MCMC samples, the sample size can be misleading, we instead estimate the effective sample size (ESS) (Vehtari et al. 2021), that is, the size of a sample with the equivalent amount of information but without autocorrelation. Figure 4.8 shows how when the sample size increases the ESS tends to increase too, and more importantly, it shows that the slope is higher for lower autocorrelation values.\n\n\nShow the code for more details\nmean = 0\nsize = 300\n\niid_samples =  pz.Normal(mean, 1).rvs((500, size))\n\nrhos = np.linspace(0, 0.90, 7)\nN = len(rhos)\n\nfig, ax = plt.subplots(figsize=(12, 4))\n\nfor k, rho in enumerate(rhos):\n    auto_samples = np.stack([generate_autocorrelated_sample(iid_sample, rho) for iid_sample in iid_samples])\n    auto_error = []\n\n    for i in range(50, size, 10):\n        auto_error.append(azs.ess(auto_samples[:,:i])/500)\n\n    ax.plot(range(50, size, 10), auto_error, color=plt.cm.viridis_r(k/N))\n\nsm = plt.cm.ScalarMappable(cmap=plt.cm.viridis_r)\ncbar = plt.colorbar(sm, ax=ax, label='Autocorrelation', ticks=[0, 1])\ncbar.ax.set_yticklabels(['Low', 'High'])\ncbar.ax.tick_params(length=0)\n\nax.set_yticks([])\nax.set_ylabel(\"Effective sample size\")\nax.set_xticks([])\nax.set_xlabel(\"Sample size\")\n\nax.set_ylim(0)\nax.set_xlim(48)\nax.spines[\"top\"].set_visible(False)\nax.spines[\"right\"].set_visible(False)\nax.plot(1, 0, \"&gt;k\", transform=ax.get_yaxis_transform(), clip_on=False)\nax.plot(48, 1, \"^k\", transform=ax.get_xaxis_transform(), clip_on=False)\n\n\n\n\n\n\n\n\nFigure 4.8: Effective sample size as a function of the sample size for different autocorrelation values.\n\n\n\n\n\nWith ArviZ we can get azs.ess(⋅), azs.summary(⋅) and azp.plot_forest(⋅, ess=True)\n\nazs.ess(sample)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 24B\nDimensions:       ()\nData variables:\n    good_sample   float64 8B 3.176e+03\n    bad_sample_0  float64 8B 3.398\n    bad_sample_1  float64 8B 921.4xarray.DatasetDimensions:Coordinates: (0)Data variables: (3)good_sample()float643.176e+03array(3175.79398734)bad_sample_0()float643.398array(3.39813303)bad_sample_1()float64921.4array(921.36613488)Indexes: (0)Attributes: (0)\n\n\nOne way to use the ESS is as a minimum requirement for trustworthy MCMC samples. It is recommended the ESS to be greater than 100 per chain. That is, for 4 chains we want a minimum of 400 effective samples.\n\n\n\n\n\n\nNote\n\n\n\nThe ESS can also be used as a metric of the efficiency of MCMC sampling methods. For instance, we may want to measure the ESS per sample (ESS/n), a sampler that generates a ESS/n closer to 1 is more efficient than a sampler that generates values closer to 0. Other common metrics are the ESS per second, and the ESS per likelihood evaluation.\n\n\nWe see that azs.summary(⋅) returns two ESS values, ess_bulk and ess_tail. This is because different regions of the parameter space may have different ESS values since not all regions are sampled with the same efficiency. Intuitively, one may think that when sampling a distribution like a Gaussian it is easier to obtain better sample quality around the mean than around the tails, simply because we have more samples from that region. For some models, it could be the other way around, but the take-home message remains, not all regions are necessarily sampled with the same efficiency\n\nazs.summary(sample, kind=\"diagnostics\")\n\n\n\n\n\n\n\n\nsummary\ness_bulk\ness_tail\nR̂\nmcse_mean\nmcse_sd\n\n\nlabel\n\n\n\n\n\n\n\n\n\ngood_sample\n3175.79\n2988.52\n1.00\n0.00\n0.00\n\n\nbad_sample_0\n3.40\n11.04\n3.04\n0.15\n0.12\n\n\nbad_sample_1\n921.37\n2899.82\n1.01\n0.01\n0.01\n\n\n\n\n\n\n\n\nIf we are going to use the MCMC samples to calculate central values such as means or medians then we have to make sure that the ess_bulk is sufficiently large, however, if we want to calculate intervals such as an HDI 94% we have to make sure that ess_tail be appropriate.\nArviZ offers several functions linked to the ESS. For example, if we want to evaluate the performance of the sampler for several regions at the same time we can use azp.plot_ess.\n\nazp.plot_ess(sample,\n            pc_kwargs={\"plot_grid_kws\": {\"figsize\": (10, 8)},\n                       \"col_wrap\": 1})\n\n\n\n\n\n\n\n\nA simple way to increase the ESS is to increase the number of samples, but it could be the case that the ESS grows very slowly with the number of samples, so even if we increased the number of samples 10 times we could still be very far from our target value. One way to estimate “how many more samples do we need” is to use azp.plot_ess_evolution(.). This graph shows us how the ESS changed with each iteration, which allows us to make predictions.\nFrom Figure 4.9 we can see that the ESS grows linearly with the number of samples for good_sample, and it does not grow at all for bad_sample_0. In the latter case, this is an indication that there is virtually no hope of improving the ESS simply by increasing the number of draws.\n\nazp.plot_ess_evolution(sample,\n            var_names=[\"good_sample\", \"bad_sample_0\"],\n            pc_kwargs={\"col_wrap\":1},\n            );\n\n\n\n\n\n\n\nFigure 4.9: ESS evolution plot for good_sample and bad_sample_0.\n\n\n\n\n\n\n\n4.4.2 Monte Carlo standard error (MCSE)\nAn advantage of the ESS is that it is scale-free, it does not matter if one parameter varies between 0.1 and 0.2 and another between -2000 and 0, an ESS of 400 has the same meaning for both parameters. In models with many parameters, we can quickly identify which parameters are most problematic. However, when reporting results it is not very informative to know whether the ESS was 1372 or 1501. Instead, we would like to know the order of the errors we are making when approximating the posterior. This information is given by the Monte Carlo standard error (MCSE). Like the ESS, the MCSE takes into account the autocorrelation of the samples. This error should be below the desired precision in our results. That is, if for a parameter the MCSE is 0.1, it does not make sense to report that the mean of that parameter is 3.15. Since the correct value could easily be between 3.4 and 2.8.\nWith ArviZ we can get the MCSE with azs.mcse(⋅) or azs.summary(⋅).\n\nazs.mcse(sample)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 24B\nDimensions:       ()\nData variables:\n    good_sample   float64 8B 0.004879\n    bad_sample_0  float64 8B 0.1505\n    bad_sample_1  float64 8B 0.01029xarray.DatasetDimensions:Coordinates: (0)Data variables: (3)good_sample()float640.004879array(0.00487878)bad_sample_0()float640.1505array(0.15052787)bad_sample_1()float640.01029array(0.01028776)Indexes: (0)Attributes: (0)\n\n\n\n\n4.4.3 Thinning\nOne way to reduce autocorrelation in an MCMC chain is through thinning, where we retain only every \\(n\\)-th sample. While this method is straightforward, it has the drawback of discarding useful information. Research generally suggests that it’s better to keep all the samples when calculating estimates (MacEachern and Berliner 1994; Link and Eaton 2012). Provided the variance is finite, the central limit theorem applies even to correlated samples. Then if higher accuracy is needed, it’s more effective to increase the number of draws rather than to perform thinning. Still, there are situations where thinning might be useful, such as:\n\nReducing the size of stored data, which is especially important when dealing with a large number of models or when the postprocessing of the samples is expensive, for instance when we need to run expensive computations on every draw.\nAddressing bias in extreme ordered statistics, which may affect diagnostics like rank-plots (see Section 4.3) and uniformity tests typically done for posterior predictive checks, as shown in ?fig-post_pred_check_u_value and ?fig-loo_pit or as part of Simulation Based Calibration (Talts et al. 2020).\n\nTo determine an appropriate thinning factor, we can use the effective sample size (ESS). For instance, if you have 2,000 samples and an ESS of 1,000, you would thin by a factor of 2, keeping every other sample. The higher the ESS, the lower the thinning factor required. A more refined approach is to calculate both ESS-tail and ESS-bulk, then use the smaller value, which better accounts for differences in sampling efficiency between the central 90% quantile and the 5% tail quantiles (Säilynoja, Bürkner, and Vehtari 2022).\nIn ArviZ we have the thin function, which allows us to perform thinning automatically.\n\nazs.thin(sample)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 344B\nDimensions:       (chain: 3, draw: 4)\nCoordinates:\n  * chain         (chain) int64 24B 0 1 2\n  * draw          (draw) int64 32B 0 296 592 888\nData variables:\n    good_sample   (chain, draw) float64 96B 0.3661 0.1945 ... 0.3894 0.7729\n    bad_sample_0  (chain, draw) float64 96B 0.06095 0.1178 ... 0.7865 0.9934\n    bad_sample_1  (chain, draw) float64 96B 0.3661 0.1945 ... 0.3894 0.7729xarray.DatasetDimensions:chain: 3draw: 4Coordinates: (2)chain(chain)int640 1 2array([0, 1, 2])draw(draw)int640 296 592 888array([  0, 296, 592, 888])Data variables: (3)good_sample(chain, draw)float640.3661 0.1945 ... 0.3894 0.7729array([[0.36610475, 0.19454609, 0.30565339, 0.4707436 ],\n       [0.22672028, 0.34066736, 0.16999411, 0.75744559],\n       [0.40832387, 0.30917867, 0.38939553, 0.77287814]])bad_sample_0(chain, draw)float640.06095 0.1178 ... 0.7865 0.9934array([[0.06094871, 0.11781711, 0.24037597, 0.29611147],\n       [0.25969625, 0.25794855, 0.28386393, 0.3925021 ],\n       [0.46815167, 0.44709759, 0.78646625, 0.99338669]])bad_sample_1(chain, draw)float640.3661 0.1945 ... 0.3894 0.7729array([[0.36610475, 0.19454609, 0.30565339, 0.4707436 ],\n       [0.22672028, 0.34066736, 0.16999411, 0.75744559],\n       [0.40832387, 0.30917867, 0.38939553, 0.77287814]])Indexes: (2)chainPandasIndexPandasIndex(Index([0, 1, 2], dtype='int64', name='chain'))drawPandasIndexPandasIndex(Index([0, 296, 592, 888], dtype='int64', name='draw'))Attributes: (0)\n\n\nAdditionally, if needed, we can specify the thinning factor manually or we can pass a target_ess, this last option is useful when we want as much thinning as possible provided we still get an ESS around the specified value of target_ess.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>MCMC Diagnostics</span>"
    ]
  },
  {
    "objectID": "Chapters/MCMC_diagnostics.html#diagnosis-of-gradient-based-algorithms",
    "href": "Chapters/MCMC_diagnostics.html#diagnosis-of-gradient-based-algorithms",
    "title": "4  MCMC Diagnostics",
    "section": "4.5 Diagnosis of gradient-based algorithms",
    "text": "4.5 Diagnosis of gradient-based algorithms\nDue to its internal workings, algorithms like NUTS offer some specific tests that are not available to other methods. These tests are generally very sensitive.\nTo exemplify this we are going to load two InferenceData from pre-calculated models. The details of how these data were generated are not relevant at the moment. We will only say that they are two models that are mathematically equivalent but parameterized in different ways. In this case, the parameterization affects the efficiency of the sampler. The centered model is sampled more efficiently than the non_centered model.\n\nidata_cm = azb.load_arviz_data(\"centered_eight\")\nidata_ncm = azb.load_arviz_data(\"non_centered_eight\")\n\n\n4.5.1 Transition energy vs marginal energy\nWe can think of a Hamiltonian Monte Carlo as a two-step process\n\nDeterministic sampling (following the Hamiltonian)\nA random walk in momentum space\n\nIf the transition energy distribution is similar to the marginal energy distribution, then NUTS can generate samples of the marginal energy distribution that are almost independent between transitions. We can evaluate this visually as shown in Figure 4.10 for the centered_eight model and Figure 4.11 for the non_centered_eight. \n\nazp.plot_energy(idata_cm)\n\n\n\n\n\n\n\nFigure 4.10: Energy plot for centered_eight model.\n\n\n\n\n\n\nazp.plot_energy(idata_ncm)\n\n\n\n\n\n\n\nFigure 4.11: Energy plot for non_centered_eight model.\n\n\n\n\n\n\n\n4.5.2 Divergences\nOne advantage of NUTS is that it fails with style. This happens, for example, when trying to go from regions of low curvature to regions of high curvature. In these cases, the numerical trajectories may diverge. Essentially this happens because in these cases there is no single set of hyper-parameters that allows efficient sampling of both regions. So one region is sampled properly and when the sampler moves to the other region it fails. Divergent numerical trajectories are extremely sensitive identifiers of pathological neighborhoods.\nThe following example shows two things; the non_centered model shows several divergences (red circles) grouped in one region. In the centered model, which has no divergence, you can see that around that same region, there are samples for smaller values of tau. That is to say, the non_centered model fails to sample a region, but at least it warns that it is having problems sampling that region!\n\n_, axes = plt.subplots(1, 2, sharey=True, sharex=True, figsize=(10, 5), constrained_layout=True)\n\n\nfor ax, idata, name in zip(axes.ravel(), (idata_cm, idata_ncm), (\"centered\", \"non-centered\")):\n    az.plot_pair(idata, var_names=['theta', 'tau'], coords={'school':\"Choate\"}, kind='scatter',\n                 divergences=True, divergences_kwargs={'color':'C1'},\n                 ax=ax)\n    ax.set_title(name)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>MCMC Diagnostics</span>"
    ]
  },
  {
    "objectID": "Chapters/MCMC_diagnostics.html#what-to-do-when-the-diagnoses-are-wrong",
    "href": "Chapters/MCMC_diagnostics.html#what-to-do-when-the-diagnoses-are-wrong",
    "title": "4  MCMC Diagnostics",
    "section": "4.6 What to do when the diagnoses are wrong?",
    "text": "4.6 What to do when the diagnoses are wrong?\n\nMore samples or more tuning steps. This is usually only useful when the problems are minor\nBurn-in. Modern software like PyMC uses several samples to tune the hyper-parameters of the sampling methods. By default, these samples are eliminated, so in general, it is not necessary to do Burn-in manually.\nChange sampling method!\nReparameterize the model\nImprove priors\n\nThe folk theorem of computational statistics: When you have computational problems, there is often a problem with your model. The recommendation is NOT to change the priors to improve sampling quality. The recommendation is that if the sampling is bad, perhaps the model is too. In that case, we can think about improving the model, one way to improve it is to use prior knowledge to improve the priors.\n\nSome models can be expressed in more than one way, all mathematically equivalent. In those cases, some parameterizations may be more efficient than others. For example, as we will see later with hierarchical linear models.\nIn the case of divergences, these are usually eliminated by increasing the acceptance rate, for instance in PyMC you can do pm.sample(..., target_accept=x) where x is 0.8 by default and the maximum value is 1. If you reach 0.99 you should probably do something else.\nModern probabilistic programming languages, usually provide useful warning messages and tips if they detect issues with sampling, paying attention to those messages can save you a lot of time.\n\n\n\n\n\nLink, William A., and Mitchell J. Eaton. 2012. “On Thinning of Chains in MCMC.” Methods in Ecology and Evolution 3 (1): 112–15. https://doi.org/https://doi.org/10.1111/j.2041-210X.2011.00131.x.\n\n\nMacEachern, Steven N., and L. Mark Berliner. 1994. “Subsampling the Gibbs Sampler.” The American Statistician 48 (3): 188–90. https://doi.org/10.2307/2684714.\n\n\nSäilynoja, Teemu, Paul-Christian Bürkner, and Aki Vehtari. 2022. “Graphical Test for Discrete Uniformity and Its Applications in Goodness-of-Fit Evaluation and Multiple Sample Comparison.” Statistics and Computing 32 (2): 32. https://doi.org/10.1007/s11222-022-10090-6.\n\n\nTalts, Sean, Michael Betancourt, Daniel Simpson, Aki Vehtari, and Andrew Gelman. 2020. “Validating Bayesian Inference Algorithms with Simulation-Based Calibration.” https://arxiv.org/abs/1804.06788.\n\n\nVehtari, Aki, Andrew Gelman, Daniel Simpson, Bob Carpenter, and Paul-Christian Bürkner. 2021. “Rank-Normalization, Folding, and Localization: An Improved \\(\\widehat{R}\\) for Assessing Convergence of MCMC (with Discussion).” Bayesian Analysis 16 (2): 667–718. https://doi.org/10.1214/20-BA1221.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>MCMC Diagnostics</span>"
    ]
  },
  {
    "objectID": "Chapters/Prior_posterior_predictive_checks.html",
    "href": "Chapters/Prior_posterior_predictive_checks.html",
    "title": "5  Prior and Posterior predictive checks",
    "section": "",
    "text": "5.1 Prior predictive checks\nThe idea behind prior predictive checks is very general and simple: if a model is good it should be able generate data resembling our prior knowledge. We call these checks, prior predictive because we are generating synthetic data before we have seen the actual data.\nThe general algorithm for prior predictive checks is:\nNotice that in step 4 we use domain knowledge, NOT observed data!\nIn steps 1 and 2 what we are doing is approximating this integral: \\[\np(y^\\ast) = \\int_{\\Theta} p(y^\\ast \\mid \\theta) \\; p(\\theta) \\; d\\theta\n\\]\nwhere \\(y^\\ast\\) represents unobserved but potentially observable data. Notice that to compute \\(y^\\ast\\) we are evaluating the likelihood over all possible values ​​of the prior. Thus we are effectively marginalizing out the values of \\(\\theta\\), the parameters.\nTo exemplify a prior predictive check, let’s try with a super simple example. Let’s say we want to model the height of humans. We know that the heights are positive numbers, so we should use a distribution that assigns zero mass to negative values. But we also know that at least for adults using a normal distribution could be a good approximation. So we create the following model, without too much thought, and then draw 500 samples from the prior predictive distribution.\nThe plot below displays samples from the prior predictive distribution (shown as solid blue lines). To aid interpretation, we have included two reference values: the average length/height of a newborn (approximately 50 cm) and the average height of adult males in the Netherlands (around 182 cm). Reference values are meaningful benchmarks derived from domain knowledge—not from the observed data—and help assess whether predictions are on a reasonable scale. While there are no strict rules for selecting reference values, different analysts might choose different benchmarks based on context\npc = azp.plot_ppc_dist(dt, group=\"prior_predictive\", references=(50, 182))\n\n\n\n\n\n\n\nFigure 5.1: The prior predictive check for the model of heights. We can see that the bulk of the samples are outside the reference values.\nWe can see that our model is bananas the bulk of the prior predictive distribution is outside of our reference values and the model is predicting values below 0. This is a clear indication that the model is not a good representation of our prior knowledge.\nIn many cases, data will be informative enough to overcome poorly selected priors, but this isn’t guaranteed. To address this, we can tighten our priors. While there’s no universal rule for doing so, a good guideline is to choose priors that concentrate most of the prior predictive distribution’s mass within a plausible range—such as between our reference values.\nSuch priors are often called weakly informative priors. Though not strictly defined, these priors produce a prior predictive distribution with little to no probability mass in unrealistic or impossible regions. For example, a normal distribution with a mean of 160 and a standard deviation of 10 assigns negligible weight to negative values while still accommodating a wide range of plausible heights.\nWe repeat the prior predictive checks with the new prior predictive distribution. We can see that the bulk of the prior predictive distribution is within the reference values.\npc = azp.plot_ppc_dist(dt, group=\"prior_predictive\", references=(50, 182))\n\n\n\n\n\n\n\nFigure 5.2: The prior predictive check for the model of heights with a more narrower prior than Figure 5.1. Predictions are closer to our domain knowledge about human heights.\nYou are free to pick other priors and other reference values and make new prior predictive checks. Maybe you can use the historical record for the taller and shorter persons in the world as reference values.\nWhen plotting many distributions, where each one spans a narrow range of values compared to the range spanned but the entire collection of distributions, it is usually a good idea to plot the cumulative distribution instead of KDEs, histograms, or quantile dot plots.\npc = azp.plot_ppc_dist(dt, group=\"prior_predictive\", kind=\"ecdf\", references=(50, 182))\n\n\n\n\n\n\n\nFigure 5.3: The prior predictive check for the model of heights. Same as Figure 5.2 but using empirical CDFs instead of KDEs.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Prior and Posterior predictive checks</span>"
    ]
  },
  {
    "objectID": "Chapters/Prior_posterior_predictive_checks.html#prior-predictive-checks",
    "href": "Chapters/Prior_posterior_predictive_checks.html#prior-predictive-checks",
    "title": "5  Prior and Posterior predictive checks",
    "section": "",
    "text": "Draw \\(N\\) realizations from a prior distribution.\nFor each draw, simulate new data from the likelihood.\nPlot the results.\nUse domain knowledge to assess whether simulated values reflect prior knowledge.\nIf simulated values do not reflect prior knowledge, change the prior distribution, likelihood, or both and repeat the simulation from step 1.\nIf simulated values reflect prior knowledge, compute the posterior.\n\n\n\n\n\n\nPyMCCmdStanPy\n\n\n\nwith pm.Model() as model: \n    # Priors for unknown model parameters\n    mu = pm.Normal('mu', mu=0, sigma=10)\n    sigma = pm.HalfNormal('sigma', sigma=10)\n    # Likelihood (sampling distribution) of observations\n    y_obs = pm.Normal('Y_obs', mu=mu, sigma=sigma, observed=y)\n    # draw 500 samples from the prior predictive\n    dt = pm.sample_prior_predictive(samples=500, random_seed=SEED)\n\nSampling: [Y_obs, mu, sigma]\n\n\n\n\nstan_code = \"\"\"\ndata {\n    int&lt;lower=0&gt; N;\n    array[N] real y;\n}\nparameters {\n    real mu;\n    real&lt;lower=0&gt; sigma;\n}\nmodel {\n    // Priors\n    mu ~ normal(0, 10);\n    sigma ~ normal(0, 10);\n    \n    // Likelihood\n    y ~ normal(mu, sigma);\n}\ngenerated quantities {\n    real prior_mu = normal_rng(0, 10);\n    real&lt;lower=0&gt; prior_sigma = abs(normal_rng(0, 10));\n    array[N] real y_prior_pred;\n    for (i in 1:N) {\n        y_prior_pred[i] = normal_rng(prior_mu, prior_sigma);\n    }\n}\n\"\"\"\n\nwith open(\"./stan_code.stan\", \"w\") as f:\n    print(stan_code, file=f)\n\n# Compile the model\nmodel = cmdstanpy.CmdStanModel(stan_file=\"./stan_code.stan\")\n\n# Prepare the data\nstan_data = {\n    'N': len(y),\n    'y': y\n}\n\n# Sample from the prior predictive distribution\nprior_samples = model.sample(\n    data=stan_data,\n    fixed_param=True,\n    iter_sampling=500,\n    seed=SEED\n)\n\n# Convert to ArviZ\ndt = azb.from_cmdstanpy(\n    prior=prior_samples,\n    prior_predictive=\"y_prior_pred\",\n    observed_data={\"y\": y},\n)\n\n\n\n\n\n\n\n\n\nPyMCCmdStanPy\n\n\n\nwith pm.Model() as model: \n    # Priors for unknown model parameters\n    mu = pm.Normal('mu', mu=160, sigma=10)\n    sigma = pm.HalfNormal('sigma', sigma=10)\n    # Likelihood (sampling distribution) of observations\n    y_obs = pm.Normal('Y_obs', mu=mu, sigma=sigma, observed=y)\n    # draw 500 samples from the prior predictive\n    dt = pm.sample_prior_predictive(samples=500, random_seed=SEED)\n\nSampling: [Y_obs, mu, sigma]\n\n\n\n\nstan_code = \"\"\"\ndata {\n    int&lt;lower=0&gt; N;\n    array[N] real y;\n}\nparameters {\n    real mu;\n    real&lt;lower=0&gt; sigma;\n}\nmodel {\n    // Priors\n    mu ~ normal(160, 10);\n    sigma ~ normal(0, 10);\n    \n    // Likelihood\n    y ~ normal(mu, sigma);\n}\ngenerated quantities {\n    real prior_mu = normal_rng(160, 10);\n    real&lt;lower=0&gt; prior_sigma = abs(normal_rng(0, 10));\n    array[N] real y_prior_pred;\n    for (i in 1:N) {\n        y_prior_pred[i] = normal_rng(prior_mu, prior_sigma);\n    }\n}\n\"\"\"\n\nwith open(\"./stan_code.stan\", \"w\") as f:\n    print(stan_code, file=f)\n\n# Compile the model\nmodel = cmdstanpy.CmdStanModel(stan_file=\"./stan_code.stan\")\n\n# Prepare the data\nstan_data = {\n    'N': len(y),\n    'y': y\n}\n\n# Sample from the prior predictive distribution\nprior_samples = model.sample(\n    data=stan_data,\n    fixed_param=True,  # Sample from priors only\n    iter_sampling=500,\n    seed=SEED\n)\n\n# Convert to ArviZ\ndt = azb.from_cmdstanpy(\n    prior=prior_samples,\n    prior_predictive=\"y_prior_pred\",\n    observed_data={\"y\": y},\n)\n\n\n\n\n\n\n\n\n\n5.1.1 A final note about priors\nBefore moving on to the next section, we would like to share one last thought on priors. If you have access to reliable prior knowledge, you should use it, there’s no good reason to discard valid information. But in many real-world scenarios, turning that knowledge into informative priors often require considerable effort and time. And in some cases, they may lead to results that are nearly indistinguishable from those produced using less carefully chosen priors.\nIn practice weakly informative priors can offer meaningful advantages over both vague and informative priors. Even a modest amount of prior information is often better than none at all, as it helps guard against implausible or misleading results and it could provide computational benefits, such as improved sampling efficiency while being usually easier and less time-consuming to elicit than fully informative priors.\nFinally, one benefit that’s often underappreciated is that running prior predictive checks and playing around with different priors can give you valuable insights into your model and the problem you’re trying to solve, regardless of their impact on their direct impact on the posterior. To learn more about prior elicitation, check out @#sec-prior-elicitation.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Prior and Posterior predictive checks</span>"
    ]
  },
  {
    "objectID": "Chapters/Prior_posterior_predictive_checks.html#posterior-predictive-checks",
    "href": "Chapters/Prior_posterior_predictive_checks.html#posterior-predictive-checks",
    "title": "5  Prior and Posterior predictive checks",
    "section": "5.2 Posterior predictive checks",
    "text": "5.2 Posterior predictive checks\nThe idea behind posterior predictive checks is very general and simple: if a model is good it should be able generate data resembling the observed data. We call these checks, posterior predictive because we are generating synthetic data after seeing the data.\nThe general algorithm for posterior predictive checks is:\n\nDraw \\(N\\) realizations from the posterior distribution.\nFor each draw, simulate new data from the likelihood.\nPlot the results.\nUse observed data to assess whether simulated values agree with observed values.\nIf simulated values do not agree with observations, change the prior distribution, likelihood, or both and repeat the simulation from step 1.\nIf simulated values reflect prior knowledge, compute the posterior.\n\nNotice that in contrast with prior predictive checks, we use observations here. Of course, we can also include domain knowledge to assess whether the simulated values are reasonable, but because we are using observations we do more stringent evaluations.\nIn steps 1 and 2 what we are doing is approximating this integral: \\[\np(\\tilde y) = \\int_{\\Theta} p(\\tilde y \\mid \\theta) \\; p(\\theta \\mid y) \\; d\\theta\n\\]\nwhere \\(\\tilde y\\) represents new observations, according to our model. The data generated is predictive since it is the data that the model expects to see.\nNotice that what we are doing is marginalizing the likelihood by integrating all possible values ​​of the posterior. Therefore, from the perspective of our model, we are describing the marginal distribution of data, that is, regardless of the values of the parameters.\nContinuing with our height example, we can generate synthetic data from the posterior predictive distribution.\n\nPyMCCmdStanPy\n\n\n\nwith model: \n    dt = pm.sample(idata_kwargs={\"log_likelihood\": True}, random_seed=SEED)\n    pm.sample_posterior_predictive(dt, random_seed=SEED, extend_inferencedata=True)\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (2 chains in 2 jobs)\nNUTS: [mu, sigma]\nSampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 1 seconds.\nWe recommend running at least 4 chains for robust computation of convergence diagnostics\nSampling: [Y_obs]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstan_code = \"\"\"\ndata {\n    int&lt;lower=0&gt; N;\n    array[N] real y;\n}\nparameters {\n    real mu;\n    real&lt;lower=0&gt; sigma;\n}\nmodel {\n    // Priors\n    mu ~ normal(0, 10);\n    sigma ~ normal(0, 10);\n    \n    // Likelihood\n    y ~ normal(mu, sigma);\n}\ngenerated quantities {\n    real prior_mu = normal_rng(0, 10);\n    real&lt;lower=0&gt; prior_sigma = abs(normal_rng(0, 10));\n    array[N] real y_prior_pred;\n    for (i in 1:N) {\n        y_prior_pred[i] = normal_rng(prior_mu, prior_sigma);\n    }\n\n    array[N] real log_lik;\n    for (i in 1:N) {\n        log_lik[i] = normal_lpdf(y[i] | mu, sigma);\n    }\n\n    array[N] real y_rep;\n    for (i in 1:N) {\n        y_rep[i] = normal_rng(mu, sigma);\n    }\n}\n\"\"\"\n\nwith open(\"./stan_code.stan\", \"w\") as f:\n    print(stan_code, file=f)\n\n# Compile the model\nmodel = cmdstanpy.CmdStanModel(stan_file=\"./stan_code.stan\")\n\n\n# Prepare the data\nstan_data = {\n    'N': len(y),\n    'y': y\n}\n\n\nprior_samples = model.sample(\n    data=stan_data,\n    fixed_param=True,  # Sample from priors only\n    iter_sampling=500,\n    seed=SEED\n)\n\nposterior = model.sample(data=stan_data)\n\n# Convert to ArviZ\ndt = azb.from_cmdstanpy(\n    posterior=posterior,\n    prior=prior_samples,\n    prior_predictive={\"y\":\"y_prior_pred\"},\n    posterior_predictive={\"y\": \"y_rep\"},\n    log_likelihood={\"y\": \"log_lik\"},\n    observed_data={\"y\": y},\n)\n\n\n\nAnd then we use ArviZ to plot the comparison. We can see that the model is doing a good job at predicting the data. The observed data (black line) is within the bulk of the posterior predictive distribution (blue lines).\n\nazp.plot_ppc_dist(dt, num_samples=200);\n\n\n\n\n\n\n\nFigure 5.4: Posterior predictive check for the model of heights.\n\n\n\n\n\nOther common visualizations to compare observed and predictive values are empirical CDFs, histograms and less often quantile dotplots. Like with other types of visualizations, you may want to try different options, to be sure visualizations are not misleading and you may also want to adapt the visualization to your audience.\n\n5.2.1 Using summary statistics\nBesides directly comparing observations and predictions in terms of their densities, we can do comparisons in terms of summary statistics, like the median, the interquartile range, the standard deviation etc. Which ones we decide to use can vary from one data-analysis problem to another, and ideally they should be informed by the data-analysis goals. As in posterior predictive checks we use the data twice, first for fitting the model and then for checking it. It is advisable to select test statistics that are orthogonal to the model parameters (Gabry et al. 2019). For example, in a Normal model with a location parameter, the mean should be easy to recover, so a posterior predictive check using the mean as a test statistic would not be a particularly stringent test. As in many common models there is a location parameter, then the mean is usually not a good test statistic.\nWe can use the plot_ppc_tstat function to plot the posterior predictive distribution of a test statistic. The function takes as input a DataTree with a posterior_predictive and observed_data groups and a name of the test statistic (custom function are also allowed), and it will compute the posterior predictive distribution of that statistic. The function also computes the observed value of the test statistic and plots it as a dot at the bottom of each subplot.\nThe following plot shows a comparison in terms of the mean, median and interquartile range (IQR). The dots at the bottom of each subplots corresponds to the summary statistics computed for the observed data and the KDE is for the model’s predictions.\n\npc = azp.combine_plots(dt,\n                 plots=[\n                  (azp.plot_ppc_tstat, {\"t_stat\":\"median\"}),\n                  (azp.plot_ppc_tstat, {\"t_stat\":\"mad\"}),\n                  (azp.plot_ppc_tstat, {\"t_stat\":\"iqr\"}),                   \n                 ],\n                group=\"posterior_predictive\",\n)\n\n\n\n\n\n\n\nFigure 5.5: Posterior predictive check for the model of heights using summary statistics.\n\n\n\n\n\nIf we want a numerical summary of a posterior predictive checks using test statistics we can compute the proportion of simulated data that is less than or equal to the observed data: \\[\np(T_{\\text{sim}} \\le T_{\\text{obs}} \\mid \\tilde y)\n\\]\nWhere \\(T\\) is the summary statistic of our choice, computed for both the observed data \\(T_{\\text{obs}}\\) and the simulated data \\(T_{\\text{sim}}\\).\nThis is known as a posterior predictive p-value (or Bayesian p-value). This is similar to the frequentist p-value, but computed with respect to the posterior predictive distribution, instead of the sample distribution under the null hypothesis.\nA posterior predictive p-value of 0.5 indicates that half of the predictions are below the observed values and half above. Posterior predictive p-values do not in general have uniform distributions under the null hypothesis but instead tend to have distributions more concentrated near 0.5 (Gelman 2013). For instance, we already mentioned that the mean is easy to recover for many models and thus the posterior predictive p-value for the mean is often concentrated around 0.5.\nThe term “Bayesian p-values” may sound like an oxymoron or paradoxical (Meng 1994). The Bayesian p-values are defined similar to their frequentist cousins and hence the name. But they are used in a very different way. We use posterior predictive p-values as a diagnostic tool to asses potential mismatches between model and data rather than as a measure of “statistical significance” or as a dichotomy decision tool. The null hypothesis is that the predictions from the model and the observed data are drawn from the same data-generating process, but in practice we are not interested in rejecting this hypothesis. We already know is not true! Instead, we are interested in understanding how well the model is doing at predicting the data, detecting potential problems, an if possible or desirable improving the model.\n\n\n5.2.2 PIT-ECDFs\nInstead of using a summary statistics, as before, we can directly compare observations and predictions by computing: \\[\np(\\tilde y_i \\le y_i \\mid y)\n\\]\nThis is often called the marginal p-value and the ideal distribution is the standard uniform distribution. The intuition is that if the model can generate predictions from the same distribution as the observed data, then the observed data can be thought of as just one random sample from the posterior predictive distribution. In this case, the observed data point is equally likely to appear anywhere within the range of the predicted values. This means there’s no systematic bias in where the observation falls, and the p-values derived from comparing the observed data to the predictions will be uniformly distributed.\nA more formal justification for this result is provided by the Probability Integral Transform (PIT). This property, also known as the universality of the Uniform distribution, states that if \\(Y\\) is a random variable with a continuous distribution and cumulative distribution function (CDF) \\(F_Y\\), then the transformed variable\n\\[\nU = F_Y(Y)\n\\]\nfollows a standard Uniform distribution. A proof of this result can be found in the The Book of Statistical Proofs.\nIn other words if we apply the CDF of any continuous distribution to a random variable with that distribution, the result will be a random variable with a standard uniform distribution. This is a very powerful result, as it allows us to use the standard uniform distribution as a reference distribution for many statistical tests, including posterior predictive checks.\nAs mentioned earlier, the marginal p-value is given by\n\\[\np(\\tilde y_i \\leq y_i \\mid y).\n\\]\nIf the observed data and predictions are drawn from the same distribution, this expression is then equivalent to the definition of the CDF:\n\\[\nF_Y(y) = \\mathrm{Pr}(Y \\leq y).\n\\]\nThus, we can see the computation of the marginal p-value as an application of the Probability Integral Transform.\nIn practice we don’t have the CDF, but this is no problem as we have samples from the posterior predictive and hence we can compute the empirical CDF (ECDF). The CDF of the standard Uniform distribution is a diagonal line that goes from (0, 0) to (1,1), as shown in Figure 5.6. Deviations from this line may indicate problems with the model. This is a very simple to interpret plot.\n\npz.Uniform(0, 1).plot_cdf()\n\n\n\n\n\n\n\nFigure 5.6: The CDF of the standard Uniform distribution.\n\n\n\n\n\nThe disadvantage of such plot is that all the “action” is close to the diagonal line and most of the plot is just blank space. A simple trick to improve the data-ink ratio is to plot the difference between the observed and expected cumulative distribution functions, the \\(\\Delta\\)-ECDF, as shown in Figure Figure 5.7. The last ingredient to improve this visual diagnostic is to add a confidence band. Due to finite sample size we should expect deviations from uniformity, so a confidence band gives us an idea of how much deviation is expected by chance.\n\nazp.plot_ppc_pit(dt);\n\n\n\n\n\n\n\nFigure 5.7: Posterior predictive check for the model of heights using marginal Bayesian p-values, also know as u-values.\n\n\n\n\n\nIn ArviZ, we use the simultaneous confidence bands described by Säilynoja, Bürkner, and Vehtari (2022). The simultaneous confidence bands take into account the probability of observing deviations of the entire curve, as opposed to independent pointwise deviations. The band or envelope has an oval shape because the probability of observing a deviation is null at 0 and 1, all ECDFs must start at 0 and end at 1, and is higher in the middle of the curve.\nTo build intuition on how to interpret the PIT-ECDF plots we are going to explore four common patterns using synthetic data. The following three plots show four different scenarios, where the observed data follows a standard normal distribution (\\(\\mu=0, \\sigma^2=1\\)). In each case, we compare the observed data to predictions where:\n\nThe mean of the predictions is shifted to the right. The model is overpredicting the data.\nThe mean of the predictions is shifted to the left. The model is underpredicting the data.\nThe predictions have a wider spread. The predictions are too uncertain.\nThe predictions have a narrower spread. The predictions are too certain.\n\nFirst we show the KDEs of the observed data and the predictions.\n\nobserved = pz.Normal(0, 1).rvs(500)\n\npredictions = {}\nfor i, (mu, sigma) in enumerate([\n                                (0.5, 1),  # shifted to the right\n                                (-0.5, 1), # shifted to the left\n                                (0, 2),    # wider \n                                (0, 0.5),  # narrower\n                                ]):\n    predictions[f\"y{i}\"] =  pz.Normal(mu, sigma).rvs((4, 500, 100))\n\ndt_i = azb.from_dict({\n    \"posterior_predictive\":predictions,\n    \"observed_data\": {f\"y{i}\": observed for i in range(len(predictions))}\n})\n\nazp.plot_ppc_dist(dt_i,\n                  kind=\"kde\",  \n                  plot_kwargs={\"remove_axis\":False},\n                  pc_kwargs={\"plot_grid_kws\":{\"sharey\":True}},             \n                 );\n\n\n\n\n\n\n\nFigure 5.8: Posterior predictive check with KDEs showing four alternative scenarios.\n\n\n\n\n\nThen we show the ECDFs of the observed data and the predictions.\n\nazp.plot_ppc_dist(dt_i,\n                  kind=\"ecdf\",\n                  pc_kwargs={\"plot_grid_kws\":{\"sharey\":True}},        \n                 );\n\n\n\n\n\n\n\nFigure 5.9: Posterior predictive check with ECDFs showing four alternative scenarios.\n\n\n\n\n\nFinally, we show the PIT-ECDFs.\n\nazp.plot_ppc_pit(dt_i,\n                 plot_kwargs={\"ylabel\":False},\n                 pc_kwargs={\"plot_grid_kws\":{\"sharey\":True}},        \n                 );\n\n\n\n\n\n\n\nFigure 5.10: Posterior predictive check with PIT-ECDFs showing four alternative scenarios.\n\n\n\n\n\n\n\n5.2.3 Coverage\nThe coverage is the proportion of true values that fall within a given prediction interval. For a well-calibrated model, the coverage should match the intended interval width. For example, a 95% credible interval should contain the true value 95% of the time.\nFor equal-tailed intervals (ETI), the coverage can be obtained by transforming the PIT values, we just need to replace the PIT with two times the absolute difference between the PIT values and 0.5. As with the PIT-ECDFs we saw in the previous section, for a well calibrated model, we should expect the coverage to be uniform and within the confidence envelope.\nUsing ArviZ we can visualize the ETI coverage by setting coverage=True in the plot_ppc_pit function.\n\nazp.plot_ppc_pit(dt_i,\n                 coverage=True,\n                 plot_kwargs={\"ylabel\":False},\n                 pc_kwargs={\"plot_grid_kws\":{\"sharey\":True}},        \n                 );\n\n\n\n\n\n\n\nFigure 5.11: Coverage check showing four alternative scenarios.\n\n\n\n\n\n\nIf the difference is positive, the model is under-confident: the predictions have a wider spread than the data – they are too uncertain.\nIf the difference is negative, the model is over-confident: the predictions have a narrower spread than the data – they are too certain.\n\n\n\n5.2.4 Avoiding double-dipping\nSo far we have being using the data twice, first to fit the model and then to evaluate it. This is a common practice in Bayesian data analysis and it is not a problem as long as we are aware of it. The main goal is to understand how well the model is doing at predicting the data, detecting potential problems, and if possible or desirable improving the model.\nStill, we may want to avoid double-dipping. So instead of computing:\n\\[\np(\\tilde y_i \\leq y_i \\mid y)\n\\]\nWe may want to compute:\n\\[\np(\\tilde y_i \\leq y_i \\mid y_{-i})\n\\]\nwhere \\(y_{-i}\\) is the observed data without the \\(i\\)-th observation.\nThis is a more stringent test, as we are not using the \\(i\\)-th observation to compute the posterior predictive distribution. This is known as the leave-one-out cross-validation (LOO-CV) and it is a very popular method to assess the predictive performance of a model.\nIn principle computing this will be too costly, as we need to compute the posterior predictive distribution \\(n\\) times, where \\(n\\) is the number of observations. However, we can use a method called Pareto-smoothed importance sampling (PSIS) to approximate the LOO-CV from a single posterior computation. This is a topic we will discuss in more detail in Chapter 7. ArviZ offers many functions based on this method, one of them is loo_pit.\n\nazp.plot_loo_pit(dt);\n\n\n\n\n\n\n\nFigure 5.12: Posterior predictive check with LOO-PIT-ECDF.\n\n\n\n\n\n\n\n5.2.5 Hypothetical Outcome Plots\nAnother strategy that can be useful for posterior predictive plots is to use animations. Rather than showing a continuous probability distribution, Hypothetical Outcome Plots (HOPs) visualize a set of draws from a distribution, where each draw is shown as a new plot in either a small multiples or animated form. HOPs enable a user to experience uncertainty in terms of countable events, just like we experience probability in our day to day lives.\nYou can read more about HPOs here.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Prior and Posterior predictive checks</span>"
    ]
  },
  {
    "objectID": "Chapters/Prior_posterior_predictive_checks.html#posterior-predictive-checks-for-discrete-data",
    "href": "Chapters/Prior_posterior_predictive_checks.html#posterior-predictive-checks-for-discrete-data",
    "title": "5  Prior and Posterior predictive checks",
    "section": "5.3 Posterior predictive checks for discrete data",
    "text": "5.3 Posterior predictive checks for discrete data\nSo far we have show examples with continuous data. Many of the tools can still be used for discrete data, while KDEs are not useful for discrete data (unless the number of discrete values is large enough to assume continuity), histograms with properly specified bins (like one bin per discrete value) and ECDFs can be used for discrete data. Still, there are some posterior predictive plots that has been specifically designed for discrete data. In the next sections we discuss some of them.\n\n5.3.1 Posterior predictive checks for count data\nCount data is a type of discrete data that is very common in many fields. For instance, the number of iguanas per square meter in a rainforest, the number of bikes in a bike-sharing station, the number of calls to a call center, the number of emails you got last year, etc. When assessing the fit of a model to count data we need to consider the discreetness of the data and that we usually care about the amount of (over/under-)dispersion.\nRootograms are a graphical tool to assess the fit of count data models (Tukey 1977; Kleiber and Zeileis 2016). There are a few variations of rootograms, but traditionally rootograms use bars for the predicted data, and lines (plus markers) for the observed data. Finally, instead of plotting the raw data, they show the square root of the observed and predicted counts, which explain the name of the plots. The reason to square root the data is to make easier to compare observed and expected frequencies even for low frequencies. Often the uncertainty in the predictions is omitted.\nHere we are going to discuss the rootograms presented by Säilynoja et al. (2025). These rootograms emphasises the discreteness of the data and and predictions by using points. The uncertainty in the predictions is encoded using intervals. Instead of square-rooting the data, it set the y-axis on the square root scale, this makes easier to interpret the data, because we can directly read the frecuencies from the plot (instead of reading the square root) while keeping the advantage of being able to discriminate details at lower frecuencies.\nTo illustrate rootograms we are going to use the Horseshoe crabs dataset (Brockmann 1996). Very briefly, horseshoe crabs arrive at the beach in pairs for their spawning ritual. Solitary males gather around the nesting couples and vying to fertilize the eggs. These individuals, known as satellite males, often congregate near certain nesting pairs while disregarding others. We used Bambi to create two models a poisson model and a hurdle-negative binomial model for the number of male satellites as a function of the carapace width and color of the female.\nWe are going to omit the modelling details, and just upload prefitted models.\n\ncrabs_poisson = azb.load_arviz_data('crabs_poisson')\ncrabs_hurdle_nb = azb.load_arviz_data('crabs_hurdle_nb')\n\nLet’s first check the Poisson model. We can see that the overall fit is not that bad, but the zeros are underpredicted, and counts 1 to 4 are overpredicted. Most counts from 6 onward are also underpredicted. This pattern is an indication of overdispersion in the data, and the huge difference for 0 indicates an excess of zeros.\n\npc = azp.plot_ppc_rootogram(crabs_poisson)\npc.viz[\"satellite\"].plot.item().set_xlim(-0.5, 20)\n\n\n\n\n\n\n\nFigure 5.13: Rootogram showing the uncertainty in the predictions for a Poisson model.\n\n\n\n\n\nNow we will check the fit for the hurdle model. As expected for a hurdle model we get a perfect fit for the zeros. For the positive values, we still get some deviations, but the fit is better than with the Poisson model.\n\npc = azp.plot_ppc_rootogram(crabs_hurdle_nb)\npc.viz[\"satellite\"].plot.item().set_xlim(-0.5, 20)\n\n\n\n\n\n\n\nFigure 5.14: Rootogram showing the uncertainty in the predictions for a Hurdle Negative Binomial model.\n\n\n\n\n\nBoth models predict more values in the tail than observed, even if with low probability. For both plots, we restrict the x-range to (0, 20).\n\n\n5.3.2 Posterior predictive checks for binary data\nBinary data is a common form of discrete data, often used to represent outcomes like yes/no, success/failure, or 0/1. We may be tempted to asses the fit of a binary model using a bar plot, or a plot similar to the rootogram we showed in the previous section, but this is not a good idea. The reason is that even a very simple model with one parameter for the proportion of one class (like an intercept), can perfectly model that proportion (Säilynoja et al. 2025). Then a bar plot will not be able to tell much about the quality of our model.\nOne solution to this challenge is to use the so call calibration or reliability plots. To create this kind of plot we first bin the predicted probabilities (e.g., [0.0–0.1], [0.1–0.2], …, [0.9–1.0]) and then for each bin we compute the fraction of observed positive outcomes. In this way we can compare the predicted probabilities to the observed frequencies per bin. The ideal calibration plot is a diagonal line, where the predicted probabilities are equal to the observed frequencies. The problem with this approach is that in practice we don’t have good rules to select the bins and different bins can result in plots that look drastically different.\nA more robust and simple to use method, that does not rely on binning the data has been proposed by Dimitriadis, Gneiting, and Jordan (2021). Figure 5.15 shows one example of this method. As previously mentioned, the ideal calibration plot is a diagonal line, where the predicted probabilities are equal to the observed frequencies. If the line is above the diagonal, the model is underestimating the probabilities, and if the line is below the diagonal, the model is overestimating the probabilities.The confidence bands are computed using the method proposed by Dimitriadis, Gneiting, and Jordan (2021).\n\ndt = azb.load_arviz_data('anes')\n\nazp.plot_ppc_pava(dt)\n\n\n\n\n\n\n\nFigure 5.15: PAV-adjusted Calibration plot for a logistic regression model.\n\n\n\n\n\nThe y-axis of Figure 5.15 is labeled as CEP, short for “conditional event probabilities.” A CEP represents the probability that an event occurs, given that the classifier assigned a particular predicted probability. These probabilities are computed using the pool adjacent violators algorithm (Ayer et al. 1955), also known as the PAV-adjusted method—hence the name of the corresponding function in ArviZ. This algorithm ensures that CEPs are monotonic: they either increase or remain constant as the predicted probabilities increase, but never decrease. This monotonicity assumption is reasonable for calibrated models, where higher predicted probabilities should correspond to higher actual event probabilities.\n\n\n\n\nAyer, Miriam, H. D. Brunk, G. M. Ewing, W. T. Reid, and Edward Silverman. 1955. “An Empirical Distribution Function for Sampling with Incomplete Information.” The Annals of Mathematical Statistics 26 (4): 641–47. https://doi.org/10.1214/aoms/1177728423.\n\n\nBrockmann, H. Jane. 1996. “Satellite Male Groups in Horseshoe Crabs, Limulus Polyphemus.” Ethology 102 (1): 1–21. https://doi.org/https://doi.org/10.1111/j.1439-0310.1996.tb01099.x.\n\n\nDimitriadis, Timo, Tilmann Gneiting, and Alexander I. Jordan. 2021. “Stable Reliability Diagrams for Probabilistic Classifiers.” Proceedings of the National Academy of Sciences 118 (8): e2016191118. https://doi.org/10.1073/pnas.2016191118.\n\n\nGabry, Jonah, Daniel Simpson, Aki Vehtari, Michael Betancourt, and Andrew Gelman. 2019. “Visualization in Bayesian Workflow.” Journal of the Royal Statistical Society Series A: Statistics in Society 182 (2): 389–402. https://doi.org/10.1111/rssa.12378.\n\n\nGelman, Andrew. 2013. “Two simple examples for understanding posterior p-values whose distributions are far from uniform.” Electronic Journal of Statistics 7 (none): 2595–2602. https://doi.org/10.1214/13-EJS854.\n\n\nKleiber, Christian, and Achim Zeileis. 2016. “Visualizing Count Data Regressions Using Rootograms.” The American Statistician 70 (3): 296–303. https://doi.org/10.1080/00031305.2016.1173590.\n\n\nMeng, Xiao-Li. 1994. “Posterior Predictive \\(p\\)-Values.” The Annals of Statistics 22 (3): 1142–60. https://doi.org/10.1214/aos/1176325622.\n\n\nSäilynoja, Teemu, Paul-Christian Bürkner, and Aki Vehtari. 2022. “Graphical Test for Discrete Uniformity and Its Applications in Goodness-of-Fit Evaluation and Multiple Sample Comparison.” Statistics and Computing 32 (2): 32. https://doi.org/10.1007/s11222-022-10090-6.\n\n\nSäilynoja, Teemu, Andrew R. Johnson, Osvaldo A. Martin, and Aki Vehtari. 2025. “Recommendations for Visual Predictive Checks in Bayesian Workflow.” https://arxiv.org/abs/2503.01509.\n\n\nTukey, John W. 1977. Exploratory Data Analysis. 1 edition. Pearson.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Prior and Posterior predictive checks</span>"
    ]
  },
  {
    "objectID": "Chapters/Sensitivity_checks.html",
    "href": "Chapters/Sensitivity_checks.html",
    "title": "6  Prior and likelihood sensitivity checks",
    "section": "",
    "text": "6.1 Prior and likelihood sensitivity via power-scaling\nThe method we will discuss was presented by Kallioinen et al. (2023), and offers visual and numerical diagnostics that can alert us of potential prior-data conflict or likelihood noninformativity. What makes this approach very practical is that we only need to fit a single model once, and without explicitly modifying the prior or likelihood, we can asses the effect of changing them. If you are eager to see how this method can be applied in practice, you can jump to the example section. If you want to understand the method in more detail, keep reading.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Prior and likelihood sensitivity checks</span>"
    ]
  },
  {
    "objectID": "Chapters/Sensitivity_checks.html#prior-and-likelihood-sensitivity-via-power-scaling",
    "href": "Chapters/Sensitivity_checks.html#prior-and-likelihood-sensitivity-via-power-scaling",
    "title": "6  Prior and likelihood sensitivity checks",
    "section": "",
    "text": "6.1.1 Power-scaling\nA key idea of the method is the concept of power-scaling. By power-scaling we mean raising a distribution to a power \\(\\alpha\\). Why is this interesting? Because by power-scaling a distribution we can “stretch” it or “compress” it. Figure Figure 6.1 shows the effect of power-scaling on a Beta and a Normal distribution. Power-scaling is a very general transformation that work for any distribution, except for the uniform distribution. Notice this restriction also applies to a Beta(1, 1), which is uniform. This is a minor restriction, because the uniform distribution is hardly a useful prior, unless we are dealing with a very special case.\n\n\n\n\n\n\n\n\nFigure 6.1: The effect of power-scaling on Beta and Normal distributions. α values larger than 1 ‘compress’ the distribution while values of α below 1 ‘stretch’ the distribution.\n\n\n\n\n\nIn the context of Bayes Theorem we can use power-scaling to modulate the relative weights of the likelihood and prior. For instance we can write a power-scaled version of Bayes’ theorem as follows:\n\\[\np(\\theta \\mid y)_{\\alpha} \\propto p(y \\mid \\theta)^\\alpha \\; p(\\theta)\n\\]\nLet’s take a moment to understand this expression. If we set \\(\\alpha=1\\) we recover the usual expression for Bayes’ theorem, the one that you may have seen many times. Setting \\(\\alpha=0\\) is equivalent to ignoring the likelihood, thus \\(p(\\theta \\mid y)_{\\alpha}\\) will be equal to the prior. We can then conclude that any number between 0 and 1 will have the effect of “weakening” the likelihood with respect to the prior. By the same token any number greater than 1 will “strength” the likelihood with respect to the prior.\nWe can repeat this exercise for the prior and then we will be able to modulate the relative weights of the prior relative to the likelihood. Figure 6.2 shows the effect on the posterior of power-scaling the prior for a fixed likelihood. The prior is a Beta distribution with parameters \\(a=2\\) and \\(b=5\\) and the likelihood is a Binomial distribution with parameters \\(n=10\\) and \\(p=0.7\\). The posterior is computed using the prior and likelihood.\n\n\n\n\n\n\n\n\nFigure 6.2: The effect on the posterior when power-scaling the prior for a fixed likelihood.\n\n\n\n\n\n\n\n6.1.2 Power-scaling and importance sampling\nWe can analytically compute the effect of power scaling a distribution. For instance, for a Normal distribution, \\(\\mathcal{N}(\\theta \\mid \\mu, \\sigma)\\) and power-scaling factor \\(\\alpha\\) we get \\(\\mathcal{N}(\\theta \\mid \\mu, \\sigma \\; \\alpha^{-1/2})\\). In practice we usually work with MCMC samples and arbitrary distributions, thus a more convenient way to perform power-scaling is to use importance sampling. As discussed in Chapter 7 importance sampling is a method to estimate the expected value of a function under a distribution different from the one we have samples from. Kallioinen et al. (2023) proposed to use Pareto smoothed importance sampling (PSIS), a method we also discussed in Chapter 7 to estimate the ELPD.\nIn the context of power-scaling perturbations, the proposal distribution is the posterior we computed using MCMC (\\(p(\\theta \\mid y)\\)) and the target distribution is the perturbed posterior (\\(p(\\theta \\mid y)_{\\alpha}\\)). If the proposal and target distributions are expressed as the products of the prior \\(p(\\theta)\\) and likelihood \\(p(y \\mid \\theta)\\), with the prior raised to the power of \\(\\alpha\\), then we can write the importance weights for the prior as:\n\\[\nw_{\\alpha} = \\frac{p(\\theta)^{\\alpha} \\; p(y \\mid \\theta)}{p(\\theta) \\;\\; p(y \\mid \\theta)}\n\\]\nWhich simplifies to:\n\\[\nw_{\\alpha} = \\frac{p(\\theta)^{\\alpha}}{p(\\theta)}\n\\]\nwhich is the same as:\n\\[\nw_{\\alpha} = p(\\theta)^{\\alpha-1}\n\\]\nThis resulta means that the importance sampling weights for the prior only depend on the density of the prior being power-scaled. This simplifies the computation of the weights. By the same logic the same applies to the likelihood.\nTo summarize, the method proposed by Kallioinen et al. (2023) combines two key ideas, importance sampling and power-scaling. This combination allow us to approximate the sensitivity of the posterior to the prior and likelihood without the need to explicitly build and fit multiple models.\n\n\n6.1.3 Diagnosing sensitivity\nOnce we have power-scaled the prior and likelihood we can visually inspect the effect of the perturbations, by plotting the marginal posterior distributions for the parameter of interest. KDEs, ECDFs and point-intervals allows easy comparison of several distributions. If the perturbations are small, the distributions should overlap. If the perturbations are large, the distributions will be separated.\nWe can also compute numerical values based on distances (or divergences) between the unperturbed and perturbed posteriors. In Chapter 7 we discussed the use of the Kullback-Leibler divergence to compare how similar two distributions are. Kallioinen et al. (2023) instead suggest using the cumulative Jensen–Shannon divergence (CJS) (Nguyen and Vreeken 2015). This divergence has two good features, its symmetrised form is upper-bounded, which aids interpretation, and it can be computed from the ECDFs, which can be efficiently estimated from MCMC samples. Other methods requieres the estimation of the density of the distributions, which can be computationally expensive and sensible to the choice of the kernel and bandwidth.\nThe authors suggest a cut-off value of 0.05 for the CJS. For a standard Normal this value corresponds to the mean being shifted by more than \\(\\approx 0.3\\) standard deviations, or the standard deviation differing by a factor greater than \\(\\approx 0.3\\). This value is not set in stone, but it can be used as a reference to interpret the results of the sensitivity analysis.\nIf the value of CJS when power-scaling the prior and likelihood is larger than the threshold, we have a potential prior-data conflict. If the value of CJS is larger than the threshold but the value for the likelihood is smaller than the threshold, we potentially have a strong prior and weak likelihood.\nIn the next two section we are going to show two examples of on how to use this method in practice.\n\n\n6.1.4 Body fat example\nLet’s see an example of prior-data conflict in a linear regression model. We will use the bodyfat data set (Johnson 1996). The aim of the analysis is to predict an expensive and cumbersome water immersion measurement of body fat percentage (observed variable named siri) from a set of thirteen easier to measure characteristics, including age, height, weight, and circumferences of various body parts.\nLet’s start by loading the data and creating a siri variable for the response and a body_fat variable for the predictors. We center the predictors.\n\nbody_fat = pd.read_csv(\"../data/body_fat.csv\")\nsiri = body_fat.pop(\"siri\")\nbody_fat = body_fat - body_fat.mean()\n\nWe are going to start by assuming that a resonable prior for all coefficients is Normal(0, 1). With that in mind, we will fit the following linear regression model:\n\\[\n\\begin{aligned}\n    \\beta_0 &\\sim t_3(0, 9.2) \\\\\n    \\beta_k &\\sim \\mathcal{N}(0, 1) \\\\\n    \\sigma &\\sim t_{3}^{+}(9.2) \\\\\n    \\mu &= β_0 + β X^T \\\\\n    \\text{siri} &\\sim \\mathcal{N}(\\mu, \\sigma)\n\\end{aligned}\n\\]\nFor the prior (and likelihood) sensitivity method to work we need to ensure that the DataTree object includes the groups log-prior and log-likelihood.\n\nPyMCCmdStanPy\n\n\n\nwith pm.Model(coords={\"covariates\": body_fat.columns}) as model_bf_00:\n    β_0 = pm.StudentT(\"β_0\", nu=3, mu=0, sigma=9.2)\n    β = pm.Normal(\"β\", 0, 1, dims=\"covariates\")\n    σ = pm.HalfStudentT(\"σ\", nu=3, sigma=9.2)\n    μ = pm.Deterministic(\"μ\", β_0 + β @ body_fat.T)\n    y = pm.Normal(\"y\", μ, σ, observed=siri)\n    idata_bf_00 = pm.sample(random_seed=SEED,\n                            idata_kwargs={\"log_likelihood\": True, \"log_prior\": True})\n\nInitializing NUTS using jitter+adapt_diag...\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pytensor/link/c/cmodule.py:2959: UserWarning: PyTensor could not link to a BLAS installation. Operations that might benefit from BLAS will be severely degraded.\nThis usually happens when PyTensor is installed via pip. We recommend it be installed via conda/mamba/pixi instead.\nAlternatively, you can use an experimental backend such as Numba or JAX that perform their own BLAS optimizations, by setting `pytensor.config.mode == 'NUMBA'` or passing `mode='NUMBA'` when compiling a PyTensor function.\nFor more options and details see https://pytensor.readthedocs.io/en/latest/troubleshooting.html#how-do-i-configure-test-my-blas-library\n  warnings.warn(\nMultiprocess sampling (2 chains in 2 jobs)\nNUTS: [β_0, β, σ]\nSampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 7 seconds.\nWe recommend running at least 4 chains for robust computation of convergence diagnostics\n\n\n\n\n\n\n\n\n\n\n## coming soon\n\n\n\nWe can now use the psense_summary function from ArviZ to perform a numerical sensitivity analysis. This function returns a four-column DataFrame. The first column is the name of the variables, the second is the value of CJS when power-scaling the prior, then the value of CJS when power-scaling the likelihood and the last one is a textual description of the results.\nFor the \\(\\beta\\) coefficient wrist we can see that we may have prior-sensitivity (CJS&gt;0.05) and likelihood-sensitivity (CJS&gt;0.05). Thus, we may have a case of prior-data conflict for the wrist variable.\n\nazs.psense_summary(idata_bf_00, var_names=[\"~μ\"], round_to=2)\n\nWe detected potential issues. For more information on how to interpret the results, please check\nhttps://arviz-devs.github.io/Exploratory-Analysis-of-Bayesian-Models/Chapters/Sensitivity_checks.html#interpreting-sensitivity-diagnostics-summary\nor read original paper https://doi.org/10.1007/s11222-023-10366-5\n\n\n\n\n\n\n\n\n\n\nprior\nlikelihood\ndiagnosis\n\n\n\n\nβ_0\n0.01\n0.10\n✓\n\n\nβ[age]\n0.03\n0.12\n✓\n\n\nβ[weight]\n0.02\n0.07\n✓\n\n\nβ[height]\n0.01\n0.09\n✓\n\n\nβ[neck]\n0.01\n0.08\n✓\n\n\nβ[chest]\n0.02\n0.08\n✓\n\n\nβ[abdomen]\n0.01\n0.09\n✓\n\n\nβ[hip]\n0.01\n0.08\n✓\n\n\nβ[thigh]\n0.01\n0.08\n✓\n\n\nβ[knee]\n0.01\n0.07\n✓\n\n\nβ[ankle]\n0.03\n0.08\n✓\n\n\nβ[biceps]\n0.01\n0.07\n✓\n\n\nβ[forearm]\n0.03\n0.10\n✓\n\n\nβ[wrist]\n0.12\n0.17\npotential prior-data conflict\n\n\nσ\n0.01\n0.16\n✓\n\n\n\n\n\n\n\n\nWe can also evaluate the effect of power-scaling visually with the function plot_psense_dist. This function allow plot the posterior marginal for 3 values of \\(\\alpha\\). By default 0.8 (red), 1 (black) and 1.25 (blue). plot_psense_dist allow as to choose different representations including KDEs and ECDFs. From Figure 6.3 we can see that the posterior is sensitive to both prior and likelihood power-scaling, and that it shifts right (towards zero) as the prior is strengthened, and left (away from zero) as the likelihood is strengthened.\n\nazp.plot_psense_dist(idata_bf_00, \n                     var_names=[\"β\"], \n                     coords={\"covariates\": [\"wrist\"]},\n                     kind=\"ecdf\",\n                     )\n\n\n\n\n\n\n\nFigure 6.3: Posterior density estimates depending on amount of power-scaling (alpha). Overlapping lines indicate low sensitivity. Wider gaps between lines indicate greater sensitivity.\n\n\n\n\n\nWe can also use the plot_psense_quantities function to plot quantities of interest like the mean, median, standard deviation, etc. With this plot we can evaluate how much the quantities of interest change when we perturb the prior and likelihood. As a reference the plot also shows the ±2 Monte Carlo standard errors (MCSE) of the base posterior quantity. From Figure 6.4 we can see that power-scaling the prior and likelihood pulls the posterior mean in opposite directions. This suggests there might be a potential mismatch or conflict between the prior and the likelihood.\n\nazp.plot_psense_quantities(idata_bf_00, var_names=[\"β\"], coords={\"covariates\": [\"wrist\"]})\n\n\n\n\n\n\n\nFigure 6.4: Posterior quantities of βwrist as a function of power-scaling of the prior (purple line and circle markers) and the likelihood (green line and square markers). Dashed lines are ± 2 Monte Carlo standard errors (MCSE) of the base posterior quantity\n\n\n\n\n\n\n6.1.4.1 Adjusting the prior\nAs there is prior sensitivity arising from prior-data conflict, which is unexpected and unintentional as our priors were chosen to be weakly informative, we consider modifying the priors. On inspecting the raw data, we see that although the predictor variables are all measured on similar scales, the variances of the variables differ substantially. For example, the variance of wrist circumference is 0.83, while the variance of abdomen is 102.65. This leads to our chosen prior to be unintentionally informative for some of the regression coefficients, including wrist, while being weakly informative for others\nNow, let try with a different prior. We will use empirically scaled to the data, \\(βk \\sim \\mathcal{N}(0, 2.5 \\frac{s_y}{s_{xk}})\\), where \\(s_y\\) is the standard deviation of \\(y\\) and \\(s_{xk}\\) is the standard deviation of predictor variable \\(xk\\).\n\nPyMCCmdStanPy\n\n\n\nwith pm.Model(coords={\"covariates\": body_fat.columns}) as model_bf_01:\n    β_0 = pm.StudentT(\"β_0\", nu=3, mu=0, sigma=9.2)\n    β = pm.Normal(\"β\", 0, 2.5 * siri.std() / body_fat.std(), dims=\"covariates\")\n    σ = pm.HalfStudentT(\"σ\", nu=3, sigma=9.2)\n    μ = pm.Deterministic(\"μ\", β_0 + β @ body_fat.T)\n    y = pm.Normal(\"y\", μ, σ, observed=siri)\n    idata_bf_01 = pm.sample(tune=1000,\n                      draws=2000, random_seed=SEED,\n                      idata_kwargs={\"log_likelihood\": True, \"log_prior\": True})\n    pm.sample_posterior_predictive(idata_bf_01, extend_inferencedata=True)\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (2 chains in 2 jobs)\nNUTS: [β_0, β, σ]\nSampling 2 chains for 1_000 tune and 2_000 draw iterations (2_000 + 4_000 draws total) took 10 seconds.\nWe recommend running at least 4 chains for robust computation of convergence diagnostics\nSampling: [y]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## coming soon\n\n\n\nNow we can perform the sensitivity analysis again. We can see that we managed to remove the warning!\n\nazs.psense_summary(idata_bf_01, var_names=[\"~μ\"])\n\n\n\n\n\n\n\n\n\nprior\nlikelihood\ndiagnosis\n\n\n\n\nβ_0\n0.005\n0.104\n✓\n\n\nβ[age]\n0.001\n0.092\n✓\n\n\nβ[weight]\n0.001\n0.093\n✓\n\n\nβ[height]\n0.001\n0.089\n✓\n\n\nβ[neck]\n0.001\n0.093\n✓\n\n\nβ[chest]\n0.001\n0.082\n✓\n\n\nβ[abdomen]\n0.003\n0.080\n✓\n\n\nβ[hip]\n0.001\n0.111\n✓\n\n\nβ[thigh]\n0.000\n0.089\n✓\n\n\nβ[knee]\n0.000\n0.094\n✓\n\n\nβ[ankle]\n0.001\n0.101\n✓\n\n\nβ[biceps]\n0.001\n0.091\n✓\n\n\nβ[forearm]\n0.000\n0.096\n✓\n\n\nβ[wrist]\n0.001\n0.110\n✓\n\n\nσ\n0.002\n0.190\n✓\n\n\n\n\n\n\n\n\nWe can see that after changing the prior, the posterior mean for wrist changes from -1.45 to -1.86, indicating that the base prior was indeed unintentionally informative and in conflict with the data, pulling the estimate towards zero.\nAs previously, we can also evaluate the effect of power-scaling visually with the function plot_psense_dist. From Figure 6.5 we can see a better overlap between the posterior distributions, compared to the original prior.\n\nazp.plot_psense_dist(idata_bf_01, \n                     var_names=[\"β\"], \n                     coords={\"covariates\": [\"wrist\"]},\n                     kind=\"ecdf\",\n                     )\n\n\n\n\n\n\n\nFigure 6.5: Posterior density estimates depending on amount of power-scaling (alpha). Overlapping lines indicate low sensitivity. Wider gaps between lines indicate greater sensitivity.\n\n\n\n\n\nIn terms or the mean for βwrist, we can see that there is no longer prior or likelihood sensitivity, indicating no prior-data conflict. For the standard deviation, likelihood sensitivity remains, indicating that the likelihood is informative.\n\nazp.plot_psense_quantities(idata_bf_01, var_names=[\"β\"], coords={\"covariates\": [\"wrist\"]})\n\n\n\n\n\n\n\nFigure 6.6: Posterior quantities of βwrist as a function of power-scaling of the prior (purple line and circle markers) and the likelihood (green line and square markers). Dashed lines are ± 2 Monte Carlo standard errors (MCSE) of the base posterior quantity\n\n\n\n\n\nOverall, the power-scaling sensitivity analysis on the adjusted prior shows that there is no longer prior sensitivity, and there is appropriate likelihood sensitivity.\n\n\n\n6.1.5 Bacteria treatment\nNow we discuss and example of power-scaling sensitivity analysis for hierarchical models. The main motivation for this example is to show that for certain models we should selectively power-scaled the priors. To illustrate this, consider two forms of prior, a non-hierarchical prior with two independent parameters \\(p(\\theta)\\) and \\(p(\\phi)\\) and a hierarchical prior of the form \\(p(\\theta \\mid \\psi) p(\\psi)\\). In the first case, the appropriate power-scaling for the prior is \\(p(\\theta)^{\\alpha} p(\\phi)^{\\alpha}\\). This is what we did in the previous example. In the second case, for the hierarchical model, we only want to power-scale the top level prior, that is, \\(p(\\theta) p(\\phi)^{\\alpha}\\).\nFor this example we are going to use the bacteria data set (Venables and Ripley 2002).\n\nbacteria = pd.read_csv(\"../data/bacteria.csv\")\nbacteria[\"y\"] = bacteria[\"y\"].astype(\"category\").cat.codes\nbacteria[\"ID\"] = bacteria[\"ID\"].astype(\"category\").cat.codes\nbacteria[\"trtDrugP\"] = bacteria[\"trt\"] == \"drug+\"\nbacteria[\"trtDrug\"] = bacteria[\"trt\"] == \"drug\"\nK = len(bacteria[\"ID\"].unique())\n\nLet’s start by fitting a hierarchical model. The model is as follows:\n\nPyMCCmdStanPy\n\n\n\nwith pm.Model() as model_bt:\n    μ = pm.Normal('μ', mu=0, sigma=10)\n    β_week = pm.Normal('β_week', mu=0, sigma=10)\n    β_trtDrug = pm.Normal('β_trtDrug', mu=0, sigma=10)\n    β_trtDrugP = pm.Normal('β_trtDrugP', mu=0, sigma=10)    \n\n    σ = pm.HalfNormal('σ', sigma=5)\n    b_Intercept = pm.Normal('b_Intercept', mu=0, sigma=σ, shape=K)\n\n    theta = μ + b_Intercept[bacteria.ID] + β_week * bacteria.week + β_trtDrug * bacteria.trtDrug + β_trtDrugP * bacteria.trtDrugP\n    \n    y_obs = pm.Bernoulli('y_obs', logit_p=theta, observed=bacteria.y)\n    \n    idata_bt = pm.sample()\n    pm.compute_log_prior(idata_bt, var_names=[\"μ\", \"β_week\", \"β_trtDrug\", \"β_trtDrugP\", \"σ\"])\n    pm.compute_log_likelihood(idata_bt)\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (2 chains in 2 jobs)\nNUTS: [μ, β_week, β_trtDrug, β_trtDrugP, σ, b_Intercept]\nSampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 5 seconds.\nWe recommend running at least 4 chains for robust computation of convergence diagnostics\nThe rhat statistic is larger than 1.01 for some parameters. This indicates problems during sampling. See https://arxiv.org/abs/1903.08008 for details\nThe effective sample size per chain is smaller than 100 for some parameters.  A higher number is needed for reliable rhat and ess computation. See https://arxiv.org/abs/1903.08008 for details\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## coming soon\n\n\n\nFrom the power-scaling sensitivity analysis perspective the key element in the previous code-block is that we are specifying the variables we want to use for the prior-powerscaling var_names=[\"μ\", \"β_week\", \"β_trtDrug\", \"β_trtDrugP\", \"σ\"] i.e. we are omitting the b_Intercept variable. This is because we are only interested in power-scaling the top level prior. There are two way to specify the variables for power-scaling, the first is to use the var_names argument when computing the log_prior and/or log_likelihood, as we just did. The second is to use the prior_varnames and likelihood_varnames arguments in the psense-related functions.\nLet’s compute sensitivity diagnostics for all variables except ~b_Intercept, if we want to check the sensitivity of all of them we can do it. The key point with hierarchical models is to not power-scale the lower level priors.\n\nazs.psense_summary(idata_bt, var_names=[\"~b_Intercept\"])\n\n\n\n\n\n\n\n\n\nprior\nlikelihood\ndiagnosis\n\n\n\n\nμ\n0.013\n0.412\n✓\n\n\nβ_week\n0.005\n0.205\n✓\n\n\nβ_trtDrug\n0.007\n0.137\n✓\n\n\nβ_trtDrugP\n0.008\n0.187\n✓\n\n\nσ\n0.013\n0.667\n✓\n\n\n\n\n\n\n\n\nWe see that everything looks fine. If you like to get potentials issues you could try running the model again with a prior like σ = pm.HalfNormal('σ', sigma=1).",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Prior and likelihood sensitivity checks</span>"
    ]
  },
  {
    "objectID": "Chapters/Sensitivity_checks.html#interpreting-sensitivity-diagnostics-summary",
    "href": "Chapters/Sensitivity_checks.html#interpreting-sensitivity-diagnostics-summary",
    "title": "6  Prior and likelihood sensitivity checks",
    "section": "6.2 Interpreting sensitivity diagnostics: Summary",
    "text": "6.2 Interpreting sensitivity diagnostics: Summary\nAs with other diagnostics we need to interpret the results of the sensitivity analysis in the context of the model, the data and the problem we are trying to solve. Context and modelling purpose should always be part of an analysis.\n\n6.2.1 Diagnostic value\nThe sensitivity diagnostic value given by psense and psense_summary is based on a measure of how much the posterior would change if the prior or likelihood is changed. This value is provided for each marginal posterior specified in the var_name argument. In simple models with few parameters, it is reasonable to look at sensitivity for all the parameters. But as model complexity increases, and there are more parameters or strong posterior dependencies, it is better to focus on sensitivity of specific parameters with meaningful interpretations or on derived quantities of interest.\n\n\n6.2.2 Diagnostic messages\nSensitivity diagnostic values are given for both prior and likelihood sensitivity. These values should be considered and interpreted together. Based on the values, a diagnosis is also given. Currently, this is either “strong prior / weak likelihood” (if the prior sensitivity is higher than a threshold and the likelihood sensitivity is lower than a threshold) or “prior-data conflict” (if both types of sensitivity are higher than the threshold).\nThese diagnostic messages do not necessarily indicate problems with the model. They are informative messages that describe the interplay between the chosen prior and likelihood. If your prior is meant to be informative, influence on the posterior is desired and prior-data conflict may not be an issue. However, if you did not put much effort into choosing the priors, these messages can let you know if you should be more deliberate in your prior specification.\n\nStrong prior / weak likelihood. This can occur when:\n\nThe prior is completely dominating the likelihood such that changing the likelihood strength has little to no impact on the posterior. The prior may be extremely informative and a using a weaker prior may remove this domination.\nThe likelihood is uninformative and no information is gained by increasing the strength of the likelihood. The prior will always have an effect in this case.\n\nPrior-data conflict. This can occur when:\n\nThe posterior is sensitive to changes to both the prior and the likelihood. This indicates that the prior and likelihood are both influencing the posterior and may be in conflict with one-another.\n\n\n\n\n6.2.3 What to do with the diagnostics\nSensitivity analysis should be conducted with care, avoiding the repeated adjustment of priors solely to resolve discrepancies or diagnostic warnings. If a prior is modified to address a warning, the change must be justified based on domain expertise, data properties, or model assumptions. Conversely, choosing not to alter the model despite warnings can also be valid if there are compelling reasons to believe the model is sound. In such cases, it is essential to be transparent: report the diagnostic results and provide a clear rationale for disregarding the sensitivity diagnostics.\n\n\n\n\nJohnson, Roger W. 1996. “Fitting Percentage of Body Fat to Simple Body Measurements.” Journal of Statistics Education 4 (1). https://doi.org/10.1080/10691898.1996.11910505.\n\n\nKallioinen, Noa, Topi Paananen, Paul-Christian Bürkner, and Aki Vehtari. 2023. “Detecting and Diagnosing Prior and Likelihood Sensitivity with Power-Scaling.” Statistics and Computing 34 (1): 57. https://doi.org/10.1007/s11222-023-10366-5.\n\n\nNguyen, Hoang-Vu, and Jilles Vreeken. 2015. “Non-Parametric Jensen-Shannon Divergence.” In Machine Learning and Knowledge Discovery in Databases, edited by Annalisa Appice, Pedro Pereira Rodrigues, Vítor Santos Costa, João Gama, Alípio Jorge, and Carlos Soares, 173–89. Cham: Springer International Publishing.\n\n\nVenables, W. N., and B. D. Ripley. 2002. Modern Applied Statistics with S. 4th edition. New York: Springer.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Prior and likelihood sensitivity checks</span>"
    ]
  },
  {
    "objectID": "Chapters/Model_comparison.html",
    "href": "Chapters/Model_comparison.html",
    "title": "7  Model Comparison",
    "section": "",
    "text": "7.1 Overview\nModels are designed as approximations to help us understand a specific problem or a related class of problems. They are not intended to be exact replicas of the real world. In this sense, all models are “wrong”. However, not all models are equally wrong, some are better suited to describing a particular problem. Even more some models could be better to explain some of the observations and other better for some other, for example a model that is good high temperature observations may not be so good for low temperature observations.\nDuring a typical data analysis, it’s common to develop multiple models to fit the same data. These models may differ in aspects such as priors, likelihoods, the inclusion of only linear terms versus adding smooth or interaction terms, and so on. When faced with multiple models, a natural question arises: how should we choose between them?\nUnderstanding the problem at hand can often provide significant guidance. This is usually the case because usually we, as modellers, have knowledge about the problem and about the goals of the analysis, that we did not include in the models we are comparing. For example, if we are interested in making predictions, we may prefer a model that is better at predicting new data, even if we are not able to interpret it parameters. Instead, if we are interested in understanding the underlying processes, we may prefer a model that is simpler but easier to interpret, even if it does not fit the data as well.\nAs we already saw in Chapter 5 prior and posterior predictive checks can also assist in evaluating different models. In some cases, computational considerations like convergence issues discussed in Chapter 4 may influence our choice. Often even tradition and convention play a role in the decision-making process. For example, in some fields, certain models are more commonly used than others, so you may feel pressured to use a model that is more widely know. Of course, we should strive to make scientific decisions based on the data and the problem at hand, rather than on tradition or convention. However, there is no benefit in negating the human-nature of our practices.\nIn this section, we will explore formal methods that complement other tools we have seen to compare models. Hopefully, these tools will help us make more informed decisions.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Model Comparison</span>"
    ]
  },
  {
    "objectID": "Chapters/Model_comparison.html#the-balance-between-simplicity-and-accuracy",
    "href": "Chapters/Model_comparison.html#the-balance-between-simplicity-and-accuracy",
    "title": "7  Model Comparison",
    "section": "7.2 The balance between simplicity and accuracy",
    "text": "7.2 The balance between simplicity and accuracy\nWhen choosing between alternative explanations, there is a principle known as Occam’s razor. In very general terms, this principle establishes that given two or more equivalent explanations for the same phenomenon, the simplest one is the preferred explanation. When the explanations are models, a common criterion for simplicity is the number of parameters in a model.\nAnother factor we generally need to consider when comparing models is their accuracy, that is, how good a model is at fitting the data. According to this criterion, if we have two (or more) models and one of them explains the data better than the other, then that is the preferred model.\nIntuitively, it seems that when comparing models, we tend to prefer those that fit the data best and those that are simpler. But what to do if these two principles conflict? Or more generally, is there a quantitative way to consider both contributions? The short answer is yes. In fact there is more than one way to do it.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Model Comparison</span>"
    ]
  },
  {
    "objectID": "Chapters/Model_comparison.html#predictive-accuracy-measures",
    "href": "Chapters/Model_comparison.html#predictive-accuracy-measures",
    "title": "7  Model Comparison",
    "section": "7.3 Predictive accuracy measures",
    "text": "7.3 Predictive accuracy measures\nIf we evaluate a model solely by it capacity to reproduce the data used to fit it, for instance by measuring the mean quadratic error between observations and predictions, we will likely be overoptimistic about the performance of the model to predict unobserved data. Additionally, for a flexible enough model (and without proper regularization), we may tweak it parameters until we fit the data perfectly. Thus, instead of computing the Within-sample accuracy, that is, the accuracy measured with the same data used to fit the model, we prefer to compute the Out-of-sample accuracy, that is, the accuracy measured with data not used to fit the model.\n\n\n\n\n\n\nNote\n\n\n\nBayesian models trough the use of prior, and the fact that the posterior is computed by marginalizing over those priors, is usually less prone to overfitting than alternative methods. This is less true for more vague priors, and more true for priors inducing a prior predictive distribution compatible with the domain-knowledge. But overall, is not true that we can not overfit Bayesian models. Thus, in practice we often end up needing to compare Bayesian models using some measure of predictive performance or predictive accuracy.\n\n\nThe easier way to compute out-of-sample accuracy is two have at least two datasets, once we use to fit the models, and one we use to evaluate them. There are even more complex ways to partition the data, but the main point for our current discussion is that usually that’s a luxury. Data is valuable, and not using all data to fit models can be a waste of information and resources. As this is a pervasive situation in data analysis, many different methods have been developed in order to evaluate the predictive accuracy of models without wasting data.\nWe re going to discuss two family of methods:\n\nCross-validation: This is an empirical strategy based on dividing the available data into separate subsets that are used to fit and evaluate alternatively. So this is a way to simulate having a hold-out dataset for model evaluation, but actually using all the available data for inference.\nInformation criteria: This is a general term used to refer to various expressions that approximate out-of-sample accuracy as in-sample accuracy plus a term that penalizes model complexity.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Model Comparison</span>"
    ]
  },
  {
    "objectID": "Chapters/Model_comparison.html#information-criteria",
    "href": "Chapters/Model_comparison.html#information-criteria",
    "title": "7  Model Comparison",
    "section": "7.4 Information criteria",
    "text": "7.4 Information criteria\nInformation criteria are a collection of closely related tools used to compare models in terms of goodness of fit and model complexity. In other words, information criteria formalize the intuition we developed at the beginning of the chapter. The exact way these quantities are derived has to do with a field known as Information Theory.\nAn intuitive way to measure how well a model fits the data is to calculate the root mean square error between the data and the predictions made by the model:\n\\[\n\\frac{1}{N} \\sum _{i}^{N} (y_i - \\operatorname{E} (y_i \\mid \\theta))^2\n\\]\n\\(\\operatorname{E} (y_i \\mid \\theta)\\) is the predicted value given the estimated parameters. It is important to note that this is essentially the average of the difference between the observed and predicted data. Taking the square of the errors ensures that differences do not cancel out and emphasizes larger errors compared to other alternatives such as calculating the absolute value.\nThe mean square error may be familiar to us since it is very popular. But if we stop and reflect on this quantity we will see that in principle there is nothing special about it and we could well come up with more general expressions.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Model Comparison</span>"
    ]
  },
  {
    "objectID": "Chapters/Model_comparison.html#entropy",
    "href": "Chapters/Model_comparison.html#entropy",
    "title": "7  Model Comparison",
    "section": "7.5 Entropy",
    "text": "7.5 Entropy\nFor a probability distribution with \\(N\\) possible different events which each possible event having probability \\(p_i\\), the entropy is defined as:\n\\[\nH(p) = - \\mathbb{E}[\\log{p}] = -\\sum_i^N p_i \\log{p_i}\n\\]\nEntropy is a measure of the uncertainty of a distribution. In this sense we can say that the uncertainty contained in a distribution is the logarithm of the average probability of an event. If only one event is possible the entropy will be 0, if all events have the same probability the entropy will be maximum. The concept of entropy can be extended to continuous distributions, but we will not go into those details. Figure Figure 7.1 shows the entropy of a Bernoulli distribution for four different values of the probability of success. We can see that the entropy is maximum when the probability of success is 0.5 and minimum when the probability of success is 0.\n\n\nCode\n_, axes = plt.subplots(2, 2, sharex=True, sharey=True)\n\nfor p, ax in zip([0.5, 0.1, 0.9, 0.0001], axes.ravel()):\n    dist = pz.Bernoulli(p=p)\n    dist.plot_pdf(ax=ax, legend=False)\n    ax.set_title(f\"Entropy={dist.entropy():.2f}\")\n    ax.set_ylim(-0.05, 1.05)\n\n\n\n\n\n\n\n\nFigure 7.1: Entropy of a Bernoulli distribution as a function of the probability of success\n\n\n\n\n\nThe concept of entropy appears many times in statistics. It can be useful, for example when defining priors. In general we want to use a prior that has maximum entropy given our knowledge (see for example PreliZ’s maxent function). And also when comparing models as we will see in the next section.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Model Comparison</span>"
    ]
  },
  {
    "objectID": "Chapters/Model_comparison.html#sec-kl-divergence",
    "href": "Chapters/Model_comparison.html#sec-kl-divergence",
    "title": "7  Model Comparison",
    "section": "7.6 KL divergence",
    "text": "7.6 KL divergence\nThe Kulback-Leibler divergence is a measure of how one probability distribution diverges from a second expected probability distribution. Suppose we have a target distribution \\(p\\), with which we cannot work directly and we only have access to a different distribution that we will call \\(q\\). We want to evaluate how well \\(q\\) approximates \\(p\\). One way to do this is to measure the Kulback-Leibler divergence between \\(p\\) and \\(q\\). If \\(q\\) is a parametric family we can find the parameters making \\(q\\) as close to \\(p\\) as possible by minimizing the KL divergence. The KL divergence is defined as:\n\\[\n\\mathbb{KL}(p \\parallel q) =  \\overbrace{-\\sum_i^N p_i \\log{q_i}}^{H(p, q)} -  \\overbrace{\\left(-\\sum_{i}^n p_i \\log{p_i}\\right)}^{H(p)}\n\\]\nNotice that it has two components, the entropy of \\(p\\), \\(H(p)\\) and the cross entropy \\(H(p, q)\\), that is, the entropy of \\(q\\) but evaluated according to \\(p\\). This may seem somewhat abstract, but if we think that we have \\(N\\) samples that we assume come from an unknown distribution \\(p\\) and we have a model described by \\(q(y \\mid \\theta)\\), then we will see that we are describing a typical situation in data analysis.\nAccording to this expression, the KL divergence represents the “extra” entropy that we introduce when approximating \\(p\\) by \\(q\\). It is common to find it written in other ways, such as:\n\\[\n\\mathbb{KL}(p \\parallel q) \\quad=\\quad- \\sum_i^N p_i (\\log{q_i} - \\log{p_i}) \\quad=\\quad \\mathbb{E}_p[\\log{p}] - \\mathbb{E}_p[\\log{q}] \\quad=\\quad \\sum_i^N p_i \\log{\\frac{p_i}{q_i}}\n\\]\nIf \\(p\\) represents the data generating process or the population or the true distribution, and \\(q\\) represents our model. It may seems that this expressions are all useless because we don’t know \\(p\\). That the reason we are trying to fit a model in the first place. But, if our goal is to compare \\(m\\) models represented with \\(q_0, q_1 \\cdots q_m\\), we can can still use the KL divergence to compare them! The reason is that even when we do not know \\(p\\), its entropy is a constant term for all comparisons.\n\\[\n\\begin{split}\n        \\mathbb{KL}(p \\parallel q_0) =&\\; \\mathbb{E}[\\log{p}] - \\mathbb{E}[\\log{q(y \\mid \\theta_0)}] \\\\\n        \\mathbb{KL}(p \\parallel q_1) =&\\; \\mathbb{E}[\\log{p}] - \\mathbb{E}[\\log{q(y \\mid \\theta_1)}] \\\\\n        &\\cdots \\\\\n        \\mathbb{KL}(p \\parallel q_2) =&\\; \\mathbb{E}[\\log{p}] - \\mathbb{E}[\\log{q(y \\mid \\theta_2)}]\n\\end{split}\n\\]\nThis tell us that when comparing models the best model, the best one from the set of compared models, will be the one that has the larger (log-)likelihood value. In other words, minimizing the KL divergence is proportional to maximizing likelihood.\nIn practice we don’t really have \\(\\mathbb{E}[\\log{q}]\\), but we can estimate this quantity from our sample. But we have to be carefull, if we use the sample to estimate the parameters of a model and then use those parameters to estimate \\(\\mathbb{E}[\\log{q}]\\) we will be introducing a bias. We will be overconfident on the ability of our model to explain the data. In the next sections we will see 3 strategies to avoid this problem.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Model Comparison</span>"
    ]
  },
  {
    "objectID": "Chapters/Model_comparison.html#akaike-information-criterion",
    "href": "Chapters/Model_comparison.html#akaike-information-criterion",
    "title": "7  Model Comparison",
    "section": "7.7 Akaike information criterion",
    "text": "7.7 Akaike information criterion\nThe Akaike information criterion (Akaike 1974) (AIC) is a very well-known and widely used information criterion and is defined as:\n\\[\nAIC = -2 \\sum_i^N \\log p(y_i \\mid \\hat{\\theta}_{mle}) + 2 k\n\\]\nWhere, \\(k\\) is the number of model parameters and \\(\\hat{\\theta}_{mle}\\) is the maximum likelihood estimate for \\(\\theta\\). For the rest of our discussion we will omit the constant -2 and write\n\\[\nAIC = \\sum_i^N \\log p(y_i \\mid \\hat{\\theta}_{mle}) - k\n\\]\nIn this way it is easier to see that the Akaike criterion is a penalized maximum likelihood, it becomes smaller the more parameters a model has. Furthermore, this version without the -2 has a clearer correspondence with other expressions which we will see below.\n\n\n\n\n\n\nNote\n\n\n\nThat the number of parameters is a valid penalty criterion follows our intuition, a model with a greater number of parameters is, in general, more flexible. But it is interesting to note that the Akaike’s criterion has a theoretical justification, it is not that Akaike simply thought that using \\(k\\) was a good idea.\n\n\nThe AIC criterion is very useful, but can be very limited for Bayesian models. One reason is that it uses a point estimate of \\(\\theta\\) and not the posterior distribution, hence it discards potentially useful information. Furthermore AIC, from a Bayesian perspective, assumes that priors are flat and therefore AIC is incompatible with informative and/or weakly informative priors. Furthermore, the number of parameters in a model is not always a good measure of its complexity. In general, a regularized model will be a model with less effective number of parameters. For example, when using informative priors or in hierarchical models, parameters becomes interrelated and thus the effective number of parameters can be smaller than the actual number of parameter. AIC has no way to account for this.\nCan we find something like the Bayesian version of AIC? Yes, we can.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Model Comparison</span>"
    ]
  },
  {
    "objectID": "Chapters/Model_comparison.html#elpd",
    "href": "Chapters/Model_comparison.html#elpd",
    "title": "7  Model Comparison",
    "section": "7.8 ELPD",
    "text": "7.8 ELPD\nAs we already saw in the Akaike criterion, the goodness of fit is given by:\n\\[\n\\sum_i^N \\log p(y_i \\mid \\hat{\\theta}_{mle})\n\\]\nBut in Bayesian statistics, we do NOT have a point estimate of \\(\\theta\\). We have a distribution. To account for this we could do:\n\\[\n\\sum_i^N \\log \\int \\ p(y_i \\mid \\theta) \\; p(\\theta \\mid y) d\\theta\n\\]\nIn general we do not have an analytical expression for the posterior, \\(p(\\theta \\mid y)\\), instead we usually work with samples (such as those obtained by MCMC), then we can approximate the above integral by a sum over the \\(S\\) posterior samples:\n\\[\n\\sum_i^N \\log \\left(\\frac{1}{S} \\sum _{j}^S p(y_i \\mid \\theta^j) \\right)\n\\]\nWe will call this quantity the ELPD, which is short for expected log-predictive density. When the likelihood is discrete, we should use “probability” instead of “density”, but it is a common practice to avoid pedantry.\nThe ELPD is more Bayesian way to measure goodness of fit that the term used in AIC, but we are still missing one element, the penalization term.\n## WAIC\nThe Widely applicable information criterion (WAIC) uses the ELPD plus a penalization term (Watanabe 2013).\n\\[\nWAIC = \\sum_i^N \\log \\left(\\frac{1}{S} \\sum _{s}^S p(y_i \\mid \\theta^j) \\right) - \\sum_i^N \\left( V_{j}^S \\log p(y_i \\mid \\theta^j) \\right)\n\\]\nWe can see that penalization term is given by the variance of the log-likelihoods over the \\(S\\) posterior samples. Justifying this term requieres a bit more work, but the intuition is that the variance of the log-likelihoods is a measure of how much variability there is in the predictions made by the model. The more variability, the more flexible the model is. And therefore, the more we should penalize it. Let’s look at a linear model as an example:\n\\[\nY = \\alpha + \\beta X\n\\]\nA model where \\(\\beta=0\\) will be less flexible, since it is equivalent to a model that only has one parameter, \\(alpha\\). In a slightly more subtle way, a model where \\(\\beta\\) varies in a narrow range will be less flexible (more regularized), than a model where \\(\\beta\\) can take any value. WAIC properly formalized this intuition.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Model Comparison</span>"
    ]
  },
  {
    "objectID": "Chapters/Model_comparison.html#cross-validation",
    "href": "Chapters/Model_comparison.html#cross-validation",
    "title": "7  Model Comparison",
    "section": "7.9 Cross validation",
    "text": "7.9 Cross validation\nThere is an alternative route to ELPD penalization. What if we just compute it for unobserved data? This is sometimes done when the size of the dataset is very large. But even then we will risk wasting relevant information. Then a common practice is to use a method called cross-validation.\nCross-validation is a simple and, in most cases, effective solution for comparing models. We take our data and divide it into \\(K\\) slices. We try to keep the portions more or less the same (in size and sometimes also in other characteristics, such as an equal number of classes). We then use \\(K-1\\) portions to train the model and the rest to evaluate it. This process is systematically repeated leaving, for each iteration, a different portion out of the training set and using that portion as the evaluation set. This is repeated until we have completed \\(K\\) rounds of adjustment-evaluation. The accuracy of the model will be the average over the \\(K\\) rounds. This is known as K-fold cross validation. Finally, once we have cross-validated, we use all the data to fit our model and this is the model that is used to make predictions or for any other purpose.\n\nWhen \\(K\\) is equal to the number of data points, we get what is known as leave-one-out cross-validation (LOO-CV).\nCross validation is a routine practice in machine learning. And we have barely described the most essential aspects of this practice. For more information you can read The Hundred-Page Machine Learning Book or Python Machine Learning, by Sebastian Raschka.\nOne downside of cross-validation is that it is computationally expensive. We need to fit the model \\(K\\) times, and if we have a large dataset, this can be very expensive. But lucky us, by being Bayesian we can approximately compute LOO-CV in a very fast way.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Model Comparison</span>"
    ]
  },
  {
    "objectID": "Chapters/Model_comparison.html#elpd-and-cross-validation",
    "href": "Chapters/Model_comparison.html#elpd-and-cross-validation",
    "title": "7  Model Comparison",
    "section": "7.10 ELPD and cross validation",
    "text": "7.10 ELPD and cross validation\nThe LOO-CV ELPD can be computed as:\n\\[\n\\sum_i^N  \\log \\left( \\frac{1}{S}\\sum_j^S \\mathbin{\\color{#E9692C}{p(y_i \\mid \\theta _{-i}^j)}} \\right)\n\\]\nwhere \\(_{-i}\\) means that we leave observation \\(i\\) out. A Naive implementation of this estimation requires that we estimate as many posterior distributions as observations we have, since for each of them we will eliminate one observation. However, this is not necessary since it is possible to estimate \\(\\color{#E9692C}{p(y_i \\mid \\theta _{-i}^j})\\) using Importance Sampling.\nBefore continuing with our agenda, we need to take a short detour.\n\n7.10.1 Importance Sampling\nThis is a technique for estimating properties of a distribution of interest \\(f\\), given that we only have samples from a distribution \\(g\\). Using importance sampling makes sense, for example, when it is simpler to sample \\(g\\) than \\(f\\).\nIf we have a set of samples of the random variable \\(X\\) and we can evaluate \\(g\\) and \\(f\\) point-wise, we can calculate the importance weights as:\n\\[\\begin{equation}\nw_i = \\frac{f(x_i)}{g(x_i)}\n\\end{equation}\\]\nComputationally it looks like this:\n\nExtract \\(N\\) samples \\(x_i\\) from \\(g\\)\nCalculate the probability of each sample \\(g(x_i)\\)\nEvaluate \\(f\\) on the \\(N\\) samples \\(f(x_i)\\)\nCalculate the importance weights \\(w_i = \\frac{f(x_i)}{g(x_i)}\\)\n\nOnce the weights \\(w_i\\) are obtained, we can use them to estimate properties of \\(f\\), its density, moments, quantiles, etc.\nIn the code-block below \\(g\\) is a Normal distribution and \\(f\\) is a Gamma and we use importance sampling to estimate the PDF of \\(f\\). This is just a pedagogic example, since we actually have a very direct way to calculate the PDF of a Gamma. But in practice \\(f\\) can be a much more complex object.\n\ng = pz.Normal(0, 10)\nsamples = g.rvs(1000)\nf = pz.Gamma(mu=4, sigma=1.5)\n\nw = f.pdf(samples) / g.pdf(samples)\n\nax = f.plot_pdf()\nax.hist(samples, bins=100, density=True, weights=w, \n        alpha=0.6, color='C2', label='Weighted samples')\nax.set_xlim(0, 15);\n\n\n\n\n\n\n\n\nWhen doing importance sampling, the more similar \\(g\\) and \\(f\\) are, the better the results will be. In practice, inferences are more reliable when \\(g\\) has a larger support than \\(f\\), that is, when it is “wider”, intuitively we need the samples of \\(g\\) to cover the entire support of \\(f\\), or actually to ensure we are not missing any high-density regions.\n\n\n7.10.2 Coming back to our discussion\nNow that we have a better idea of ​​importance sampling let’s see how we can use it. The distribution we know is the posterior distribution, and the one we want to approximate by importance sampling is the posterior distribution leaving one out \\(p(y_i \\mid \\theta_{-i}^j)\\). Therefore, the importance weights that we are interested in calculating are:\n\\[\nw_i^j \\propto \\frac{p(\\theta^j \\mid y_{-i} )}{p(\\theta^j \\mid y)} \\propto \\frac{p(\\theta) \\prod_{i\\not =-i}^n p(y_i \\mid \\theta)}{p(\\theta) \\prod_i^n p(y_i \\mid \\theta)} \\propto \\frac{1}{p(y_i \\mid \\theta^j) }\n\\]\nThat is the all terms in the numerator and the denominator will cancel out except for only one! The likelihood for the observation we want to remove, that will remain in the denominator. Note that these weights are not normalized, so to use them we need to divide each weight by the total sum of the weights. Then we can use the weights to estimate the ELPD as:\n\\[\n\\sum_i^N \\log \\left( \\frac{1}{S} \\sum_j^S w_i^j p(y_i \\mid \\theta^j) \\right)\n\\]\nThis result is fantastic news, it tells us that we can calculate the leave-one-out cross-validation ELPD, without having to refit the model \\(N\\) times.\nThe catch, because there is always a catch! Is that the expected \\(p(\\theta^j \\mid y_{-i} )\\) is “wider” than \\(p(\\theta^j \\mid y)\\), since it is a posterior distribution estimated with one less observation. This is the opposite to the ideal case in importance sampling. For many cases the difference may not be relevant, since eliminating an observation can lead to a practically equivalent posterior distribution. But in some cases the difference can be relatively large. When? Well, the more “influential” the observation the larger then difference when we remove it.\nIn terms of importance sampling this translates into weights with greater relative importance and which therefore tend to dominate the estimation. One way to correct this problem is to simply truncate the “too high” weights, this brings other problems that we are not going to discuss. Another way is to rely on theory. The theory indicates that under certain conditions high weights are distributed according to a Pareto pattern. So instead of truncating them we can fit them to a Pareto distribution and then replace them with values ​​obtained from that distribution. This is a form of smoothing that, within a certain range, allows stabilizing the importance sampling estimate, since it will make some “very large” values ​​not so large.\nWhen we combine all these ideas we get a method called Pareto-Smooth Importance Sampling Leave-One-Out Cross Validation (Vehtari, Gelman, and Gabry 2017; Yao et al. 2018), which is abbreviated as PSIS-LOO-CV. Since the name and acronym are horribly long and difficult to pronounce we will call it LOO.\n\n\n7.10.3 Calculating LOO\nAfter all this introduction, calculating LOO may seem somewhat disappointing. We just need to call ArviZ’s loo function and pass it an DataTree object containing a log-likelihood group.\nFor the following example we are using a DataTree distributed with ArviZ. More details about the model in Chapter 8. For the moment we only need to know that is a model with two sets of observations, home_points and away_points. We can compute LOO for each one of those.\n\ndt_rugby = azb.load_arviz_data('rugby')\nelpd = azs.loo(dt_rugby, var_name=\"home_points\")\nelpd\n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/arviz_stats/loo.py:902: UserWarning: Estimated shape parameter of Pareto distribution is greater than 0.70 for one or more samples. You should consider using a more robust model, this is because importance sampling is less likely to work well if the marginal posterior and LOO posterior are very different. This is more likely to happen with a non-robust model and highly influential observations.\n  warnings.warn(\n\n\nComputed from 2000 posterior samples and 60 observations log-likelihood matrix.\n\n         Estimate       SE\nelpd_loo  -282.09    26.49\np_loo       25.16        -\n\nThere has been a warning during the calculation. Please check the results.\n------\n\nPareto k diagnostic values:\n                         Count   Pct.\n(-Inf, 0.70]   (good)       57   95.0%\n   (0.70, 1]   (bad)         3    5.0%\n    (1, Inf)   (very bad)    0    0.0%\n\n\nWe can see that we get the estimated ELPD value using LOO and its standard error. p_loo can be roughly interpreted as the effective number of parameters. For some models this number should be close to the actual number of parameters, for models with regularization, like hierarchical models, it should be less than the actual number of parameters.\n\n\n7.10.4 Comparing models with LOO\n\nPyMCCmdStanPy\n\n\n\ntarget = pz.StudentT(nu=4, mu=0, sigma=1).rvs(200)\n\nwith pm.Model() as model_n:\n    μ = pm.Normal(\"μ\", 0, 1)\n    σ = pm.HalfNormal(\"σ\", 1)\n    pm.Normal(\"y\", μ, σ, observed=target)\n    idata_n = pm.sample(idata_kwargs={\"log_likelihood\":True})\n    \nwith pm.Model() as model_t:\n    μ = pm.Normal(\"μ\", 0, 1)\n    σ = pm.HalfNormal(\"σ\", 1)\n    ν = pm.Exponential(\"ν\", scale=30)\n    pm.StudentT(\"y\", nu=ν, mu=μ, sigma=σ, observed=target)\n    idata_t = pm.sample(idata_kwargs={\"log_likelihood\":True})\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (2 chains in 2 jobs)\nNUTS: [μ, σ]\nSampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 1 seconds.\nWe recommend running at least 4 chains for robust computation of convergence diagnostics\nInitializing NUTS using jitter+adapt_diag...\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pytensor/link/c/cmodule.py:2959: UserWarning: PyTensor could not link to a BLAS installation. Operations that might benefit from BLAS will be severely degraded.\nThis usually happens when PyTensor is installed via pip. We recommend it be installed via conda/mamba/pixi instead.\nAlternatively, you can use an experimental backend such as Numba or JAX that perform their own BLAS optimizations, by setting `pytensor.config.mode == 'NUMBA'` or passing `mode='NUMBA'` when compiling a PyTensor function.\nFor more options and details see https://pytensor.readthedocs.io/en/latest/troubleshooting.html#how-do-i-configure-test-my-blas-library\n  warnings.warn(\nMultiprocess sampling (2 chains in 2 jobs)\nNUTS: [μ, σ, ν]\nSampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 2 seconds.\nWe recommend running at least 4 chains for robust computation of convergence diagnostics\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## coming soon\n\n\n\n\ncmp_df = azs.compare({'model_n':idata_n, 'model_t':idata_t})\ncmp_df\n\n\n\n\n\n\n\n\n\nrank\nelpd\np\nelpd_diff\nweight\nse\ndse\nwarning\n\n\n\n\nmodel_t\n0\n-341.206191\n3.092518\n0.000000\n0.978414\n15.464412\n0.000000\nFalse\n\n\nmodel_n\n1\n-369.101417\n5.773138\n27.895227\n0.021586\n24.763160\n15.634354\nFalse\n\n\n\n\n\n\n\n\nIn the rows we have the compared models and in the columns we have\n\nrank: the order of the models (from best to worst)\nelpd_loo: the point estimate of the ELPD using LOO\np_loo: the effective number of parameters\nelpd_diff: the difference between the ELPD of the best model and the other models\nweight: the relative weight of each model. If we wanted to make predictions by combining the different models, instead of choosing just one, this would be the weight we should assign to each model. In this case we see that model_t takes all the weight.\nse: the standard error of the ELPD\ndse: the standard error of the differences\nwarning: a warning about whether there is at least one high k value\nscale: the scale on which the ELPD is calculated\n\nWe can obtain similar information, but graphically, using the azp.plot_compare function\n\nazp.plot_compare(cmp_df);\n\n\n\n\n\n\n\n\n\nThe open circles represent the ELPD values ​​and black lines the standard error.\nThe highest ELPD value is indicated with a vertical dashed gray line for easy comparison with other values.\nFor all models except the best, we also obtain a triangle indicating the value of the ELPD difference between each model and the best model. The gray error bar indicating the standard error of the differences between the point estimates.\n\nThe simplest way to use information criteria is to choose a single model. Simply choose the model with the highest ELPD value. If we follow this rule we will have to accept that the quadratic model is the best. Even if we take into account the standard errors we can see that they do not overlap. Which gives us some security that the models are indeed different from each other. If, instead, the standard errors overlapped, we should provide a more nuanced answer.\n\n\n7.10.5 Pareto k and LOO diagnostics\nThen we can see a table with the title “Pareto k diagnostic values”. We previously said that we used a method involving a Pareto distribution to regularize the estimation of the importance weights. One of the parameters of that fit is called \\(k\\). Sometimes we call it \\(\\hat k\\) (because is an estimate of \\(k\\)). Since we have a Pareto adjustment per observation we have a \\(k\\) value per observation. This parameter is useful because it tells us two sides of the same story, it tells us when an observation is “very influential” and it tells us that the approximation used by LOO could be failing for that observation.\nAs a general rule, if \\(k\\) is less than 0.7 there are no problems, if it’s between 0.7 and 1 is very likely that we are in trouble and if it’s greater than 1, we are doom. The cut-off value 0.7 is not fixed, it can strictly be lower and depends on the total number of samples of the posterior distribution, 2000, in this example. But when the number of draws is about 2000 we are almost at 0.7. In practice it is common to use sample values ​​of 2000 or larger. Increasing the number of samples from the posterior may reduce the value of \\(k\\) and so we could remove some of these warnings, but in general the number needed will be too large to make any practical sense.\nIt is possible to visualize the values ​​of \\(k\\), using plot_khat\n\n# coming soon\n#azp.plot_khat(elpd, threshold=0.7);\n\nWhile the main function of LOO is to compare models, the values ​​of \\(k\\) can be useful even if we only have only one model. For example, we could have extra knowledge that tells us why these observations are influential, perhaps there was a problem in data collection and the values ​​are incorrect. Or perhaps the values ​​are correct but from the perspective of our model they are influential, “strange”, “surprising”.\nIf \\(k &gt; 0.7\\), the value of p_loo can give us some more information. Where \\(p\\) is the total number of parameters in a model.\n\nIf \\(p_{\\text{loo}} &lt;&lt; p\\) then the model must be misspecified. This should also be seen in post-hoc predictive testing. One solution is to use an overdispersed model (such as changing a Poisson for a NegativeBinomial or for a ZeroInflatedPoisson or HurdlePoisson, or changing a Normal for a Student’s T, etc.). Or it is likely that the model needs more structure or complexity, perhaps we need a non-linear term, etc.\nIf \\(p_{\\text{loo}} &lt; p\\) and the observations are relatively few compared to \\(p\\), (say \\(p&gt;N/5\\)). It is likely that we have a model that is too flexible and/or priors that are too vague. This can happen for hierarchical models with very few observations per group or for example for splines with many knots or Gaussian processes with very short scale values.\nIf \\(p_{\\text{loo}} &gt; p\\), then the model has very serious problems. If \\(p&lt;&lt;N\\), then posterior predictive tests should also report problems. If, however, p is relatively large (say \\(p&gt;N/5\\)). So post-hoc predictive testing may not reflect problems.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Model Comparison</span>"
    ]
  },
  {
    "objectID": "Chapters/Model_comparison.html#loo-and-waic",
    "href": "Chapters/Model_comparison.html#loo-and-waic",
    "title": "7  Model Comparison",
    "section": "7.11 LOO and WAIC",
    "text": "7.11 LOO and WAIC\nLOO and WAIC converge asymptotically, and they based on the same set of assumptions. So theoretically they are equivalent. However, in practice LOO is more robust, and also offers us a diagnosis that indicates when it could be failing (this is thanks to the Pareto adjustment). So in practice we prefer LOO.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Model Comparison</span>"
    ]
  },
  {
    "objectID": "Chapters/Model_comparison.html#other-information-criteria",
    "href": "Chapters/Model_comparison.html#other-information-criteria",
    "title": "7  Model Comparison",
    "section": "7.12 Other information criteria",
    "text": "7.12 Other information criteria\nAnother widely used information criterion is DIC, if we use the bayes-o-meter™, DIC is more Bayesian than AIC but less than WAIC. Although still popular, WAIC and mainly LOO have proven to be more useful both theoretically and empirically than DIC. Therefore we DO NOT recommend its use.\nAnother widely used criterion is BIC (Bayesian Information Criteria), like logistic regression and my mother’s dry soup, this name can be misleading. BIC was proposed as a way to correct some of the problems with AIC and the author proposed a Bayesian rationale for it. But BIC is not really Bayesian in the sense that like AIC it assumes flat priors and uses maximum likelihood estimation.\nBut more importantly, BIC differs from AIC and WAIC in its objective. AIC and WAIC try to reflect which model generalizes better to other data (predictive accuracy) while BIC tries to identify which is the correct model and therefore is more related to Bayes factors than with WAIC. Later we will discuss Bayes Factors and see how it differs from criteria such as WAIC and LOO.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Model Comparison</span>"
    ]
  },
  {
    "objectID": "Chapters/Model_comparison.html#bayes-factors",
    "href": "Chapters/Model_comparison.html#bayes-factors",
    "title": "7  Model Comparison",
    "section": "7.13 Bayes factors",
    "text": "7.13 Bayes factors\nAn alternative to cross-validation, approximate cross-validation with LOO and information criteria is Bayes factors. It is common for Bayes factors to show up in the literature as a Bayesian alternative to frequentist hypothesis testing.\nWe can compare \\(K\\) models by computing their marginal likelihood, \\(p(y \\mid M_k)\\), i.e., the probability of the observed data \\(Y\\) given the model \\(M_K\\). The marginal likelihood is the normalization constant of Bayes’ theorem. We can see this if we write Bayes’ theorem and make explicit the fact that all inferences depend on the model.\n\\[\np (\\theta \\mid Y, M_k ) = \\frac{p(Y \\mid \\theta, M_k) p(\\theta \\mid M_k)}{p(Y \\mid M_k)}\n\\]\nwhere, \\(Y\\) is the data, \\(\\theta\\) is the parameters, and \\(M_K\\) is a model out of \\(K\\) competing models.\nIf our main objective is to choose only one model, the best from a set of models, we can choose the one with the largest value of \\(p(y \\mid M_k)\\). This is fine if we assume that all models have the same prior probability. Otherwise, we must calculate:\n\\[\np(M_k \\mid y) \\propto p(y \\mid M_k) p(M_k)\n\\]\nIf, instead, our main objective is to compare models to determine which are more likely and to what extent, this can be achieved using the Bayes factors:\n\\[\nBF_{01} = \\frac{p(y \\mid M_0)}{p(y \\mid M_1)}\n\\]\nThat is the ratio between the marginal likelihood of two models. The higher the value of \\(BF_{01}\\), the better the model in the numerator (\\(M_0\\) in this example). To facilitate the interpretation of the Bayes factors, and to put numbers into words, Harold Jeffreys proposed a scale for their interpretation, with levels of support or strength, see the following table.\n\n\n\nBayes Factor\nSupport\n\n\n\n\n1–3\nAnecdotal\n\n\n3–10\nModerate\n\n\n10–30\nStrong\n\n\n30–100\nVery Strong\n\n\n&gt;100\nExtreme\n\n\n\nKeep in mind that if you get numbers below 1, then the support is for \\(M_1\\), i.e., the model in the denominator. Tables are also available for those cases, but notice that you can simply take the inverse of the obtained value.\nIt is very important to remember that these rules are just conventions – simple guides at best. Results should always be put in the context of our problems and should be accompanied by enough detail so that others can assess for themselves whether they agree with our conclusions. The proof necessary to ensure something in particle physics, or in court, or to decide to carry out an evacuation in the face of a looming natural catastrophe is not the same.\n\n7.13.1 Some observations\nWe will now briefly discuss some key facts about the marginal likelihood:\n\nThe good: Occam’s razor included. Models with lots of parameters have a higher penalty than models with few parameters. The intuitive reason is that the greater the number of parameters, the more the prior extends with respect to the likelihood. An example where it is easy to see this is with nested models: for example, a polynomial of order 2 “contains” the models polynomial of order 1 and polynomial of order 0.\nThe bad: For many problems, the marginal likelihood cannot be calculated analytically. Also, approximating it numerically is usually a difficult task that in the best of cases requires specialized methods and, in the worst case, the estimates are either impractical or unreliable. In fact, the popularity of the MCMC methods is that they allow obtaining the posterior distribution without the need to calculate the marginal likelihood.\nThe ugly: The marginal likelihood depends very sensitively on the prior distribution of the parameters in each model \\(p(\\theta_k \\mid M_k)\\).\n\nIt is important to note that the good and the ugly points are related. Using marginal likelihood to compare models is a good idea because it already includes a penalty for complex models (which helps us prevent overfitting), and at the same time, a change in the prior will affect the marginal likelihood calculations. At first, this sounds a bit silly; we already know that priors affect calculations (otherwise we could just avoid them). But we are talking about changes in the prior that would have a small effect in the posterior but a great impact on the value of the marginal likelihood.\nThe use of Bayes factors is often a watershed among Bayesians. The difficulty of its calculation and the sensitivity to the priors are some of the arguments against it. Another reason is that, like p-values and hypothesis testing in general, Bayes factors favor dichotomous thinking over the estimation of the “effect size.” In other words, instead of asking ourselves questions like: How many more years of life can a cancer treatment provide? We end up asking if the difference between treating and not treating a patient is “statistically significant.” Note that this last question can be useful in some contexts. The point is that in many other contexts, this type of question is not the question that interests us; we’re only interested in the one that we were taught to answer.\n\n\n7.13.2 Calculation of Bayes factors\nThe marginal likelihood (and the Bayes factors derived from it) is generally not available in closed form, except for a few models. For this reason, many numerical methods have been devised for its calculation. Some of these methods are so simple and naive that they work very poorly in practice. We are going to discuss only one way to compute them, once that can be applied under some particular cases.\n\n\n7.13.3 Savage–Dickey ratio\nThere are times when we want to compare a null hypothesis \\(H_0\\) (or null model) against an alternative \\(H_1\\) hypothesis. For example, to answer the question “Is this coin biased?”, we could compare the value \\(\\theta = 0.5\\) (representing no bias) with the output of a model in which we allow \\(\\theta\\) to vary. For this type of comparison, the null model is nested within the alternative, which means that the null is a particular value of the model we are building. In those cases, calculating the Bayes factor is very easy and does not require any special methods. We only need to compare the prior and posterior evaluated at the null value (for example, \\(\\theta = 0.5\\)) under the alternative model. We can see that this is true from the following expression:\n\\[\nBF_{01} = \\frac{p(y \\mid H_0)}{p(y \\mid H_1)} \\frac{p(\\theta=0.5 \\mid y, H_1)}{p(\\theta=0.5 \\mid H_1)}\n\\]\nThis is true only when \\(H_0\\) is a particular case of \\(H_1\\), see.\nLet’s do it. We only need to sample the prior and posterior for a model. Let’s try the BetaBinomial model with a Uniform prior:\n\nPyMCCmdStanPy\n\n\n\ny = np.repeat([1, 0], [50, 50])  # 50 heads, 50 tails\nwith pm.Model() as model_uni:\n    a = pm.Beta(\"a\", 1, 1)\n    yl = pm.Bernoulli(\"yl\", a, observed=y)\n    idata_uni = pm.sample(2000, random_seed=42)\n    idata_uni.extend(pm.sample_prior_predictive(8000))\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (2 chains in 2 jobs)\nNUTS: [a]\nSampling 2 chains for 1_000 tune and 2_000 draw iterations (2_000 + 4_000 draws total) took 1 seconds.\nWe recommend running at least 4 chains for robust computation of convergence diagnostics\nSampling: [a, yl]\n\n\n\n\n\n\n\n\n\n\n## coming soon\n\n\n\nAnd now we call azp.plot_bf\n\nazp.plot_bf(idata_uni, var_name=\"a\", ref_val=0.5);\n\n\n\n\n\n\n\n\nIn the previous Figure we can see one KDE for the prior (black) and one for the posterior (gray). The two black dots show that we evaluated both distributions at the value 0.5. We can see that the Bayes factor in favor of the null hypothesis, BF_01, is \\(\\approx 8\\), which we can interpret as moderate evidence in favor of the null hypothesis.\nAs we have already discussed, the Bayes factors measure which model, as a whole, is better at explaining the data. This includes the prior, even for models that the prior has a relatively low impact on the computation of the posterior. We can also see this prior effect by comparing a second model to the null model.\nIf, instead, our model were a BetaBinomial with a prior Beta(30, 30), the BF_01 would be lower ( on the Jeffrey scale). This is because, according to this model, the value of \\(\\theta=0.5\\) is much more likely a priori than for a Uniform prior, and therefore the prior and posterior will be much more similar. That is, it is not very to see that the posterior is concentrated around 0.5 after collecting data. Don’t just believe me, let’s calculate it:\n\nPyMCCmdStanPy\n\n\n\nwith pm.Model() as model_conc:\n    a = pm.Beta(\"a\", 30, 30)\n    yl = pm.Bernoulli(\"yl\", a, observed=y)\n    idata_conc = pm.sample(2000, random_seed=42)\n    idata_conc.extend(pm.sample_prior_predictive(8000))\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (2 chains in 2 jobs)\nNUTS: [a]\nSampling 2 chains for 1_000 tune and 2_000 draw iterations (2_000 + 4_000 draws total) took 1 seconds.\nWe recommend running at least 4 chains for robust computation of convergence diagnostics\nSampling: [a, yl]\n\n\n\n\n\n\n\n\n\n\n## coming soon\n\n\n\n\nazp.plot_bf(idata_conc, var_name=\"a\", ref_val=0.5);\n\n\n\n\n\n\n\n\nWe can see that the BF_01 is \\(\\approx 1.6\\), which we can interpret as anecdotal evidence in favor of the null hypothesis (see the Jeffreys’ scale, discussed earlier).\n\n\n7.13.4 Bayes factors vs the alternatives\nWe could say that the Bayes factors measure which model, as a whole, is better for explaining the data. This includes the details of the prior, no matter how similar the model predictions are. In many scenarios, this is not what interests us when comparing models. For many real problems prior are not intended to be an accurate description of the True prior distribution of parameters, instead in many problems priors are choosen using some information and with the goal of providing some regulatization. In this and other cases we prefer to evaluate models in terms of how similar their predictions are. For those cases, we can use LOO.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Model Comparison</span>"
    ]
  },
  {
    "objectID": "Chapters/Model_comparison.html#absolute-metrics",
    "href": "Chapters/Model_comparison.html#absolute-metrics",
    "title": "7  Model Comparison",
    "section": "7.14 Absolute metrics",
    "text": "7.14 Absolute metrics\nIn the previous sections we have seen how to compare models using relative metrics. By relative we mean that we are comparing the models with respect to each other. For example, we can say that model A is better than model B because it has a higher ELPD value. But we can not, in general, judge a single model by its ELPD alone. In contrast, sometimes we are interested in absolute metrics. Some common absolute metrics are the root mean square error (RMSE), the mean absolute error (MAE), the coeﬀicient of determination (\\(R^2\\)), etc. Interestingly, we can use PSIS-LOO-CV procedure to compute the leave-one-out cross-validation version of these metrics.\n\n7.14.1 LOO expectations and metrics\nFrom the PSIS smoothing procedure, we obtain a set of weights. The loo function utilizes these weights to estimate the ELPD we should have obtained if we have performed leave-one-out cross-validation. Furthermore, these weights can be used to estimate other quantities, such as the mean, standard deviation, and quantiles, as if we had performed leave-one-out cross-validation. For example, to compute the 25th and 75th percentiles we use:\n\nazs.loo_expectations(dt_rugby, kind=\"quantile\", probs=[0.25, 0.75])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'home_points' (quantile: 2, match: 60)&gt; Size: 960B\narray([[44.        , 12.        , 25.        , 18.        , 14.        ,\n        32.        , 21.        , 15.        , 16.        , 38.        ,\n        16.        , 20.        , 10.        , 23.        , 10.        ,\n        18.        ,  9.        , 21.        , 45.        , 20.        ,\n        13.        , 33.        , 15.        , 17.        , 14.        ,\n        30.        , 14.        , 11.        , 10.        , 22.        ,\n        33.        , 13.        , 18.        , 11.        , 26.        ,\n        10.        , 22.        , 15.        , 16.        , 37.        ,\n        21.        , 14.        , 37.        , 24.        , 13.        ,\n        10.        , 24.        , 12.        ,  8.        , 18.        ,\n        20.        , 13.        , 20.        , 47.        , 14.        ,\n        12.        , 25.        , 31.        , 14.        , 17.        ],\n       [54.        , 18.        , 32.        , 24.        , 20.        ,\n        41.        , 28.        , 21.        , 23.        , 47.        ,\n        22.        , 28.        , 15.        , 31.        , 15.        ,\n        25.        , 13.        , 28.        , 56.        , 27.        ,\n        19.        , 42.        , 21.        , 23.        , 20.        ,\n        39.        , 19.        , 16.        , 16.        , 28.        ,\n        41.        , 19.        , 25.        , 16.        , 35.        ,\n        16.        , 29.        , 21.        , 22.        , 46.        ,\n        28.        , 20.        , 47.        , 31.        , 19.        ,\n        14.        , 31.        , 17.        , 13.        , 25.        ,\n        27.        , 18.67750933, 27.        , 57.        , 20.        ,\n        17.        , 33.        , 39.        , 20.        , 23.        ]])\nCoordinates:\n  * match      (match) &lt;U16 4kB 'Wales Italy' ... 'Ireland England'\n    home_team  (match) &lt;U8 2kB 'Wales' 'France' 'Ireland' ... 'France' 'Ireland'\n    away_team  (match) &lt;U8 2kB 'Italy' 'England' ... 'Wales' 'England'\n  * quantile   (quantile) float64 16B 0.25 0.75xarray.DataArray'home_points'quantile: 2match: 6044.0 12.0 25.0 18.0 14.0 32.0 21.0 ... 20.0 17.0 33.0 39.0 20.0 23.0array([[44.        , 12.        , 25.        , 18.        , 14.        ,\n        32.        , 21.        , 15.        , 16.        , 38.        ,\n        16.        , 20.        , 10.        , 23.        , 10.        ,\n        18.        ,  9.        , 21.        , 45.        , 20.        ,\n        13.        , 33.        , 15.        , 17.        , 14.        ,\n        30.        , 14.        , 11.        , 10.        , 22.        ,\n        33.        , 13.        , 18.        , 11.        , 26.        ,\n        10.        , 22.        , 15.        , 16.        , 37.        ,\n        21.        , 14.        , 37.        , 24.        , 13.        ,\n        10.        , 24.        , 12.        ,  8.        , 18.        ,\n        20.        , 13.        , 20.        , 47.        , 14.        ,\n        12.        , 25.        , 31.        , 14.        , 17.        ],\n       [54.        , 18.        , 32.        , 24.        , 20.        ,\n        41.        , 28.        , 21.        , 23.        , 47.        ,\n        22.        , 28.        , 15.        , 31.        , 15.        ,\n        25.        , 13.        , 28.        , 56.        , 27.        ,\n        19.        , 42.        , 21.        , 23.        , 20.        ,\n        39.        , 19.        , 16.        , 16.        , 28.        ,\n        41.        , 19.        , 25.        , 16.        , 35.        ,\n        16.        , 29.        , 21.        , 22.        , 46.        ,\n        28.        , 20.        , 47.        , 31.        , 19.        ,\n        14.        , 31.        , 17.        , 13.        , 25.        ,\n        27.        , 18.67750933, 27.        , 57.        , 20.        ,\n        17.        , 33.        , 39.        , 20.        , 23.        ]])Coordinates: (4)match(match)&lt;U16'Wales Italy' ... 'Ireland England'array(['Wales Italy', 'France England', 'Ireland Scotland', 'Ireland Wales',\n       'Scotland England', 'France Italy', 'Wales France', 'Italy Scotland',\n       'England Ireland', 'Ireland Italy', 'Scotland France', 'England Wales',\n       'Italy England', 'Wales Scotland', 'France Ireland', 'Wales England',\n       'Italy Ireland', 'France Scotland', 'England Italy', 'Ireland France',\n       'Scotland Wales', 'Scotland Italy', 'France Wales', 'Ireland England',\n       'Wales Ireland', 'England Scotland', 'Italy France', 'Italy Wales',\n       'Scotland Ireland', 'England France', 'France Italy',\n       'Scotland England', 'Ireland Wales', 'France Ireland', 'Wales Scotland',\n       'Italy England', 'Wales France', 'Italy Scotland', 'England Ireland',\n       'Ireland Italy', 'England Wales', 'Scotland France', 'Wales Italy',\n       'Ireland Scotland', 'France England', 'Scotland Ireland',\n       'England France', 'Italy Wales', 'Italy Ireland', 'Wales England',\n       'France Scotland', 'Scotland Wales', 'Ireland France', 'England Italy',\n       'Wales Ireland', 'Italy France', 'England Scotland', 'Scotland Italy',\n       'France Wales', 'Ireland England'], dtype='&lt;U16')home_team(match)&lt;U8'Wales' 'France' ... 'Ireland'array(['Wales', 'France', 'Ireland', 'Ireland', 'Scotland', 'France',\n       'Wales', 'Italy', 'England', 'Ireland', 'Scotland', 'England',\n       'Italy', 'Wales', 'France', 'Wales', 'Italy', 'France', 'England',\n       'Ireland', 'Scotland', 'Scotland', 'France', 'Ireland', 'Wales',\n       'England', 'Italy', 'Italy', 'Scotland', 'England', 'France',\n       'Scotland', 'Ireland', 'France', 'Wales', 'Italy', 'Wales',\n       'Italy', 'England', 'Ireland', 'England', 'Scotland', 'Wales',\n       'Ireland', 'France', 'Scotland', 'England', 'Italy', 'Italy',\n       'Wales', 'France', 'Scotland', 'Ireland', 'England', 'Wales',\n       'Italy', 'England', 'Scotland', 'France', 'Ireland'], dtype='&lt;U8')away_team(match)&lt;U8'Italy' 'England' ... 'England'array(['Italy', 'England', 'Scotland', 'Wales', 'England', 'Italy',\n       'France', 'Scotland', 'Ireland', 'Italy', 'France', 'Wales',\n       'England', 'Scotland', 'Ireland', 'England', 'Ireland', 'Scotland',\n       'Italy', 'France', 'Wales', 'Italy', 'Wales', 'England', 'Ireland',\n       'Scotland', 'France', 'Wales', 'Ireland', 'France', 'Italy',\n       'England', 'Wales', 'Ireland', 'Scotland', 'England', 'France',\n       'Scotland', 'Ireland', 'Italy', 'Wales', 'France', 'Italy',\n       'Scotland', 'England', 'Ireland', 'France', 'Wales', 'Ireland',\n       'England', 'Scotland', 'Wales', 'France', 'Italy', 'Ireland',\n       'France', 'Scotland', 'Italy', 'Wales', 'England'], dtype='&lt;U8')quantile(quantile)float640.25 0.75array([0.25, 0.75])Indexes: (2)matchPandasIndexPandasIndex(Index(['Wales Italy', 'France England', 'Ireland Scotland', 'Ireland Wales',\n       'Scotland England', 'France Italy', 'Wales France', 'Italy Scotland',\n       'England Ireland', 'Ireland Italy', 'Scotland France', 'England Wales',\n       'Italy England', 'Wales Scotland', 'France Ireland', 'Wales England',\n       'Italy Ireland', 'France Scotland', 'England Italy', 'Ireland France',\n       'Scotland Wales', 'Scotland Italy', 'France Wales', 'Ireland England',\n       'Wales Ireland', 'England Scotland', 'Italy France', 'Italy Wales',\n       'Scotland Ireland', 'England France', 'France Italy',\n       'Scotland England', 'Ireland Wales', 'France Ireland', 'Wales Scotland',\n       'Italy England', 'Wales France', 'Italy Scotland', 'England Ireland',\n       'Ireland Italy', 'England Wales', 'Scotland France', 'Wales Italy',\n       'Ireland Scotland', 'France England', 'Scotland Ireland',\n       'England France', 'Italy Wales', 'Italy Ireland', 'Wales England',\n       'France Scotland', 'Scotland Wales', 'Ireland France', 'England Italy',\n       'Wales Ireland', 'Italy France', 'England Scotland', 'Scotland Italy',\n       'France Wales', 'Ireland England'],\n      dtype='object', name='match'))quantilePandasIndexPandasIndex(Index([0.25, 0.75], dtype='float64', name='quantile'))Attributes: (0)\n\n\nSimilarly we may be interested in computing estimates of leave-one-out predictive metrics given a set of predictions and observations. For instance to compute the root mean square error we can do:\n\nazs.loo_metrics(dt_rugby, kind=\"rmse\", var_name=\"home_points\")\n\nrmse(mean=11.0, se=1.2)\n\n\nNotice that for loo_metrics if we have more than one variable we must specify the variable that we care using the var_names argument, like in the previous example.\n\n\n7.14.2 LOO-PIT\nAnother quantity of interest that we can obtain via PSIS-LOO-CV is the PIT values. As already mentioned in Section 5.2.4, we often are interested in computing:\n\\[\np(\\tilde y_i \\le y_i \\mid y_{-i})\n\\]\nThat is, we are evaluating the model’s ability to predict an observation when we remove that observation from the observed data. We can use PSIS-LOO_CV to estimate this from a single model fit.\n\nazp.plot_loo_pit(dt_rugby, var_names=\"home_points\")\n\n\n\n\n\n\n\nFigure 7.2: LOO-PIT plot for the rugby model\n\n\n\n\n\n\n\n\n\nAkaike, H. 1974. “A New Look at the Statistical Model Identification.” IEEE Transactions on Automatic Control 19 (6): 716–23. https://doi.org/10.1109/TAC.1974.1100705.\n\n\nVehtari, Aki, Andrew Gelman, and Jonah Gabry. 2017. “Practical Bayesian Model Evaluation Using Leave-One-Out Cross-Validation and WAIC.” Statistics and Computing 27 (5): 1413–32. https://doi.org/10.1007/s11222-016-9696-4.\n\n\nWatanabe, Sumio. 2013. “A Widely Applicable Bayesian Information Criterion.” Journal of Machine Learning Research 14 (March): 867–97.\n\n\nYao, Yuling, Aki Vehtari, Daniel Simpson, and Andrew Gelman. 2018. “Using Stacking to Average Bayesian Predictive Distributions (with Discussion).” Bayesian Analysis 13 (3): 917–1007. https://doi.org/10.1214/17-BA1091.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Model Comparison</span>"
    ]
  },
  {
    "objectID": "Chapters/Case_study_model_comparison.html",
    "href": "Chapters/Case_study_model_comparison.html",
    "title": "8  Model Comparison (case study)",
    "section": "",
    "text": "8.1 Information criteria for hierarchical and multi-likelihood models\nThere are many situations where one model can be used for several prediction tasks at the same time. Hierarchical models or models with multiple observations are examples of such cases. With two observations for example, the same model can be used to predict only the first observation, only the second or both observations at the same time.\nBefore estimating the predictive accuracy, there are two important questions to answer: what is the predictive task we are interested in and, whether or not the exchangeability criteria is met. This section will show several alternative ways to define the predictive task using the same model.\nWe are going to analyze data from the 2022-2023 season of Spain’s highest men’s football league. In this notebook, we will start from InferenceData files, but the model and data used is also described because they are key to understanding what is going on. If you are interested in the model itself in more depth, or the coding of the models themselves, refer to TODO.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Model Comparison (case study)</span>"
    ]
  },
  {
    "objectID": "Chapters/Case_study_model_comparison.html#the-data",
    "href": "Chapters/Case_study_model_comparison.html#the-data",
    "title": "8  Model Comparison (case study)",
    "section": "8.2 The data",
    "text": "8.2 The data\nThe data used to fit the models are the results of all matches from 2022-2023 and the budget of each team (for the 2nd model only). Our data therefore consists of two tables: one with one row per match, containing the home and away teams and the goals scored by each; another with one row per team, containing the team and its budget.\n\nimport arviz.data.datasets as azd\n\nazd.REMOTE_DATASETS.update({\n    \"laliga_base\": azd.RemoteFileMetadata(\n        name=\"laliga_base\",\n        filename=\"base_model.nc\",\n        url=\"http://figshare.com/ndownloader/files/44240747\",\n        checksum=\"6f39f2646bbef8259f0d8fa3c6d7f6304b9cf6d63f5df7cdae1e6b3a93094fda\",\n        description=\"\"\"Base model for the analysis of LaLiga 2022-2023 results.\"\"\"\n    ),\n    \"laliga_budget\": azd.RemoteFileMetadata(\n        name=\"laliga_budget\",\n        filename=\"budget_model.nc\",\n        url=\"http://figshare.com/ndownloader/files/44240762\",\n        checksum=\"5c77671b98bcf2ae30d45a7ab3fd47b855e285ffe15ce2cd176ca25b1fd369fd\",\n        description=\"\"\"Budget model for the analysis of LaLiga 2022-2023 results.\"\"\"\n    ),\n    \"laliga_nofield\": azd.RemoteFileMetadata(\n        name=\"laliga_nofield\",\n        filename=\"nofield_model.nc\",\n        url=\"http://figshare.com/ndownloader/files/44240807\",\n        checksum=\"3e4910690cb2d8428e6486ba9973921d1b195bb8f14e2136422a0fc5d953d8e8\",\n        description=\"\"\"No field effect model for the analysis of LaLiga 2022-2023 results.\"\"\"\n    )\n})",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Model Comparison (case study)</span>"
    ]
  },
  {
    "objectID": "Chapters/Case_study_model_comparison.html#base-model",
    "href": "Chapters/Case_study_model_comparison.html#base-model",
    "title": "8  Model Comparison (case study)",
    "section": "8.3 Base model",
    "text": "8.3 Base model\nThe model used is taken from this blog post which was added as an example notebook to PyMC docs.\nWe are trying to model a league in which all teams play against each other twice. We indicate the number of goals scored by the home and the away team in the \\(m\\)-th match of the season (\\(M\\) matches) as \\(y_{m,h}\\) and \\(y_{m,a}\\) respectively. The model assumes the goals scored by a team follow a Poisson distribution:\n\\[y_{m,f} | \\theta_{m,f} \\sim \\text{Poiss}(\\theta_{m,f})\\]\nwhere \\(f = {h, a}\\) indicates the field, representing either home or away team. We will therefore start with a model containing two observation vectors: \\(\\mathbf{y_h} = (y_{1,h}, y_{2,h}, \\dots, y_{M,h})\\) and \\(\\mathbf{y_a} = (y_{1,a}, \\dots, y_{M,a})\\). In order to take into account each team’s scoring and defensive power and also the advantage of playing home, we will use different formulas for \\(\\theta_{m,h}\\) and for \\(\\theta_{m,a}\\):\n\\[\n\\begin{align}\n\\theta_{m,h} &= \\alpha + home + atts_{home\\_team} + defs_{away\\_team}\\\\\n\\theta_{m,a} &= \\alpha + atts_{away\\_team} + defs_{home\\_team}\n\\end{align}\n\\]\nThe expected number of goals score by the home team \\(\\theta_{m,h}\\) depends on an intercept (\\(\\alpha\\)), \\(home\\) to quantify the home advantage, on the attacking power of the home team and on the defensive power of the away team. Similarly, the expected number of goals score by the away team \\(\\theta_{m,a}\\) also depends on the intercept but not on the home advantage, and now, consequently, we use the attacking power of the away team and the defensive power of the home team.\nSumming up and including the priors, our base model is the following one:\n\\[\n\\begin{align}\n\\alpha &\\sim \\text{Normal}(0,5) \\qquad &\\text{scalar} \\\\\nhome &\\sim \\text{Normal}(0,5) \\qquad &\\text{scalar} \\\\\nsd_{att} &\\sim \\text{HalfStudentT}(3,2.5) \\qquad &\\text{scalar} \\\\\nsd_{def} &\\sim \\text{HalfStudentT}(3,2.5) \\qquad &\\text{scalar} \\\\\natts_* &\\sim \\text{Normal}(0,sd_{att}) \\qquad &\\text{shape (T,)} \\\\\ndefs_* &\\sim \\text{Normal}(0,sd_{def}) \\qquad &\\text{shape (T,)} \\\\\natts &= atts_* - \\text{mean}(atts_*) \\qquad &\\text{shape (T,)} \\\\\ndefs &= defs_* - \\text{mean}(defs_*) \\qquad &\\text{shape (T,)} \\\\\n\\mathbf{y}_h &\\sim \\text{Poiss}(\\theta_h) \\qquad &\\text{shape (M,)} \\\\\n\\mathbf{y}_a &\\sim \\text{Poiss}(\\theta_a) \\qquad &\\text{shape (M,)}\n\\end{align}\n\\]\nwhere \\(\\theta_j\\) has been defined above.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Model Comparison (case study)</span>"
    ]
  },
  {
    "objectID": "Chapters/Case_study_model_comparison.html#budget-model",
    "href": "Chapters/Case_study_model_comparison.html#budget-model",
    "title": "8  Model Comparison (case study)",
    "section": "8.4 Budget model",
    "text": "8.4 Budget model\nThe budget model only represents a slight variation on the base model, adding two new parameters and modifying \\(atts\\) and \\(defs\\) variables:\n\\[\n\\begin{align}\nbudget_{att} &\\sim \\text{Normal}(0,5) \\qquad &\\text{scalar} \\\\\nbudget_{def} &\\sim \\text{Normal}(0,5) \\qquad &\\text{scalar} \\\\\natts &= atts_* - \\text{mean}(atts_*) + budget_{att} \\log{\\mathbf{b}} \\qquad &\\text{shape (T,)} \\\\\ndefs &= defs_* - \\text{mean}(defs_*) + budget_{def} \\log{\\mathbf{b}} \\qquad &\\text{shape (T,)} \\\\\n\\end{align}\n\\]\nwith \\(\\mathbf{b} = (b_1, b_2, \\dots, b_T)\\) the budgets of each team.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Model Comparison (case study)</span>"
    ]
  },
  {
    "objectID": "Chapters/Case_study_model_comparison.html#no-field-effect-model",
    "href": "Chapters/Case_study_model_comparison.html#no-field-effect-model",
    "title": "8  Model Comparison (case study)",
    "section": "8.5 No field effect model",
    "text": "8.5 No field effect model\nThis third model is another variation on the base model, where we remove the \\(home\\) variable. Thus, the \\(\\theta\\) variables become:\n\\[\n\\begin{align}\n\\theta_{m,h} &= \\alpha + atts_{home\\_team} + defs_{away\\_team}\\\\\n\\theta_{m,a} &= \\alpha + atts_{away\\_team} + defs_{home\\_team}\n\\end{align}\n\\]",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Model Comparison (case study)</span>"
    ]
  },
  {
    "objectID": "Chapters/Case_study_model_comparison.html#variable-and-index-glossary",
    "href": "Chapters/Case_study_model_comparison.html#variable-and-index-glossary",
    "title": "8  Model Comparison (case study)",
    "section": "8.6 Variable and index glossary",
    "text": "8.6 Variable and index glossary\n\nMatches. The total number of matches in the season, 380. \\(M\\) denotes the total, and we use \\(m\\) as the index going from \\(1\\) to \\(M\\).\nTeams. The number of teams in the league, 20. \\(T\\) denotes the total, and we use \\(t\\) as the index going from \\(1\\) to \\(T\\).\nField. The field identifier. Two teams play in each game, one being the home team, the other the away one. We use \\(f\\) as the index indicating the field, which can take only two values \\(h\\) or \\(a\\).\nArbitrary index. For theoretical concepts, we use \\(i\\) to indicate an arbitrary index.\n\n\n# load data\nbase_idata = az.load_arviz_data(\"laliga_base\")\nbudget_idata = az.load_arviz_data(\"laliga_budget\")\nnofield_idata = az.load_arviz_data(\"laliga_nofield\")\n\nmodel_dict = {\"base\": base_idata, \"budget\": budget_idata, \"nofield\": nofield_idata}",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Model Comparison (case study)</span>"
    ]
  },
  {
    "objectID": "Chapters/Case_study_model_comparison.html#information-criterion-calculation",
    "href": "Chapters/Case_study_model_comparison.html#information-criterion-calculation",
    "title": "8  Model Comparison (case study)",
    "section": "8.7 Information criterion calculation",
    "text": "8.7 Information criterion calculation\nDue to the presence of the two likelihoods in our model, we cannot call az.loo or az.waic straight away because the predictive task to evaluate is ambiguous. The calculation of information criteria requires pointwise likelihood values, \\(p(y_i|\\theta)\\) with \\(y_i\\) indicating observation \\(i\\)-th and \\(\\theta\\) representing all the parameters in the model. We need to define \\(y_i\\), what does one observation represent in our model.\nAs we were introducing above, this model alone can tackle several predictive tasks. These predictive tasks can be identified by the definition of one observation which at the same time defines how are pointwise likelihood values to be calculated. Here are some examples:\n\nWe could be a group of students supporting different teams with budget to travel only to one away match of our respective teams. We may want to travel to the match where our team will score the most goals (while being the away team and also independently of the winner of the match). We will therefore assess the predictive accuracy of our model using only \\(\\mathbf{y}_a\\).\nWe could also be football fans without any clear allegiance who love an intense match between two teams of similar strength. Based on previous experience, we may consider matches that end up 3-3 or 4-4 the ones that better fit our football taste. Now we need to assess the predictive accuracy using the result of the whole match.\nEven another alternative would be wanting to be present at the match where a single team scores the most goals. In this situation, we would have to put both home and away goals in the same bag and assess the predictive accuracy on the ability to predict values from this bag, we may call the observations in this hypothetical bag “number of goals scored per match and per team”.\n\nThere are even more examples of predictive tasks where this particular model can be of use. However, it is important to keep in mind that this model predicts the number of goals scored. Its results can be used to estimate probabilities of victory and other derived quantities, but calculating the likelihood of these derived quantities may not be straightforward. And as you can see above, there isn’t one unique predictive task: it all depends on the specific question you’re interested in. As often in statistics, the answer to these questions lies outside the model, you must tell the model what to do, not the other way around.\nEven though we know that the predictive task is ambiguous, we will start trying to calculate az.loo with idata_base and then work on the examples above and a couple more to show how would this kind of tasks be performed with ArviZ. But before that, let’s see what ArviZ says when you naively ask it for the LOO of a multi-likelihood model:\n\n\nCode\naz.loo(base_idata)\n\n\nTypeError: Found several log likelihood arrays ['home_goals', 'away_goals'], var_name cannot be None\n\n\nAs expected, ArviZ has no way of knowing what predictive task we have in mind so it raises an error.\n\n8.7.1 Predicting the goals scored by the away team\nIn this particular case, we are interested in predicting the goals scored by the away team. We will still use the goals scored by the home team, but won’t take them into account when assessing the predictive accuracy. Below there is an illustration of how would cross validation be performed to assess the predictive accuracy in this particular case:\n\nThis can also be seen from a mathematical point of view. We can write the pointwise log likelihood in the following way so it defines the predictive task at hand:\n\\[ p(y_i|\\theta) = p(y_{i,h}|\\theta_{i,h}) = \\text{Poiss}(y_{i,h}; \\theta_{i,h}) \\]\nwith \\(i\\) being both the match indicator (\\(m\\), which varies with \\(i\\)) and the field indicator (\\(f\\), here always fixed at \\(h\\)). These are precisely the values stored in the home_goals of the log_likelihood group of idata_base.\nWe can tell ArviZ to use these values using the argument var_name.\n\naz.loo(base_idata, var_name=\"home_goals\")\n\nComputed from 8000 posterior samples and 380 observations log-likelihood matrix.\n\n         Estimate       SE\nelpd_loo  -568.55    12.66\np_loo       15.59        -\n------\n\nPareto k diagnostic values:\n                         Count   Pct.\n(-Inf, 0.70]   (good)      380  100.0%\n   (0.70, 1]   (bad)         0    0.0%\n   (1, Inf)   (very bad)    0    0.0%\n\n\n\naz.compare(model_dict, var_name=\"home_goals\")\n\n\n\n\n\n\n\n\n\nrank\nelpd_loo\np_loo\nelpd_diff\nweight\nse\ndse\nwarning\nscale\n\n\n\n\nbudget\n0\n-567.057532\n10.716592\n0.000000\n0.715937\n13.055752\n0.000000\nFalse\nlog\n\n\nbase\n1\n-568.553182\n15.589902\n1.495650\n0.284063\n12.661187\n2.767823\nFalse\nlog\n\n\nnofield\n2\n-574.119733\n15.814319\n7.062202\n0.000000\n15.312384\n4.387979\nFalse\nlog\n\n\n\n\n\n\n\n\n\naz.compare(model_dict, var_name=\"away_goals\")\n\n\n\n\n\n\n\n\n\nrank\nelpd_loo\np_loo\nelpd_diff\nweight\nse\ndse\nwarning\nscale\n\n\n\n\nbudget\n0\n-480.386626\n6.888639\n0.000000\n1.000000e+00\n11.546581\n0.000000\nFalse\nlog\n\n\nbase\n1\n-482.936745\n10.241680\n2.550119\n2.781109e-14\n11.831405\n1.943906\nFalse\nlog\n\n\nnofield\n2\n-488.971732\n10.193199\n8.585106\n0.000000e+00\n9.456310\n3.420849\nFalse\nlog\n\n\n\n\n\n\n\n\n\n\n8.7.2 Predicting the outcome of a match\nAnother option is being interested in the outcome of the matches. In our current model, the outcome of a match is not who wins or the aggregate of scored goals by both teams, the outcome is the goals scored by the home team and by the away team, both quantities at the same time. Below there is an illustration on how would cross validation be used to assess the predictive accuracy in this situation:\n\nThe one observation in this situation is therefore a vector with two components: \\(y_i = (y_{i,h}, y_{i,a})\\). Like above, we also have \\(M\\) observations. The pointwise likelihood is therefore a product:\n\\[\np(y_i|\\theta) = p(y_{i,h}|\\theta_{i,h})p(y_{i,a}|\\theta_{i,a}) =\n\\text{Poiss}(y_{i,h}; \\theta_{i,h})\\text{Poiss}(y_{i,a}; \\theta_{i,a})\n\\]\nwith \\(i\\) being equal to the match indicator \\(m\\). Therefore, we have \\(M\\) observations like in the previous example, but each observation has two components.\nWe can calculate the product as a sum of logarithms and store the result in a new variable inside the log_likelihood group.\n\ndef match_lik(idata):\n    log_lik = idata.log_likelihood\n    log_lik[\"matches\"] = log_lik.home_goals + log_lik.away_goals\n    return idata\n\nbase_idata = match_lik(base_idata)\nbudget_idata = match_lik(budget_idata)\nnofield_idata = match_lik(nofield_idata)\n\naz.loo(base_idata, var_name=\"matches\")\n\nComputed from 8000 posterior samples and 380 observations log-likelihood matrix.\n\n         Estimate       SE\nelpd_loo -1051.48    16.93\np_loo       25.81        -\n------\n\nPareto k diagnostic values:\n                         Count   Pct.\n(-Inf, 0.70]   (good)      380  100.0%\n   (0.70, 1]   (bad)         0    0.0%\n   (1, Inf)   (very bad)    0    0.0%\n\n\n\naz.compare(model_dict, var_name=\"matches\")\n\n\n\n\n\n\n\n\n\nrank\nelpd_loo\np_loo\nelpd_diff\nweight\nse\ndse\nwarning\nscale\n\n\n\n\nbudget\n0\n-1047.441755\n17.606963\n0.000000\n0.84896\n17.072842\n0.000000\nFalse\nlog\n\n\nbase\n1\n-1051.475361\n25.812936\n4.033606\n0.15104\n16.927232\n3.399485\nFalse\nlog\n\n\nnofield\n2\n-1063.093483\n26.019985\n15.651728\n0.00000\n17.563750\n5.491706\nFalse\nlog\n\n\n\n\n\n\n\n\n\n\n8.7.3 Predicting the goals scored per match and per team\nAnother example described above is being interested in the scored goals per match and per team. In this situation, our observations are a scalar once again.\n\nThe expression of the likelihood is basically the same as the one in the first example (both cases are scalars), but the difference is in the index, but that does not make it less significant:\n\\[\np(y_i|\\theta) = p(y_{i}|\\theta_{i}) =\n\\text{Poiss}(y_{i}; \\theta_{i})\n\\]\nwith \\(i\\) being both the match indicator \\(m\\) and the field indicator \\(f\\), both varying with \\(i\\). Now, we will consider \\(i\\) as an index iterating over the values in\n\\[\\big\\{(1,h), (2,h), \\dots, (M-1,h), (M,h), (1,a), (2,a) \\dots (M-1,a), (M,a)\\big\\}\\]\nTherefore, unlike in previous cases, we have \\(2M\\) observations.\nWe can obtain the pointwise log likelihood corresponding to this case by concatenating the pointwise log likelihoods of home_goals and away_goals. Then, like in the previous case, store the result in a new variable inside the log_likelihood group.\n\ndef goals_lik(idata):\n    log_lik = idata.log_likelihood\n    log_lik[\"goals\"] = xr.concat((log_lik.home_goals, log_lik.away_goals), \"match\").rename({\"match\": \"goal\"})\n    return idata\n    \nbase_idata = goals_lik(base_idata)\nbudget_idata = goals_lik(budget_idata)\nnofield_idata = goals_lik(nofield_idata)\n\naz.loo(base_idata, var_name=\"goals\")\n\nComputed from 8000 posterior samples and 760 observations log-likelihood matrix.\n\n         Estimate       SE\nelpd_loo -1051.49    17.60\np_loo       25.83        -\n------\n\nPareto k diagnostic values:\n                         Count   Pct.\n(-Inf, 0.70]   (good)      760  100.0%\n   (0.70, 1]   (bad)         0    0.0%\n   (1, Inf)   (very bad)    0    0.0%\n\n\n\naz.compare(model_dict, var_name=\"goals\")\n\n\n\n\n\n\n\n\n\nrank\nelpd_loo\np_loo\nelpd_diff\nweight\nse\ndse\nwarning\nscale\n\n\n\n\nbudget\n0\n-1047.444158\n17.605232\n0.000000\n8.519505e-01\n17.710455\n0.000000\nFalse\nlog\n\n\nbase\n1\n-1051.489927\n25.831582\n4.045769\n1.480495e-01\n17.604908\n3.382467\nFalse\nlog\n\n\nnofield\n2\n-1063.091466\n26.007518\n15.647308\n9.992007e-16\n18.260083\n5.564137\nFalse\nlog\n\n\n\n\n\n\n\n\n\n\n8.7.4 Predicting team level performance\nThe last example covered here is estimating the predictive accuracy at group level. This can be useful to assess the accuracy of predicting the whole season of a new team. In addition, this can also be used to evaluate the hierarchical part of the model.\nAlthough theoretically possible, importance sampling tends to fail at the group level due to all the observations being too informative. See this post for more details.\nIn this situation, we could describe the cross validation as excluding a team. When we exclude a team, we will exclude all the matches played by the team, not only the goals scored by the team but the whole match. Here is the illustration:\n\nIn the first column, we are excluding “Levante U.D.” which in the rows shown only appears once. In the second one, we are excluding “Athletic Club” which appears two times. This goes on following the order of appearance in the away team column.\n\ndef team_lik(idata):\n    log_lik = idata.log_likelihood\n    const = idata.constant_data\n    groupby_sum_home = log_lik.groupby(const.home_team).sum().rename({\"home_team\": \"team\"})\n    groupby_sum_away = log_lik.groupby(const.away_team).sum().rename({\"away_team\": \"team\"})\n\n    log_lik[\"teams_match\"] = (\n        groupby_sum_home.home_goals + groupby_sum_home.away_goals +\n        groupby_sum_away.home_goals + groupby_sum_away.away_goals\n    )\n    return idata\n    \nbase_idata = team_lik(base_idata)\nbudget_idata = team_lik(budget_idata)\nnofield_idata = team_lik(nofield_idata)\n\n\naz.loo(base_idata, var_name=\"teams_match\")\n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/arviz/stats/stats.py:797: UserWarning: Estimated shape parameter of Pareto distribution is greater than 0.70 for one or more samples. You should consider using a more robust model, this is because importance sampling is less likely to work well if the marginal posterior and LOO posterior are very different. This is more likely to happen with a non-robust model and highly influential observations.\n  warnings.warn(\n\n\nComputed from 8000 posterior samples and 20 observations log-likelihood matrix.\n\n         Estimate       SE\nelpd_loo -2109.44    19.91\np_loo       52.62        -\n\nThere has been a warning during the calculation. Please check the results.\n------\n\nPareto k diagnostic values:\n                         Count   Pct.\n(-Inf, 0.70]   (good)        3   15.0%\n   (0.70, 1]   (bad)        14   70.0%\n   (1, Inf)   (very bad)    3   15.0%\n\n\nTODO: it would probably be best to run reloo for the three models for this case and include that on figshare too.\n\naz.compare(model_dict, var_name=\"teams_match\")\n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/arviz/stats/stats.py:797: UserWarning: Estimated shape parameter of Pareto distribution is greater than 0.70 for one or more samples. You should consider using a more robust model, this is because importance sampling is less likely to work well if the marginal posterior and LOO posterior are very different. This is more likely to happen with a non-robust model and highly influential observations.\n  warnings.warn(\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/arviz/stats/stats.py:797: UserWarning: Estimated shape parameter of Pareto distribution is greater than 0.70 for one or more samples. You should consider using a more robust model, this is because importance sampling is less likely to work well if the marginal posterior and LOO posterior are very different. This is more likely to happen with a non-robust model and highly influential observations.\n  warnings.warn(\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/arviz/stats/stats.py:797: UserWarning: Estimated shape parameter of Pareto distribution is greater than 0.70 for one or more samples. You should consider using a more robust model, this is because importance sampling is less likely to work well if the marginal posterior and LOO posterior are very different. This is more likely to happen with a non-robust model and highly influential observations.\n  warnings.warn(\n\n\n\n\n\n\n\n\n\n\nrank\nelpd_loo\np_loo\nelpd_diff\nweight\nse\ndse\nwarning\nscale\n\n\n\n\nbudget\n0\n-2098.768712\n36.970533\n0.000000\n8.019749e-01\n22.754832\n0.000000\nTrue\nlog\n\n\nbase\n1\n-2109.444812\n52.616593\n10.676101\n1.980251e-01\n19.908256\n6.769330\nTrue\nlog\n\n\nnofield\n2\n-2133.223518\n52.665911\n34.454806\n2.220446e-16\n20.286200\n9.252461\nTrue\nlog",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Model Comparison (case study)</span>"
    ]
  },
  {
    "objectID": "Chapters/Variable_selection.html",
    "href": "Chapters/Variable_selection.html",
    "title": "9  Variable Selection",
    "section": "",
    "text": "9.1 Methods for variable selection\nThere are many methods for variable selection we will restrict the discussion to two methods for variable selection. Even more, we are going to restrict the discussion to two particular implementations of these methods.\nFor both methods is of central importance to understand the concept of “reference model” as they work by comparing the reference model with a series of submodels. The reference model is the model that has all the variables we consider relevant a priori and is the only model that we will fit using standard inference methods, like MCMC. In both methods, the submodels are created by selecting a subset of the covariates in the reference model. As the number of possible submodels grows very fast with the number of covariates, both methods can use different heuristics to select the most promising submodels to fit. The main difference between these two methods is how they approximate the posterior distribution of the submodels and how they use this approximation to select the most promising submodels.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Variable Selection</span>"
    ]
  },
  {
    "objectID": "Chapters/Variable_selection.html#methods-for-variable-selection",
    "href": "Chapters/Variable_selection.html#methods-for-variable-selection",
    "title": "9  Variable Selection",
    "section": "",
    "text": "The first one it’s available in PyMC-BART (Quiroga et al. 2022) and works for Bayesian Additive Regression Models.\nThe second method is implemented in Kulprit and is currently compatible with a subset of models supported by Bambi. However, the aim is to extend compatibility to all models that can be handled by Bambi. A very accesible paper discussing this method in general and not the particular implementation in Kulprit is McLatchie et al. (2023).",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Variable Selection</span>"
    ]
  },
  {
    "objectID": "Chapters/Variable_selection.html#variable-selection-with-bart",
    "href": "Chapters/Variable_selection.html#variable-selection-with-bart",
    "title": "9  Variable Selection",
    "section": "9.2 Variable selection with BART",
    "text": "9.2 Variable selection with BART\nBART is a non-parametric regression method based on a sum of trees, this is all we need to understand at the moment for details you can read the original paper (Chipman, George, and McCulloch 2010) and the paper introducing PyMC-BART (Quiroga et al. 2022).\nOnce we fit a BART model we can count the number of times each covariate is used in the posterior distribution of trees. This count can be used as a measure of the importance of the covariate. We will call this the “variable inclusion” measure, or VI for short, and is normalized to sum to 1. One heuristic is to start with a model with a single covariate and then add covariates in decreasing order of VI. This is fast as we only need to evaluate as many models as covariates we have. This is the default heuristic in PyMC-BART. Then to evaluate the quality of each submodel we compute the predictions from it and compare the predictions with those from the reference model. Currently, PyMC-BART uses the R², but other metrics could be used. For the submodels the predictions are computed by pruning the trees in the posterior distribution of the reference model. That is we remove the trees the branches that do not use the covariates in the submodel. In this way, we approximate the posterior distribution of the submodel and we can compute the predictions without the need to refit each submodel.\nLet’s see one example. We have a record of the number of rented bikes in a city and other variables like temperature, hour of the day etc. We want to model the relationship between temperature and the number of rented bikes.\nLet’s first load the data and define the variables.\n\nbikes = pd.read_csv(\"../data/bikes.csv\")\n\nY = bikes.pop(\"count\")\nX = bikes\n\nNow we define the BART model using PyMC-BART, for details on how to define BART models, please check the PyMC-BART documentation\n\nwith pm.Model() as model:\n    α = pm.HalfNormal(\"α\", 2)\n    μ_ = pmb.BART(\"μ_\", X, np.log(Y))\n    μ = pm.Deterministic(\"μ\", np.exp(μ_))\n    y = pm.NegativeBinomial(\"y\", mu=μ, alpha=α, observed=Y)\n    idata = pm.sample(random_seed=seed,\n                      compute_convergence_checks=False)\n\nMultiprocess sampling (2 chains in 2 jobs)\nCompoundStep\n&gt;NUTS: [α]\n&gt;PGBART: [μ_]\nSampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 54 seconds.\n\n\n\n\n\n\n\n\nWe can now compute the variable importance and plot the results. The dashed lines represent the mean R² for the predictions from the reference model against themselves, the band captures the uncertainty. Then from left to right, we add covariates in decreasing order of VI. The first submodel is the one with only hour, the second is hour + temperature, the third is hour + temperature + month and so on.\n\nvi_results = pmb.compute_variable_importance(idata, μ_, X);\nax = pmb.plot_variable_importance(vi_results, plot_kwargs={\"rotation\": 45}, figsize=(10, 4))\nax.set_ylim(0.5, 1)\n\n\n\n\n\n\n\n\nWe can see that the most relevant variable is hour, followed by temperature after that it is difficult to see any improvement and all differences appear to be noise.\nPyMC-BART offers two other heuristics. \"Backward\" and VI-Backward, the first one ignores the variable inclusion information and instead begins by computing all models with one variable less than the total, it removes the one with the lowest R² and then repeats the process until only one variable is left. This method is more expensive as it needs to compute a lot of models and it will not scale well with the number of covariates. It is only recommended when the result of the default VI method looks suspicious. For instance, we should always expect that the R² increases monotonically with the number of covariates, if this is not the case we should use the Backward method. The VI-Backward method is a blend of both heuristics. It performs a backward search but the variables with the highest variable inclusion are fixed during this search. How many variables we consider fixed is a user choice. This method is more expensive than the default VI method but less than the Backward method.\n\n9.2.1 Partial dependence plot\nStrictly speaking when we say we prune the trees we are actually computing the partial dependence, that is, we are computing the expected value of the outcome for a subset of the covariates while averaging over the complement of that subset. With PyMC-BART we can visually inspect the partial dependence when excluding all but one covariate. As in the following figure:\n\naxes = pmb.plot_pdp(μ_, X=X, Y=Y, grid=(2, 3), func=np.exp, var_discrete=[0, 2], xs_interval=\"insample\", figsize=(12, 5))\n\n\n\n\n\n\n\n\nThe dashed lines represent the null model, the more a variable deviates from these lines the more its impact on the response variable. We can see a qualitative agreement between the variable importance and the partial dependence plots.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Variable Selection</span>"
    ]
  },
  {
    "objectID": "Chapters/Variable_selection.html#variable-selection-with-kulprit",
    "href": "Chapters/Variable_selection.html#variable-selection-with-kulprit",
    "title": "9  Variable Selection",
    "section": "9.3 Variable selection with Kulprit",
    "text": "9.3 Variable selection with Kulprit\nKulprit is an implementation of a method known as projective inference. The main idea is that we can “project” the reference model’s posterior into the submodels. Conceptually, it is easier to understand this projection as a procedure to find a posterior distribution for the submodel that will induce a posterior predictive distribution that is as close as possible to the posterior predictive distribution of the reference model. Intuitively, this makes sense in the context of variable selection, as we want to find a model that is smaller than the reference model but makes predictions that are as close as possible to it.\nIt turns out, that this can be achieved as an optimization problem. Let’s see.\nDenote \\(\\theta\\) as the parameter of the posterior from the reference model, and \\(\\theta_\\perp\\) those of the posterior for a particular submodel. Denote \\(\\tilde{y}\\) the samples from the posterior predictive distribution of the reference model \\(p(\\tilde{y} \\mid \\theta)\\). Then we want to find a posterior that induces the posterior predictive distribution \\(q(\\tilde{y} \\mid \\theta_\\perp)\\). We want \\(p\\) and \\(q\\) to be as close as possible. As we already discussed in Section 7.6 we can use the Kullback-Leibler divergence to measure how close two distributions are. Then we can write:\n\\[\\begin{align}\n\\mathbb{KL}\\{p(\\tilde{y}\\mid\\theta) \\lVert q(\\tilde{y})\\} &= \\mathbb{E}_{\\tilde{y}\\sim p(\\tilde{y}\\mid\\theta)} \\left[ \\log \\frac{p(\\tilde{y}\\mid\\theta)}{q(\\tilde{y}\\mid\\theta_\\perp)} \\right] \\\\\n&= \\underbrace{\\mathbb{E}_{\\tilde{y}\\sim p(\\tilde{y}\\mid\\theta)} \\left[ \\log p(\\tilde{y}\\mid\\theta)\\right]}_{\\text{constant}} - \\mathbb{E}_{\\tilde{y}\\sim p(\\tilde{y}\\mid\\theta)} \\left[ \\log q(\\tilde{y}\\mid\\theta_\\perp)\\right] \\\\\n&\\propto - \\mathbb{E}_{\\tilde{y}\\sim p(\\tilde{y}\\mid\\theta)} \\left[ \\log q(\\tilde{y}\\mid\\theta_\\perp)\\right]\n\\end{align}\\]\nIn the proposed approach \\(\\log q(\\tilde{y} \\mid \\theta_\\perp)\\) is the log-likelihood of our model evaluated with respect to samples from the posterior predictive distribution \\(\\tilde{y}\\sim p(\\tilde{y}\\mid\\theta)\\). Thus to minimize the KL divergence we can maximize the model’s log-likelihood with respect to the posterior predictive samples from the reference model. This is the optimization problem we need to solve to find the posterior distribution of the submodel.\nLet’s use Kulprit to perform variable selection on the same dataset we used for PyMC-BART.\nThe first thing we need to do is to define the model using Bambi. We need to set idata_kwargs={'log_likelihood': True} as we will later need to compute the ELPD of the reference models and submodels.\n\nmodel = bmb.Model(\"count ~\" +  \" + \".join([c for c in bikes.columns if c!=\"count\"]), data=bikes, family=\"negativebinomial\")\nidata = model.fit(idata_kwargs={'log_likelihood': True}, random_seed=seed)\n\nInitializing NUTS using jitter+adapt_diag...\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pytensor/link/c/cmodule.py:2959: UserWarning: PyTensor could not link to a BLAS installation. Operations that might benefit from BLAS will be severely degraded.\nThis usually happens when PyTensor is installed via pip. We recommend it be installed via conda/mamba/pixi instead.\nAlternatively, you can use an experimental backend such as Numba or JAX that perform their own BLAS optimizations, by setting `pytensor.config.mode == 'NUMBA'` or passing `mode='NUMBA'` when compiling a PyTensor function.\nFor more options and details see https://pytensor.readthedocs.io/en/latest/troubleshooting.html#how-do-i-configure-test-my-blas-library\n  warnings.warn(\nMultiprocess sampling (2 chains in 2 jobs)\nNUTS: [alpha, Intercept, month, hour, weekday, temperature, humidity, windspeed]\nSampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 4 seconds.\nWe recommend running at least 4 chains for robust computation of convergence diagnostics\n\n\n\n\n\n\n\n\nTo use Kulprit we first instantiate the ProjectionPredictive class and then call the project method, which is the one doing all the hard work.\n\nppi = kpt.ProjectionPredictive(model, idata)\nppi.project()\n\nOnce this is finished we can inspect the ppi object manually, but a plot is usually a better idea. By default, the compare function plots all the models, including the intercept-only model, i.e. a model without any covariate. In the following block of code, we are asking to omit this model.\n\nppi.compare(min_model_size=1);\n\n\n\n\n\n\n\n\nWe can see that this plot is very similar to the one generated with pmb.plot_variable_importance and its interpretation is also similar. One important difference is that compare uses the ELPD to compare the models.\nWe can see that for Kulprit the most relevant variable is hour, followed by temperature and then humidity, after that adding more variables does not improve the model. The order agrees with PyMC-BART but Kulprit considers 3 variables as relevant instead of 2. This is most likely because the effect of hour is non-linear and thus difficult to capture with a simple linear model. Let’s put this idea to the test.\nInstead of using the variable hour, let’s apply a transformation first.\n\nbikes = pd.read_csv(\"../data/bikes.csv\")\nbikes[\"hour_sin\"] = np.sin(bikes.hour * np.pi / 12)\nbikes[\"hour_cos\"] = np.cos(bikes.hour * np.pi / 12)\nbikes.drop(columns=\"hour\", inplace=True)\n\nNow we can repeat the process.\n\nmodel = bmb.Model(\"count ~\" +  \" + \".join([c for c in bikes.columns if c!=\"count\"]), data=bikes, family=\"negativebinomial\")\nidata = model.fit(idata_kwargs={'log_likelihood': True}, random_seed=seed)\nppi = kpt.ProjectionPredictive(model, idata)\nppi.project()\nppi.compare(min_model_size=1);\n\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (2 chains in 2 jobs)\nNUTS: [alpha, Intercept, month, weekday, temperature, humidity, windspeed, hour_sin, hour_cos]\nSampling 2 chains for 1_000 tune and 1_000 draw iterations (2_000 + 2_000 draws total) took 5 seconds.\nWe recommend running at least 4 chains for robust computation of convergence diagnostics\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd voilà! If we consider hour_cos and hour_sin as a single variable, then the two most relevant variables are hour and temperature, in agreement with PyMC-BART.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Variable Selection</span>"
    ]
  },
  {
    "objectID": "Chapters/Variable_selection.html#combining-pymc-bart-and-kulprit",
    "href": "Chapters/Variable_selection.html#combining-pymc-bart-and-kulprit",
    "title": "9  Variable Selection",
    "section": "9.4 Combining PyMC-BART and Kulprit",
    "text": "9.4 Combining PyMC-BART and Kulprit\nBoth methods are not necessarily competitors and there is room for collaboration. When this is useful is still open to research but we can think of some scenarios where this could be useful. For instance, we could use PyMC-BART to find the most relevant variables, according to the variable inclusion metric, and then use Kulprit to perform the projection. We could also use the posterior predictive samples from PyMC-BART instead of a GLM. The second option requires some changes in Kulprit, but the first one is straightforward as the method project supports a path argument that allows to specify the submodels that we want to project. Notice that if we provide the path there is no search done, Kulprit will project and evaluate just the submodels we specify.\n\npath = [[\"hour_cos\", \"hour_sin\"],\n        [\"hour_cos\", \"hour_sin\", \"temperature\"],\n        [\"hour_cos\", \"hour_sin\", \"temperature\", \"humidity\"],\n        [\"hour_cos\", \"hour_sin\", \"temperature\", \"humidity\", \"month\"],\n        [\"hour_cos\", \"hour_sin\", \"temperature\", \"humidity\", \"month\", \"weekday\"],\n        [\"hour_cos\", \"hour_sin\", \"temperature\", \"humidity\", \"month\", \"weekday\", \"windspeed\"],\n        ]\nppi.project(path=path)\n\n\n\n\n\nChipman, Hugh A., Edward I. George, and Robert E. McCulloch. 2010. “BART: Bayesian Additive Regression Trees.” The Annals of Applied Statistics 4 (1): 266–98. https://doi.org/10.1214/09-AOAS285.\n\n\nMartin, Osvaldo A. 2024. Bayesian Analysis with Python: A Practical Guide to Probabilistic Modeling, 3rd Edition. Packt Publishing.\n\n\nMcLatchie, Yann, Sölvi Rögnvaldsson, Frank Weber, and Aki Vehtari. 2023. “Robust and Efficient Projection Predictive Inference.” https://arxiv.org/abs/2306.15581.\n\n\nPiironen, Juho, Markus Paasiniemi, and Aki Vehtari. 2020. “Projective inference in high-dimensional problems: Prediction and feature selection.” Electronic Journal of Statistics 14 (1): 2155–97. https://doi.org/10.1214/20-EJS1711.\n\n\nQuiroga, Miriana, Pablo G Garay, Juan M. Alonso, Juan Martin Loyola, and Osvaldo A Martin. 2022. “Bayesian Additive Regression Trees for Probabilistic Programming.” arXiv. https://doi.org/10.48550/ARXIV.2206.03619.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Variable Selection</span>"
    ]
  },
  {
    "objectID": "Chapters/Prior_elicitation.html",
    "href": "Chapters/Prior_elicitation.html",
    "title": "10  Prior Elicitation",
    "section": "",
    "text": "10.1 Priors and Bayesian Statistics\nIf you are reading this guide, you probably already know what a prior distribution is. But let’s do a quick recap. In Bayesian statistics, the prior distribution is the probability distribution that expresses information about the parameters of the model before observing the data. The prior distribution is combined with the likelihood to obtain the posterior distribution, which is the distribution of the parameters after observing the data.\nPriors are one way to convey domain-knowledge information into models. Other ways to include information in a model are the type of model or its overall structure, e.g. using a linear model, and the choice of likelihood.\nLet use a couple of examples to think about priors and it’s role in Bayesian statistics, Figure 10.2 shows two priors, one in blue (Beta(0.5, 0.5)) and one in red (Beta(10, 10)).\nWe are going to combine these priors with data using a Binomial likelihood. And we are going to update these priors sequentially, i.e. we will be adding some data and compute the posterior. And then add some more data and keep updating. So, at each step \\(i\\) we add data and the distribution we are computing are the posteriors, but these posteriors are also the priors for step \\(i+1\\). This sequential updating, where a posterior becomes the prior of the next analysis, is possible because the Beta distribution is conjugate with the Binomial. Conjugate prior are priors that when combined with a likelihood function result in a posterior distribution that is of the same form as the prior distribution. Usually, we don’t care too much about conjugate priors, but sometimes, like for this animation, they can be useful.\nWe have represented these sequential updating in an animation (see Figure 10.3). As the animation moves forward, i.e. we add more data, we will see that the posteriors gradually converge to the same distribution.\nAsymptotically, priors have no meaning. If we have infinite data, the posterior will be the same regardless of the chosen prior. When there is large amount of data, the update is dominated by the likelihood function, and the prior has little influence. Different reasonable priors converge to the same posterior as data size is increased.\nBut there are two catches. If we assign 0 prior probability to a value, no amount of data will turn that into a positive value. In other words, if a particular value or hypothesis is assigned zero prior probability, it will also have zero posterior probability, regardless of the data observed. Alternatively, if we assign a prior probability of 1 to a value (and zero to the rest), no amount of data will allow us to update that prior neither. This is known as Cromwell’s rule and states that the use of prior probabilities of 1 (“the event will definitely occur”) or 0 (“the event will definitely not occur”) should be avoided, except when applied to statements that are logically true or false, such as \\(2+2=4\\).\nOK, but if we take Cromwell’s advice and avoid these corner cases eventually the data will dominate the priors. That’s true, as well as that asymptotically, we are all dead. For real, finite data, we should expect priors to have some impact on the results. The actual impact will depend on the specific combinations of priors, likelihood and data. Section 10.3 shows a couple of combinations. In practice we often need to worry about our priors, but maybe less than we think.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Prior Elicitation</span>"
    ]
  },
  {
    "objectID": "Chapters/Prior_elicitation.html#priors-and-bayesian-statistics",
    "href": "Chapters/Prior_elicitation.html#priors-and-bayesian-statistics",
    "title": "10  Prior Elicitation",
    "section": "",
    "text": "Figure 10.2: Two different priors\n\n\n\n\n\n\n\n\n\n\n\nFigure 10.3: Priors updating as we keep adding data\n\n\n\n\n\n\n\n\n\n\n\nFigure 10.4: If we give 0 prior probability, then we will always get 0 posterior probability\n\n\n\n\n\n\n\n\n\n\nFigure 10.5: The posterior is an interplay of prior and likelihood",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Prior Elicitation</span>"
    ]
  },
  {
    "objectID": "Chapters/Prior_elicitation.html#types-of-priors",
    "href": "Chapters/Prior_elicitation.html#types-of-priors",
    "title": "10  Prior Elicitation",
    "section": "10.2 Types of Priors",
    "text": "10.2 Types of Priors\nUsually, priors are described as informative vs non-informative. Informative priors are priors that convey specific information about the parameters of the model, while non-informative priors do not convey specific information about the parameters of the model. Non-informative priors are often used when little or no domain knowledge is available. A simple, intuitive and old rule for specifying a non-informative prior is the principle of indifference, which assigns the same probability to all possible events. Non-informative priors are also called objective priors especially when the main motivation for using them is to avoid the need to specify a prior distribution.\nNon-informative priors can be detrimental and difficult to implement or use. Informative priors can also be problematic in practice, as the information needed to specify them may be absent or difficult to obtain. And even if the information is available specifying informative priors can be time-consuming. A middle ground is to use weakly informative priors, which are priors that convey some information about the parameters of the model but are not overly specific. Weakly informative priors can help to regularize inference and even have positive side effects like improving sampling efficiency.\n\n\n\n\n\n\nFigure 10.6: Priors are often defined in terms of how much information they convey\n\n\n\nIt is important to recognize that the amount of information a priors carry can vary continuously and that the categories we use to discuss priors are a matter of convenience and not a matter of principle. These categories are qualitative and not well-defined. Still, they can be helpful when talking about priors more intuitively.\nSo far we have discussed the amount of information. There are at least two issues that seem fishy about this discussion. First, the amount of information is a relative concept, against what are we evaluating if a prior is informative or not? Second, the amount of information does not necessarily mean the information is good or correct. For instance, it’s possible to have a very informative prior based on wrong assumptions. Thus when we say informative we don’t necessarily mean reliable or that the prior will bias the inference in the correct direction and amount.\nThere is one way to frame the discussion about priors that can help to address these issues. That is to think about priors in terms of the prior predictive distribution they induce. In other words, we think about the priors in terms of their predictions about unobserved, potentially observable data. This mental scaffold can be helpful in many ways:\n\nFirst, it naturally leads us to think about priors in relation to other priors and the likelihood, i.e. it reflects the fact that we cannot understand a prior without the context of the model (Gelman, Simpson, and Betancourt 2017).\nSecond, it gives us an operational definition of what we mean by vague, informative, or weakly informative prior. An informative prior is a prior that makes predictions that are about the same. A weakly informative prior is a prior that makes predictions that are somewhere in between. The distinctions are still qualitative and subjective, but we have a criteria that is context-dependent and we can evaluate during a Bayesian data analysis. Figure Figure 10.7 shows a very schematic representation of this idea.\nThird, it provides us with a way to evaluate the priors for consistency, because the priors we are setting should agree with the prior predictive distribution we imagine. For instance, if we are setting an informative prior that induces a prior predictive distribution that is narrower, shifted or very different in any other way from the one we imagine either the prior or our expectation of the prior predictive distribution is wrong. We have specified two conflicting pieces of information. Reconciling these two pieces of information does not guarantee that the prior or any other part of the model is correct, but it provides internal consistency, which is a good starting point for a model.\n\n\n\n\n\n\n\nFigure 10.7: Prior amount of information in terms of the prior predictive distribution induced by them\n\n\n\nUsing the prior predictive distribution to evaluate priors is inherently a global approach, as it assesses the combined impact of all priors and the likelihood. However, during prior elicitation, we may sometimes focus on making one or two priors more informative while keeping the others vague. In these cases, we can think of this as having a “local” mix of priors with varying levels of informativeness. In practice, we often balance this global perspective with the local approach, tailoring priors to the specific needs of the model.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Prior Elicitation</span>"
    ]
  },
  {
    "objectID": "Chapters/Prior_elicitation.html#sec-prior-elicitation-workflow",
    "href": "Chapters/Prior_elicitation.html#sec-prior-elicitation-workflow",
    "title": "10  Prior Elicitation",
    "section": "10.3 Bayesian Workflow for Prior Elicitation",
    "text": "10.3 Bayesian Workflow for Prior Elicitation\nPrior elicitation is a key part of a flexible iterative workflow. It can be specific to the needs of the model and data at hand. It may need revision as we develop the model and analyse the data.\nKnowing when to perform prior elicitation is central to a prior elicitation workflow. In some situations, default priors and models may be sufficient, especially for routine inference that applies the same, or very similar, model to similar new datasets. But even for new datasets, default priors can be a good starting point, adjusting them only after initial analysis reveals issues with the posterior or computational problems. As with other components of the Bayesian workflow, prior elicitation isn’t just a one-time task. It’s not even one that is always done at the beginning of the analysis.\nFor simple models with strong data, the prior may have minimal impact, and starting with default or weakly informed priors may be more appropriate and provide better results than attempting to generate very informative priors. The key is knowing when it’s worth investing resources in prior elicitation. Or more nuanced how much time and domain knowledge is needed in prior specification. Usually, getting rough estimates can be sufficient to improve inference. Thus, in practice, weakly informative priors are often enough. In a model with many parameters eliciting all of them one by one may be too time-consuming and not worth the effort. Refining just a few priors in a model can be sufficient to improve inference.\nThe prior elicitation process should also include a step to verify the usefulness of the information and assess how sensitive the results are to the choice of priors, including potential conflicts with the data. This process can help identify when more or less informative priors are needed and when the model may need to be adjusted.\nFinally, we want to highlight that prior elicitation isn’t just about choosing the right prior but also about understanding the model and the problem. So even if we end up with a prior that has little impact on the posterior, compared to a vague or default prior, performing prior elicitation could be useful for the modeller. Especially among newcomers setting priors can be seen as an anxiogenic task. Spending some time thinking about priors, with the help of proper tools, can help reduce this brain drain and save mental resources for other modelling tasks.\nNevertheless, usually, the selling point when discussing in favour of priors is that they allow the inclusion of domain information. But there are potentially other advantages of :\n\nSampling efficiency. Often a more informed priors results in better sampling. This does not mean we should tweak the prior distribution to solve sampling problems, instead incorporating some domain-knowledge information can help to avoid them.\nRegularization. More informed priors can help to regularize the model, reducing the risk of overfitting. We make a distinction between regularization and “conveying domain-knowledge information” because motivations and justifications can be different in each case.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Prior Elicitation</span>"
    ]
  },
  {
    "objectID": "Chapters/Prior_elicitation.html#priors-and-entropy",
    "href": "Chapters/Prior_elicitation.html#priors-and-entropy",
    "title": "10  Prior Elicitation",
    "section": "10.4 Priors and entropy",
    "text": "10.4 Priors and entropy\nThe entropy is a property of probability distributions the same way the mean or variance are, actually it’s the expected value of the negative log probability of the distribution. We can think of entropy as a measure of the information or uncertainty of a distribution has. Loosely speaking the entropy of a distribution is high when the distribution is spread out and low when the distribution is concentrated. In the context of prior elicitation maximum entropy can be a guiding principle to pick priors. According to this principle we should choose the prior that maximizes the entropy, subject to known constraints of the prior (Jaynes 2003). This is a way to choose a prior that is as vague as possible, given the information we have. Figure Figure 10.8 shows a distribution with support in [0, 1]. On the first panel we have the distribution with maximum entropy and no other restrictions. We can see that this is a uniform distribution. On the middle we have the distribution with maximum entropy and a given mean. This distribution looks similar to an exponential distribution. On the last panel we have the distribution with maximum entropy and 70% of its mass between 0.5 and 0.75.\n\n\n\n\n\n\nFigure 10.8: 3 maximum entropy distributions subject to different constrains\n\n\n\nFor some priors in a model, we may know or assume that most of the mass is within a certain interval. This information is useful for determining a suitable prior, but this information alone may not be enough to obtain a unique set of parameters. Figure 10.9 shows Beta distributions with 90% of the mass between 0.1 and 0.7. As you can see we can obtain very different distributions, conveying very different prior knowledge. The red distribution is the one with maximum entropy, given the constraints.\n\n\n\n\n\n\nFigure 10.9: Beta distributions with a 90% of it mass between 0.1 and 0.7, the red one is the one with maximum entropy",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Prior Elicitation</span>"
    ]
  },
  {
    "objectID": "Chapters/Prior_elicitation.html#preliz",
    "href": "Chapters/Prior_elicitation.html#preliz",
    "title": "10  Prior Elicitation",
    "section": "10.5 Preliz",
    "text": "10.5 Preliz\nPreliZ (Icazatti et al. 2023) is a Python package that helps practitioners choose prior distributions by offering a set of tools for the various facets of prior elicitation. It covers a range of methods, from unidimensional prior elicitation on the parameter space to predictive elicitation on the observed space. The goal is to be compatible with probabilistic programming languages (PPL) in the Python ecosystem like PyMC and CmdStanPy, while remaining agnostic of any specific PPL.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Prior Elicitation</span>"
    ]
  },
  {
    "objectID": "Chapters/Prior_elicitation.html#maximum-entropy-distributions-with-maxent",
    "href": "Chapters/Prior_elicitation.html#maximum-entropy-distributions-with-maxent",
    "title": "10  Prior Elicitation",
    "section": "10.6 Maximum entropy distributions with maxent",
    "text": "10.6 Maximum entropy distributions with maxent\nIn PreliZ we can compute maximum entropy priors using the function maxent. It works for unidimensional distributions. The first argument is a PreliZ distribution. Then we specify an upper and lower bound and the probability between them.\nAs an example, we want to elicit a scale parameter. From domain knowledge we know the parameter has a relatively high probability of being less than 3. Hence, we could use a HalfNormal distribution and do:\n\npz.maxent(pz.HalfNormal(), 0, 3, 0.8);\n\n\n\n\n\n\n\n\nWhen we want to avoid values too close to zero, other distributions like Gamma or InverseGamma may be a better choice.\n\npz.maxent(pz.Gamma(), 0, 3, 0.8);\n\n\n\n\n\n\n\n\nWe could also have extra restrictions like knowledge about the mean or mode. Let’s say we think a mean of 2 is very likely. The Gamma distribution can be parametrized in terms of the mean as pz.Gamma(mu=2). If we instead believe the mode is likely to be 2, then maxent takes a mode argument.\n\ndist_mean = pz.Gamma(mu=2)\npz.maxent(dist_mean, 0, 3, 0.8)\n\ndist_mode = pz.Gamma()\npz.maxent(dist_mode, 0, 3, 0.8, mode=2);\n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/preliz/unidimensional/maxent.py:94: FutureWarning: The parameter `mode` is deprecated and will be removed in a future release. Use `fixed_stat=('mode', mode)` instead.\n  warnings.warn(\n\n\n\n\n\n\n\n\n\nNotice that if you call maxent several times in the same cell, as we just did, we will get all the distributions in the same plot. This can be very useful to visually compare several alternatives.\nThe function maxent as others in PreliZ modify distribution in place, so a common workflow is to instantiate a distribution first, perform the elicitation, and then inspect its properties, plot it, or use it in some other way. For instance, we may want to check a summary of some of its properties:\n\ndist_mean.summary(), dist_mode.summary()\n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/numba/np/ufunc/dufunc.py:288: RuntimeWarning: invalid value encountered in nb_logpdf\n  return super().__call__(*args, **kws)\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/numba/np/ufunc/dufunc.py:288: RuntimeWarning: invalid value encountered in nb_logpdf\n  return super().__call__(*args, **kws)\n\n\n(Gamma(mean=2.0, median=1.67, std=1.43, lower=0.26, upper=5.39),\n Gamma(mean=2.32, median=2.22, std=0.86, lower=0.99, upper=4.19))",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Prior Elicitation</span>"
    ]
  },
  {
    "objectID": "Chapters/Prior_elicitation.html#other-direct-elicitation-methods-from-preliz",
    "href": "Chapters/Prior_elicitation.html#other-direct-elicitation-methods-from-preliz",
    "title": "10  Prior Elicitation",
    "section": "10.7 Other direct elicitation methods from PreliZ",
    "text": "10.7 Other direct elicitation methods from PreliZ\nThere are many other method for direct elicitation of parameters. For instance the quartile functions identifies a distribution that matches specified quartiles, and Quartine_int provides an interactive approach to achieve the same, offering a more hands-on experience for refining distributions.\nOne method worth of special mention is the Roulette method allows which allows users to find a prior distribution by drawing it interactively (Morris, Oakley, and Crowe 2014). The name “roulette” comes from the analogy of placing a limited set of chips where one believes the mass of a distribution should be concentrated. In this method, a grid of m equally sized bins is provided, covering the range of x, and users allocate a total of n chips across the bins. Effectively, this creates a histogram,representing the user’s information about the distribution. The method then identifies the best-fitting distribution from a predefined pool of options, translating the drawn histogram into a suitable probabilistic model.\nAs this is an interactive method we can’t show it here, but you can run the following cell to see how it works.\n\n%matplotlib widget\nresult = pz.Roulette()\n\nAnd this gif should give you an idea on how to use it.\n\n\n\n\n\n\nFigure 10.10: To elicit a distribution, we can interactively draw a histogram, and Roulette will identify the distribution that best matches it.\n\n\n\nOnce we have elicited the distribution we can call .dist attribute to get the selected distribution. In this example, it will be result.dist.\nIf needed, we can combine results for many independent “roulette sessions” with the combine_roulette function. Combining information from different elicitation sessions can be useful to aggregate information from different domain experts. Or even from a single person unable to pick a single option. For instance if we run Roulette twice, and for the first one we get result0 and for the second result1. Then, we can combine both solutions into a single one using:\n\npz.combine_roulette([result0.inputs, result1.inputs], weights=[0.3, 0.7])\n\nIn this example, we assign a larger weight to the results from the second elicitation session, we can do this to reflect uneven degrees of trust. By default, all sessions are weighted equally.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Prior Elicitation</span>"
    ]
  },
  {
    "objectID": "Chapters/Prior_elicitation.html#predictive-elicitation",
    "href": "Chapters/Prior_elicitation.html#predictive-elicitation",
    "title": "10  Prior Elicitation",
    "section": "10.8 Predictive elicitation",
    "text": "10.8 Predictive elicitation\nThe simplest way to perform predictive elicitation is to generate a model, sample from its prior predictive distribution and then evaluate if the samples are consistent with the domain knowledge. If there is disagreement, we can refine the prior distribution and repeat the process. This is usually known as prior predictive check and we discussed them in Chapter 5 together with posterior predictive checks.\nTo assess the agreement between the domain knowledge and the prior predictive distribution we may be tempted to use the observed data, as in posterior predictive checks. But, this can be problematic in many ways. Instead, we recommend using “reference values”. We can obtain a reference value from domain knowledge, like previous studies, asking clients or experts, or educated guesses. They can be typical values, or usually “extreme” values. For instance, if we are studying the temperature of a city, we may use the historical record of world temperature and use -90 as the minimum, 60 as the maximum and 15 as the average. These are inclusive values. Hence this will lead us to very broad priors. If we want something tighter we should use historical records of areas more similar to the city we are studying or even the same city we are studying. These will lead to more informative priors.\n\n10.8.1 Predator vs prey example\nWe are interested in modelling the relationship between the masses of organisms that are prey and organisms that are predators, and since masses vary in orders of magnitude from a 1e-9 grams for a typical cell to a 1.3e8 grams for the blue whale, it is convenient to work on a logarithmic scale.\nLet’s load the data and define the reference values.\n\npp_mass = pd.read_csv(\"../data/pp_mass.csv\")\npp_mass[\"predator_log\"] = np.log(pp_mass[\"predator\"])\npp_mass[\"prey_log\"] = np.log(pp_mass[\"prey\"])\n\n\n# Reference values in log-scale\nrefs = {\"Blue whale\":np.log(1.3e8),\n       \"Typical cell\":np.log(1e-9)}\n\nSo a model might be something like:\n\\[\\begin{align}\n    \\mu =& Normal(\\cdots, \\cdots) \\\\\n    \\sigma =& HalfNormal(\\cdots) \\\\\n    log(mass) =& Normal(\\mu, \\sigma)\n\\end{align}\\]\nLet’s now define a model with some priors and see what these priors imply on the scale of the data. To sample from the predictive prior we use pm.sample_prior_predictive() instead of sample and we need to define dummy observations. This is necessary to indicate to PyMC which term is the likelihood and to control the size of each predicted distribution, but the actual values do not affect the prior predictive distributions.\n\nwith pm.Model() as model:\n    α = pm.Normal(\"α\", 0, 100)\n    β = pm.Normal(\"β\", 0, 100)\n    σ = pm.HalfNormal(\"σ\", 5)\n    pm.Normal(\"prey\", α + β * pp_mass[\"prey_log\"], σ, observed=pp_mass[\"predator_log\"])\n    idata = pm.sample_prior_predictive(samples=100)\n\nSampling: [prey, α, β, σ]\n\n\nNow we can plot the prior predictive distribution and compare it with the reference values.\n\nazp.plot_ppc_dist(idata, group=\"prior_predictive\", kind=\"ecdf\", references=list(refs.values()))\n\n\n\n\n\n\n\n\nPriors are so vague that we can not even distinguish the reference values from each other. Let’s try refining our priors.\n\nwith pm.Model() as model:\n    α = pm.Normal(\"α\", 0, 1)\n    β = pm.Normal(\"β\", 0, 1)\n    σ = pm.HalfNormal(\"σ\", 5)\n    prey = pm.Normal(\"prey\", α + β * pp_mass[\"prey_log\"], σ, observed=pp_mass[\"predator_log\"])\n    idata = pm.sample_prior_predictive(samples=100)\n\nSampling: [prey, α, β, σ]\n\n\nWe can plot the prior predictive distribution and compare it with the reference values.\n\nazp.plot_ppc_dist(idata, group=\"prior_predictive\", kind=\"ecdf\", references=list(refs.values()))\n\n\n\n\n\n\n\n\nThe new priors still generate some values that are too wide, but at least the bulk of the model predictions are in the right range. So, without too much effort and extra information, we were able to move from a very vague prior to a weakly informative prior. If we decided this prior is still very vague we can add more domain-knowledge.\n\n\n10.8.2 Interactive predictive elicitation\nThe process described in the previous section is straightforward: sample from the prior predictive –&gt; plot –&gt; refine –&gt; repeat. On the good side, this is a very flexible approach and can be a good way to understand the effect of individual parameters in the predictions of a model. But it can be time-consuming and it requires some understanding of the model so you know which parameters to tweak and in which direction.\nOne way to improve this workflow is by adding interactivity. We can do this with PreliZ’s function, predictive_explorer. Which we can not show here, in a full glory but you can see an static image in Figure 10.11, and you can try it for yourself by running the following block of code.\n\ndef pp_model(α_μ=0, α_σ=100, β_μ=0, β_σ=100, σ_σ=5):\n    α = pz.Normal(α_μ, α_σ).rvs()\n    β = pz.Normal(β_μ, β_σ).rvs()\n    σ = pz.HalfNormal(σ_σ).rvs()\n    prey = pz.Normal(α + β * pp_mass.predator_log, σ).rvs()\n    return prey\n\npz.predictive_explorer(pp_model, references=refs)\n\n\n\n\n\n\n\nFigure 10.11: We can use the boxes to specify different prior values and see how the prior predictive changes, here we have changed the initial values of α_σ and β_σ from 100 to 1",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Prior Elicitation</span>"
    ]
  },
  {
    "objectID": "Chapters/Prior_elicitation.html#projective-predictive-elicitation",
    "href": "Chapters/Prior_elicitation.html#projective-predictive-elicitation",
    "title": "10  Prior Elicitation",
    "section": "10.9 Projective predictive elicitation",
    "text": "10.9 Projective predictive elicitation\nProjective predictive elicitation is an experimental method to elicit priors by specifying an initial model and a prior predictive distribution. Then instead of elicitate the prior themselves, we elicit the prior predictive distribution, which we call the target distribution. Then we use a procedure that automatically find the parameters of the prior that induce a prior predictive distribution that is as close as possible to the target distribution. This method is particularly useful when we have a good idea of how the data should look like, but we are not sure how to translate this into a prior distribution.\nThis method has been implemented in PreliZ, let see one example first and then discuss some details. To keep things concrete and familiar let’s assume we are still interested in the predator-prey example. And let assume that on a log-scale we think that the the prior predictive distribution is well described as a Normal distribution with most of its mass between the weight of a typical cell and the weight of a blue whale. The Normal is easy to work with and with this information we could derive its parameter. But let do something even easier. Let use pz.maxent and translate “most of it mass” to \\(0.94\\).\n\ntarget = pz.Normal()\npz.maxent(target, refs[\"Typical cell\"], refs[\"Blue whale\"], 0.94) \n\n\n\n\n\n\n\n\nThis will be our target distribution. If for a particular problem you are unsure about what distribution to choose as a target, think that this should be the distribution that you expect to match in a prior predictive check as discussed in previous sections. And also think that usually the goal is to find a weakly informative prior. So, the target will usually be a very approximate distribution.\nNow that we have the target, we write a model as you would do before a prior predictive check, we can reuse the model from previous section. The we pass the model and target to ppe\n\nwith pm.Model() as model:\n    α = pm.Normal(\"α\", 0, 100)\n    β = pm.Normal(\"β\", 0, 100)\n    σ = pm.HalfNormal(\"σ\", 5)\n    prey = pm.Normal(\"prey\", α + β * pp_mass[\"prey_log\"][:100], σ, observed=pp_mass[\"predator_log\"][:100])\n\nprint(pz.ppe(model, target)) \n\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/preliz/predictive/ppe.py:60: UserWarning: This method is experimental and under development with no guarantees of correctness.\n                  Use with caution and triple-check the results.\n  warnings.warn(\n/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pymc/pytensorf.py:1057: FutureWarning: compile_pymc was renamed to compile. Old name will be removed in a future release of PyMC\n  warnings.warn(\n\n\nwith pm.Model() as model:\n    α = pm.Normal(\"α\", mu=-0.997, sigma=1.13)\n    β = pm.Normal(\"β\", mu=-0.00669, sigma=0.168)\n    σ = pm.HalfNormal(\"σ\", sigma=10.3)\n\n\n\nOK, ppe function returns a solution, because this is an experimental method, and because good data analysis always keep a good dose of scepticism of their tools, let’s check that the suggested prior is reasonable given the provided information. To do this we write the model with the new prior and sample from the prior predictive. Notice that we could have copied the priors verbatim, but instead we are rounding them. We do not care of the exact solution, a rounded number is easier to read. Feel free to not follow suggestion from machine blindly or be prepared to end inside a lake.\n\nwith pm.Model() as model:\n    α = pm.Normal(\"α\", mu=-1, sigma=1.1)\n    β = pm.Normal(\"β\", mu=0.015, sigma=0.2)\n    σ = pm.HalfNormal(\"σ\", sigma=10)\n    prey = pm.Normal(\"prey\", α + β * pp_mass[\"prey_log\"], σ, observed=pp_mass[\"predator_log\"])\n    idata = pm.sample_prior_predictive()\n\nSampling: [prey, α, β, σ]\n\n\nNow we can plot the prior predictive distribution, the target distribution and compare it with the reference values.\n\nazp.plot_ppc_dist(idata, group=\"prior_predictive\", kind=\"ecdf\", references=list(refs.values()))\n\n\n\n\n\n\n\n\n\n\n10.9.1 OK, but what’s under the hood?\nThe main idea is that once we have a target distribution we can define the prior elicitation problem as finding the parameters of the model that induce a prior predictive distribution as close as possible to the target distribution. Stated this way, this is a typical inference problem that could be solved using standard (Bayesian) inference methods that instead of conditioning on observed data we condition on synthetic data, our target distribution. Conceptually that’s what ppe is doing, but we still have two plot twist ahead of us.\nThe procedure is as follows:\n\nGenerate a sample from the target distribution.\nMaximize the model’s likelihood wrt that sample (i.e. we find the parameters for a fixed “observation”).\nGenerate a new sample from the target distribution and find a new set of parameters.\nCollect the parameters, one per prior parameter in the original model.\nUse MLE to fit the optimized values to their corresponding families in the original model.\n\nInstead of using standard inference methods like MCMC in step 1-3 we are using projection inference. See Chapter 9 for details. Essentially we are approximating a posterior using an optimization method. Yes, we say posterior, because from the inference point we are computing a posterior, once that we then will use as prior. On the last step, we use a second approximation, we fit the projected posterior into standard distributions used by PPLs as building blocks. We need to do this so we can write the resulting priors in terms a PPLs like PyMC, CmdStanPy could understand.\nThis procedure ignores the prior information in the model passed to ppe, because the optimized function is just the likelihood. In the last step we use the information about each prior families. But in principle, we could even ignore this information and fit the optimized values to many families and pick the best fit. This allows the procedure to suggest alternative families. For instance, it could be that we use a Normal for a given parameters but the optimization only found positive values so a Gamma or HalfNormal could be a better choice. Having said that, the prior can have an effect because they are used to initialize the optimization routine. But for that to happen the prior has to be very off with respect to the target. Internally ppe performs many optimizations each time for a different sample from the target, the result of one optimization is stored as one projected posterior “sample” and also used as the initial guess for the next one. For the very first optimization, the one initialized from the prior, the result is discarded and only used as the initial guess for the next step.Another piece of information that is ignored is the observed data, the procedure only takes into account the sample size, but not the actual values. So you can pass dummy values, changing the sample size can we used to obtain more narrow (larger sample size) or more vague (smaller sample size) priors. Whether we should always use the same sample size of the data we are going to actually use or not is something that needs further research and evaluation.\n\n\n\n\nGelman, Andrew, Daniel Simpson, and Michael Betancourt. 2017. “The Prior Can Often Only Be Understood in the Context of the Likelihood.” Entropy 19 (10): 555. https://doi.org/10.3390/e19100555.\n\n\nIcazatti, Alejandro, Oriol Abril-Pla, Arto Klami, and Osvaldo A Martin. 2023. “PreliZ: A tool-box for prior elicitation.” Journal of Open Source Software 8 (89): 5499. https://doi.org/10.21105/joss.05499.\n\n\nJaynes, E. T. 2003. Probability Theory: The Logic of Science. Edited by G. Larry Bretthorst. Cambridge, UK ; New York, NY: Cambridge University Press.\n\n\nMikkola, Petrus, Osvaldo A. Martin, Suyog Chandramouli, Marcelo Hartmann, Oriol Abril Pla, Owen Thomas, Henri Pesonen, et al. 2024. “Prior Knowledge Elicitation: The Past, Present, and Future.” Bayesian Analysis 19 (4): 1129–61. https://doi.org/10.1214/23-BA1381.\n\n\nMorris, David E., Jeremy E. Oakley, and John A. Crowe. 2014. “A Web-Based Tool for Eliciting Probability Distributions from Experts.” Environmental Modelling & Software 52: 1–4. https://doi.org/https://doi.org/10.1016/j.envsoft.2013.10.010.",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Prior Elicitation</span>"
    ]
  },
  {
    "objectID": "Chapters/Presenting_results.html",
    "href": "Chapters/Presenting_results.html",
    "title": "11  Presentation of Results",
    "section": "",
    "text": "Summarizing results\nMonte Carlo Standard error and accuracy",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Presentation of Results</span>"
    ]
  },
  {
    "objectID": "Chapters/Bayesian_workflow.html",
    "href": "Chapters/Bayesian_workflow.html",
    "title": "12  Bayesian Workflow",
    "section": "",
    "text": "12.1 A picture of a Bayesian Workflow\nFigure 12.1 shows a simplified Bayesian workflow (Martin, Kumar, and Lao 2021), check the Bayesian Workflow paper for a more detailed representation (Gelman et al. 2020). As you see there are many steps. We need all these steps because models are just lucubrations of our mind with no guarantee of helping us understand the data. We need to first be able to build such a model and then check its usefulness, and if not useful enough keep working, or sometimes stop trying. You may also have noticed the “evaluate samples” step. We need this because we, usually, use computational methods to solve Bayesian models, and here again we have no guarantee these methods always return the correct result (see Chapter 4 for details).\nDesigning a suitable model for a given data analysis task usually requires a mix of statistical expertise, domain knowledge, understanding of computational tools, and perseverance. Rarely a modelling effort is a one-shot process, instead, typically we need to iteratively write, test, and refine models. If you are familiar with writing code, then you already know what we are talking about. Even very short programs require some trial and error. Usually, you need to test it, debug it, and refine it, and sometimes try alternative approaches. The same is true for statistical models, especially when we use code to write and solve them.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Bayesian Workflow</span>"
    ]
  },
  {
    "objectID": "Chapters/Bayesian_workflow.html#a-picture-of-a-bayesian-workflow",
    "href": "Chapters/Bayesian_workflow.html#a-picture-of-a-bayesian-workflow",
    "title": "12  Bayesian Workflow",
    "section": "",
    "text": "Figure 12.1: A Bayesian workflow. Solid lines show a linear workflow starting at problem framing and ending in summarizing the results. The dotted lines indicate that workflows usually are non-linear as practitioners usually skip steps or go back to previous steps.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Bayesian Workflow</span>"
    ]
  },
  {
    "objectID": "Chapters/Bayesian_workflow.html#a-blueprint-for-effective-bayesian-workflows",
    "href": "Chapters/Bayesian_workflow.html#a-blueprint-for-effective-bayesian-workflows",
    "title": "12  Bayesian Workflow",
    "section": "12.2 A Blueprint for Effective Bayesian Workflows",
    "text": "12.2 A Blueprint for Effective Bayesian Workflows\nOften, especially for newcomers, Bayesian analysis can be overwhelming. In this section, we have collected a series of tips and recommendations so you can get a quick reference. Here we write the recommendations linearly, but in practice, you may need to come back one or more steps and sometimes skip steps. Think of these notes, not as a partiture of a classical piece that a violinist aims at playing almost exactly, but as the musical score that a Jazz bassist follows, you are free to improvise, rearrange some parts, and omit others, and you can even add your notes!\n\n12.2.1 Summarize the problem\nSummarize the key points of your problem, and what you would like to learn from the data. Think also about others, what your boss, client, or colleague would like to find out or learn. This does not need to be super thorough, you can revisit goals later, but they can help you organize your modelling efforts and avoid excessive wandering.\nSometimes you will not have any clear idea of what to expect or what to do, your only expectation will be to get something useful from a dataset, and that’s fine. But other times you may even know what kind of model you want, perhaps your boss explicitly asked you to run this or that analysis. If you already know what kind of problem you want to solve, but are not very familiar with the approach, search for what methods, metrics or visualizations are common for that problem/data, and ask others for advice. This is more important the less familiar you are with that type of problem/data. If you are familiar, then you may already know which methods, visualizations, and summaries you want to use or obtain. Either way write an outline, a roadmap to help you keep focus, and later to track what you have already tried.\n\n\n12.2.2 Get familiar with the data\nIt is always a good idea to perform Exploratory Data Analysis on your data. Blindly modelling your data leads you to all sorts of problems. Taking a look first will save you time and may provide useful ideas. Sometimes it saves you from having to write a Bayesian model at all, perhaps the answer is a scatter plot! In the early stages, a quick dirty plot could be enough but try to be organized as you may need to refer to these plots later on during the modelling or presentation phases.\nWhen exploring the data we want to make sure, we get a really good understanding of it. How to achieve this can vary a lot from dataset to dataset and from analysis to analysis. But there are useful sanity checks that we usually do, like checking for missing values, or errors in the data. Are the data types correct? Are all the values that should be numbers, numbers (usually integers or floats) or they are strings? Which variables are categorical? Which ones are continuous? At this stage, you may need to do some cleaning of your data. This will save you time in the future.\nUsually, we would like to also do some plots, histograms, boxplots, scatter plots, etc. Numerical summaries are also useful, like the mean, and median, for all your data, or by grouping the data, etc.\n\n\n12.2.3 Tell a story for the data\nIt is often helpful to think about how the data could have been generated. This is usually called the data-generating process or data-generating mechanism. We don’t need to find out the True mechanism, many times we just need to think about plausible scenarios.\nMake drawings, and try to be very schematic, doodles and geometrical figures should be enough unless you are a good sketcher. This step can be tricky, so let us use an example. Let’s say you are studying the water levels of a lake, think about what makes the water increase; rain, rivers, etc, and what makes it decrease; evaporation, animals drinking water, energy production, etc. Try to think which elements may be relevant and which could be negligible. Use as much context as you have for your problem. If you feel you don’t have enough context, write down questions and find out who knows.\nTry to keep it simple but not simpler. For instance, a mechanism could be “Pigs’ weight increases the more corn they are fed”, that’s a good mechanism if all you need to predict are your earnings from selling pigs. But it will be an over-simplistic mechanism if you are studying intestine absorption at the cellular level.\nIf you can think of alternative stories and you don’t know how to decide which one is better. Don’t worry, list them all! Maybe we can use the data to decide!\n\n\n12.2.4 Write a model\nTry to translate the data-generating mechanism into a model. If you feel comfortable with math, use that. If you prefer a visual representation like a graphical model, use that. If you like code, then go for it. Incomplete models are fine as a first step. For instance, if you use code, feel free to use pseudo code or add comments to signal missing elements as you think about the model. You can refine it later. A common blocker is trying to do too much too soon.\nTry to start simple, don’t use hierarchies, keep prior 1D (instead of multivariate), skip interactions for linear models, etc. If for some reason you come first with a complex model, that’s ok, but you may want to save it for later use, and try with a simplified version.\nSometimes you may be able to use a standard textbook model or something you saw on a blog post or a talk. It is common that for certain problems people tend to use certain “default” models. That may be a good start, or your final model. Keep things simple, unless you need something else.\nThis is a good step to think about your priors (see Chapter 10 for details), not only which family are you going to use, but what specific parameters. If you don’t have a clue just use some vague prior. But if you have some information, use it. Try to encode very general information, like this parameter can not be negative, or this parameter is likely to be smaller than this, or within this range. Look for the low-hanging fruit, usually that will be enough. The exception will be when you have enough good quality information to define a very precise prior, but even then, that’s something you can add later.\n\n\n12.2.5 Implement the model\nWrite the model in a probabilistic programming language. If you used code in the previous example the line between this step and the previous one, may be diffuse, that’s fine. Try to keep the model simple at first, we can add more layers later as we keep iteration through this workflow. Starting simple usually saves you time in the long run. Simple models are easier to debug and debugging one issue at a time is generally less frustrating than having to fix several issues before our model even runs.\nOnce you have a model, check that the model compiles and/or runs without error. When debugging a model, especially at an earlier stage of the workflow, you may want to reduce the number of tuning and sampling steps, at the beginning a crude posterior approximation is usually enough. Sometimes, it may also be a good idea to reduce the size of the dataset. For large datasets setting aside 50 or 90% of the data could help iterate faster and catch errors earlier. A potential downside is that you may miss the necessary data to uncover some relevant pattern but it could be ok at the very beginning when most of the time is spent fixing simple mistakes or getting familiar with the problem.\n\n\n12.2.6 Evaluate prior predictive distribution\nIt is usually a good idea to generate data from the prior predictive distribution and compare that to your prior knowledge (mikkola_2023?). Is the bulk of the simulated distribution in a reasonable range? Are there any extreme values? Use reference values as a guide. Reference values are empirical data or historical observations, usually, they will be minimum, maximum or expected values. Avoid comparing with the observed data, as that can lead to issues if you are not careful enough (see Chapter 10 for details).\n\n\n12.2.7 Compute posterior\nThere are many ways to compute the posterior, in this document, we have assumed the use of MCMC methods as they are the most general and commonly used methods to estimate the posterior in modern Bayesian analysis.\n\n\n12.2.8 Evaluate samples\nWhen using MCMC methods, we need to check that the samples are good enough. For this, we need to compute diagnostics such as \\(\\hat R\\) (r-hat) and effective sample size (ESS). And evaluate plots such as trace plots and rank plots. We can be more tolerant with diagnostics at the early stages of the workflow, for instance, an \\(\\hat R\\) of 1.1 is acceptable. At the same time, very bad diagnostics could be a signal of a problem with our model(s). We discuss these steps in detail in Chapter 4.\n\n\n12.2.9 Validate the model\nThere are many ways to validate your model, like a posterior predictive check, Bayesian p-values, residual analysis, and recovery parameters from synthetic data (or the most costly simulated-based calibration). Or a combination of all of this. Sometimes you may be able to use a holdout set to evaluate the predictive performance of your model. The main goal here is to find if the model is good enough for your purpose and what limitations the model can have. All models will have limitations, but some limitations may be irrelevant in the context of your analysis, some may be worth removing by improving the models, and others are simply worth knowing they are there. We discuss these steps in detail in Chapter 4.\n\n\n12.2.10 Compare models\nIf you manage to get more than one model (usually a good idea), you may need to define which one you would like to keep (assuming you only need one). To compare models you can use cross-validation and/or information criteria. But you can also use the results from the previous step (model validation). Sometimes we compare models to keep a single model, model comparison can also help us to better understand a model, its strengths and its limitations, and it can also be a motivation to improve a model or try a new one. Model averaging, i.e. combining several models, is usually a simple and effective strategy to improve predictive performance. We discuss these steps in detail in Chapter 7.\n\n\n12.2.11 Summarize results\nSummarize results in a way that helps you reach your goals, did you manage to answer the key questions? Is this something that will convince your boss, your peers or the marketing department? Think of effective ways to show the results. If your audience is very technical do a technical summary, but if your audience only cares about maximizing profit focus on that. Try to use summaries that are easy to understand without hiding valuable details, you don’t want to mislead your audience.\n\n\n\n\nGelman, Andrew, Aki Vehtari, Daniel Simpson, Charles C. Margossian, Bob Carpenter, Yuling Yao, Lauren Kennedy, Jonah Gabry, Paul-Christian Bürkner, and Martin Modrák. 2020. “Bayesian Workflow.” https://arxiv.org/abs/2011.01808.\n\n\nMartin, Osvaldo A., Ravin Kumar, and Junpeng Lao. 2021. Bayesian Modeling and Computation in Python. 1st edition. Boca Raton London New York: Chapman; Hall/CRC.",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Bayesian Workflow</span>"
    ]
  },
  {
    "objectID": "Chapters/References.html",
    "href": "Chapters/References.html",
    "title": "References",
    "section": "",
    "text": "Akaike, H. 1974. “A New Look at the Statistical Model\nIdentification.” IEEE Transactions on Automatic Control\n19 (6): 716–23. https://doi.org/10.1109/TAC.1974.1100705.\n\n\nAyer, Miriam, H. D. Brunk, G. M. Ewing, W. T. Reid, and Edward\nSilverman. 1955. “An Empirical Distribution\nFunction for Sampling with Incomplete Information.”\nThe Annals of Mathematical Statistics 26 (4): 641–47. https://doi.org/10.1214/aoms/1177728423.\n\n\nBessiere, Pierre, Emmanuel Mazer, Juan Manuel Ahuactzin, and Kamel\nMekhnacha. 2013. Bayesian Programming. 1 edition.\nBoca Raton: Chapman; Hall/CRC. https://www.crcpress.com/Bayesian-Programming/Bessiere-Mazer-Ahuactzin-Mekhnacha/p/book/9781439880326.\n\n\nBrockmann, H. Jane. 1996. “Satellite Male Groups in Horseshoe\nCrabs, Limulus Polyphemus.” Ethology 102 (1): 1–21.\nhttps://doi.org/https://doi.org/10.1111/j.1439-0310.1996.tb01099.x.\n\n\nChipman, Hugh A., Edward I. George, and Robert E. McCulloch. 2010.\n“BART: Bayesian Additive Regression\nTrees.” The Annals of Applied Statistics 4 (1): 266–98.\nhttps://doi.org/10.1214/09-AOAS285.\n\n\nCleveland, William S., and Robert McGill. 1984. “Graphical\nPerception: Theory, Experimentation, and Application to the Development\nof Graphical Methods.” Journal of the American Statistical\nAssociation 79 (387): 531–54. https://doi.org/10.1080/01621459.1984.10478080.\n\n\nDaniel Roy. 2015. Probabilistic Programming. http://probabilistic-programming.org.\n\n\nDiaconis, Persi. 2011. “Theories of Data\nAnalysis: From Magical\nThinking Through Classical\nStatistics.” In Exploring Data\nTables, Trends, and Shapes,\n1–36. John Wiley & Sons, Ltd. https://doi.org/10.1002/9781118150702.ch1.\n\n\nDimitriadis, Timo, Tilmann Gneiting, and Alexander I. Jordan. 2021.\n“Stable Reliability Diagrams for Probabilistic\nClassifiers.” Proceedings of the National Academy of\nSciences 118 (8): e2016191118. https://doi.org/10.1073/pnas.2016191118.\n\n\nGabry, Jonah, Daniel Simpson, Aki Vehtari, Michael Betancourt, and\nAndrew Gelman. 2019. “Visualization in Bayesian Workflow.”\nJournal of the Royal Statistical Society Series A: Statistics in\nSociety 182 (2): 389–402. https://doi.org/10.1111/rssa.12378.\n\n\nGelman, Andrew. 2013. “Two simple examples\nfor understanding posterior p-values whose distributions are far from\nuniform.” Electronic Journal of Statistics 7\n(none): 2595–2602. https://doi.org/10.1214/13-EJS854.\n\n\nGelman, Andrew, Daniel Simpson, and Michael Betancourt. 2017. “The\nPrior Can Often Only\nBe Understood in the Context of\nthe Likelihood.” Entropy 19 (10): 555. https://doi.org/10.3390/e19100555.\n\n\nGelman, Andrew, Aki Vehtari, Daniel Simpson, Charles C. Margossian, Bob\nCarpenter, Yuling Yao, Lauren Kennedy, Jonah Gabry, Paul-Christian\nBürkner, and Martin Modrák. 2020. “Bayesian Workflow.” https://arxiv.org/abs/2011.01808.\n\n\nGhahramani, Zoubin. 2015. “Probabilistic Machine\nLearning and Artificial\nIntelligence.” Nature 521 (7553): 452–59.\nhttps://doi.org/10.1038/nature14541.\n\n\nHeer, Jeffrey, and Michael Bostock. 2010. “Crowdsourcing Graphical\nPerception: Using Mechanical Turk to Assess Visualization\nDesign.” In Proceedings of the SIGCHI\nConference on Human Factors in\nComputing Systems, 203–12.\nCHI ’10. New York, NY, USA: Association for Computing\nMachinery. https://doi.org/10.1145/1753326.1753357.\n\n\nHoyer, Stephan, and Joe Hamman. 2017. “Xarray:\nN-D Labeled Arrays\nand Datasets in Python.” Journal of\nOpen Research Software 5 (1). https://doi.org/10.5334/jors.148.\n\n\nIcazatti, Alejandro, Oriol Abril-Pla, Arto Klami, and Osvaldo A Martin.\n2023. “PreliZ: A tool-box for prior\nelicitation.” Journal of Open Source Software 8\n(89): 5499. https://doi.org/10.21105/joss.05499.\n\n\nJaynes, E. T. 2003. Probability Theory:\nThe Logic of Science. Edited\nby G. Larry Bretthorst. Cambridge, UK ; New York, NY: Cambridge\nUniversity Press.\n\n\nJohnson, Roger W. 1996. “Fitting Percentage of Body Fat to Simple\nBody Measurements.” Journal of Statistics Education 4\n(1). https://doi.org/10.1080/10691898.1996.11910505.\n\n\nKallioinen, Noa, Topi Paananen, Paul-Christian Bürkner, and Aki Vehtari.\n2023. “Detecting and Diagnosing Prior and Likelihood Sensitivity\nwith Power-Scaling.” Statistics and Computing 34 (1):\n57. https://doi.org/10.1007/s11222-023-10366-5.\n\n\nKleiber, Christian, and Achim Zeileis. 2016. “Visualizing Count\nData Regressions Using Rootograms.” The American\nStatistician 70 (3): 296–303. https://doi.org/10.1080/00031305.2016.1173590.\n\n\nLink, William A., and Mitchell J. Eaton. 2012. “On Thinning of\nChains in MCMC.” Methods in Ecology and Evolution 3 (1):\n112–15. https://doi.org/https://doi.org/10.1111/j.2041-210X.2011.00131.x.\n\n\nMacEachern, Steven N., and L. Mark Berliner. 1994. “Subsampling\nthe Gibbs Sampler.” The American\nStatistician 48 (3): 188–90. https://doi.org/10.2307/2684714.\n\n\nMartin, Osvaldo A. 2024. Bayesian Analysis with\nPython: A Practical\nGuide to Probabilistic Modeling, 3rd\nEdition. Packt Publishing.\n\n\nMartin, Osvaldo A., Ravin Kumar, and Junpeng Lao. 2021. Bayesian\nModeling and Computation in\nPython. 1st edition. Boca Raton London New York:\nChapman; Hall/CRC.\n\n\nMcLatchie, Yann, Sölvi Rögnvaldsson, Frank Weber, and Aki Vehtari. 2023.\n“Robust and Efficient Projection Predictive Inference.” https://arxiv.org/abs/2306.15581.\n\n\nMeng, Xiao-Li. 1994. “Posterior Predictive p-Values.” The\nAnnals of Statistics 22 (3): 1142–60. https://doi.org/10.1214/aos/1176325622.\n\n\nMikkola, Petrus, Osvaldo A. Martin, Suyog Chandramouli, Marcelo\nHartmann, Oriol Abril Pla, Owen Thomas, Henri Pesonen, et al. 2024.\n“Prior Knowledge Elicitation: The Past, Present, and\nFuture.” Bayesian Analysis 19 (4): 1129–61. https://doi.org/10.1214/23-BA1381.\n\n\nMorris, David E., Jeremy E. Oakley, and John A. Crowe. 2014. “A\nWeb-Based Tool for Eliciting Probability Distributions from\nExperts.” Environmental Modelling & Software 52:\n1–4. https://doi.org/https://doi.org/10.1016/j.envsoft.2013.10.010.\n\n\nNguyen, Hoang-Vu, and Jilles Vreeken. 2015. “Non-Parametric\nJensen-Shannon Divergence.” In Machine Learning and Knowledge\nDiscovery in Databases, edited by Annalisa Appice, Pedro Pereira\nRodrigues, Vítor Santos Costa, João Gama, Alípio Jorge, and Carlos\nSoares, 173–89. Cham: Springer International Publishing.\n\n\nPiironen, Juho, Markus Paasiniemi, and Aki Vehtari. 2020. “Projective inference in high-dimensional problems:\nPrediction and feature selection.” Electronic Journal\nof Statistics 14 (1): 2155–97. https://doi.org/10.1214/20-EJS1711.\n\n\nQuiroga, Miriana, Pablo G Garay, Juan M. Alonso, Juan Martin Loyola, and\nOsvaldo A Martin. 2022. “Bayesian Additive Regression Trees for\nProbabilistic Programming.” arXiv. https://doi.org/10.48550/ARXIV.2206.03619.\n\n\nSäilynoja, Teemu, Paul-Christian Bürkner, and Aki Vehtari. 2022.\n“Graphical Test for Discrete Uniformity and Its Applications in\nGoodness-of-Fit Evaluation and Multiple Sample Comparison.”\nStatistics and Computing 32 (2): 32. https://doi.org/10.1007/s11222-022-10090-6.\n\n\nSäilynoja, Teemu, Andrew R. Johnson, Osvaldo A. Martin, and Aki Vehtari.\n2025. “Recommendations for Visual Predictive Checks in Bayesian\nWorkflow.” https://arxiv.org/abs/2503.01509.\n\n\nTalts, Sean, Michael Betancourt, Daniel Simpson, Aki Vehtari, and Andrew\nGelman. 2020. “Validating Bayesian Inference Algorithms with\nSimulation-Based Calibration.” https://arxiv.org/abs/1804.06788.\n\n\nTukey, John W. 1977. Exploratory Data\nAnalysis. 1 edition. Pearson.\n\n\nVehtari, Aki, Andrew Gelman, and Jonah Gabry. 2017. “Practical\nBayesian Model Evaluation Using Leave-One-Out Cross-Validation and\nWAIC.” Statistics and Computing 27 (5): 1413–32. https://doi.org/10.1007/s11222-016-9696-4.\n\n\nVehtari, Aki, Andrew Gelman, Daniel Simpson, Bob Carpenter, and\nPaul-Christian Bürkner. 2021. “Rank-Normalization, Folding, and Localization: An\nImproved R̂ for Assessing\nConvergence of MCMC (with Discussion).” Bayesian\nAnalysis 16 (2): 667–718. https://doi.org/10.1214/20-BA1221.\n\n\nVenables, W. N., and B. D. Ripley. 2002. Modern Applied\nStatistics with S. 4th edition. New York:\nSpringer.\n\n\nWatanabe, Sumio. 2013. “A Widely\nApplicable Bayesian Information\nCriterion.” Journal of Machine Learning\nResearch 14 (March): 867–97.\n\n\nYao, Yuling, Aki Vehtari, Daniel Simpson, and Andrew Gelman. 2018.\n“Using Stacking to Average Bayesian\nPredictive Distributions (with Discussion).” Bayesian\nAnalysis 13 (3): 917–1007. https://doi.org/10.1214/17-BA1091.",
    "crumbs": [
      "References"
    ]
  }
]